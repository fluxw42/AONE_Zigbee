###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        15/Dec/2016  11:49:46
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\AONE_Zigbee\EmberZNet5.3.0-GA\em35x\app\framework\plugin\scenes\scenes.c
#    Command line =  
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\AONE_Zigbee\EmberZNet5.3.0-GA\em35x\app\framework\plugin\scenes\scenes.c"
#        -D
#        "GENERATED_TOKEN_HEADER=\"app/builder/Aurora_dimmer/Aurora_dimmer_tokens.h\""
#        -D "ZA_GENERATED_HEADER=\"app/builder/Aurora_dimmer/Aurora_dimmer.h\""
#        -D APP_BTL -D
#        "BOARD_HEADER=\"../../../AONE_Zigbee/EmberZNet5.3.0-GA/em35x/app/builder/Aurora_dimmer/Aurora_dimmer_board.h\""
#        -D "PLATFORM_HEADER=\"hal/micro/cortexm3/compiler/iar.h\"" -D CORTEXM3
#        -D CORTEXM3_EMBER_MICRO -D CORTEXM3_EM357 -D PHY_EM3XX -D
#        "APPLICATION_TOKEN_HEADER=\"app/framework/util/tokens.h\"" -D
#        "CONFIGURATION_HEADER=\"app/framework/util/config.h\"" -D
#        "ATTRIBUTE_STORAGE_CONFIGURATION=\"app/builder/Aurora_dimmer/Aurora_dimmer_endpoint_config.h\""
#        -D "__SOURCEFILE__=\"scenes.c\"" -lC
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\AONE_Zigbee\EmberZNet5.3.0-GA\em35x\build\Aurora_dimmer\"
#        --diag_suppress Pa050 -o
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\AONE_Zigbee\EmberZNet5.3.0-GA\em35x\build\Aurora_dimmer\"
#        --debug --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\AONE_Zigbee\EmberZNet5.3.0-GA\em35x\app\framework\plugin\scenes\"
#        -I "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\AONE_Zigbee\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\"
#        -I "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\AONE_Zigbee\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\"
#        -I "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\AONE_Zigbee\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\app\framework\include\"
#        -I "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\AONE_Zigbee\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\..\..\..\16.09.23
#        Fixedonoff\EmberZNet5.3.0-GA\em35x\" -I
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\AONE_Zigbee\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\..\..\..\16.09.23
#        Fixedonoff\EmberZNet5.3.0-GA\em35x\stack\" -I
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\AONE_Zigbee\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\..\..\..\16.09.23
#        Fixedonoff\EmberZNet5.3.0-GA\em35x\hal\" -I
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\AONE_Zigbee\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\..\..\..\16.09.23
#        Fixedonoff\EmberZNet5.3.0-GA\em35x\hal\..\" -Ohz --use_c++_inline
#    List file    =  
#        C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\AONE_Zigbee\EmberZNet5.3.0-GA\em35x\build\Aurora_dimmer\scenes.lst
#    Object file  =  
#        C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\AONE_Zigbee\EmberZNet5.3.0-GA\em35x\build\Aurora_dimmer\scenes.o
#
###############################################################################

C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH ETRX357\AONE_Zigbee\EmberZNet5.3.0-GA\em35x\app\framework\plugin\scenes\scenes.c
      1          // *******************************************************************
      2          // * scenes.c
      3          // *
      4          // *
      5          // * Copyright 2007 by Ember Corporation. All rights reserved.              *80*
      6          // *******************************************************************
      7          
      8          #include "../../include/af.h"
      9          #include "../../util/common.h"
     10          #include "scenes.h"
     11          
     12          #ifdef EMBER_AF_PLUGIN_ZLL_SCENES_SERVER
     13            #include "../zll-scenes-server/zll-scenes-server.h"
     14          #endif
     15          

   \                                 In section .bss, align 1
     16          int8u emberAfPluginScenesServerEntriesInUse = 0;
   \                     emberAfPluginScenesServerEntriesInUse:
   \   00000000                      DS8 1
     17          #if !defined(EMBER_AF_PLUGIN_SCENES_USE_TOKENS) || defined(EZSP_HOST)
     18            EmberAfSceneTableEntry emberAfPluginScenesServerSceneTable[EMBER_AF_PLUGIN_SCENES_TABLE_SIZE];
     19          #endif
     20          

   \                                 In section .text, align 2, keep-with-next
     21          static boolean readServerAttribute(int8u endpoint,
     22                                             EmberAfClusterId clusterId,
     23                                             EmberAfAttributeId attributeId,
     24                                             PGM_P name,
     25                                             int8u *data,
     26                                             int8u size)
     27          {
   \                     readServerAttribute: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
   \   00000006   0x4616             MOV      R6,R2
     28            boolean success = FALSE;
     29            if (emberAfContainsServer(endpoint, clusterId)) {
   \   00000008   0x.... 0x....      BL       emberAfContainsServer
   \   0000000C   0x2700             MOVS     R7,#+0
   \   0000000E   0xB148             CBZ.N    R0,??readServerAttribute_0
     30              EmberAfStatus status = emberAfReadServerAttribute(endpoint,
     31                                                                clusterId,
     32                                                                attributeId,
     33                                                                data,
     34                                                                size);
     35              if (status == EMBER_ZCL_STATUS_SUCCESS) {
   \   00000010   0x9807             LDR      R0,[SP, #+28]
   \   00000012   0x9B06             LDR      R3,[SP, #+24]
   \   00000014   0x9000             STR      R0,[SP, #+0]
   \   00000016   0x4632             MOV      R2,R6
   \   00000018   0x4629             MOV      R1,R5
   \   0000001A   0x4620             MOV      R0,R4
   \   0000001C   0x.... 0x....      BL       emberAfReadServerAttribute
   \   00000020   0xB900             CBNZ.N   R0,??readServerAttribute_0
     36                success = TRUE;
   \   00000022   0x2701             MOVS     R7,#+1
     37              } else {
     38                emberAfScenesClusterPrintln("ERR: %ping %p 0x%x", "read", name, status);
     39              }
     40            }
     41            return success;
   \                     ??readServerAttribute_0: (+1)
   \   00000024   0x4638             MOV      R0,R7
   \   00000026   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
     42          }
     43          

   \                                 In section .text, align 2, keep-with-next
     44          static EmberAfStatus writeServerAttribute(int8u endpoint,
     45                                                    EmberAfClusterId clusterId,
     46                                                    EmberAfAttributeId attributeId,
     47                                                    PGM_P name,
     48                                                    int8u *data,
     49                                                    EmberAfAttributeType type)
     50          {
   \                     writeServerAttribute: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     51            EmberAfStatus status = emberAfWriteServerAttribute(endpoint,
     52                                                               clusterId,
     53                                                               attributeId,
     54                                                               data,
     55                                                               type);
     56            if (status != EMBER_ZCL_STATUS_SUCCESS) {
     57              emberAfScenesClusterPrintln("ERR: %ping %p 0x%x", "writ", name, status);
     58            }
     59            return status;
   \   00000002   0x9B03             LDR      R3,[SP, #+12]
   \   00000004   0x9300             STR      R3,[SP, #+0]
   \   00000006   0x9B02             LDR      R3,[SP, #+8]
   \   00000008   0x.... 0x....      BL       emberAfWriteServerAttribute
   \   0000000C   0xBD02             POP      {R1,PC}          ;; return
     60          }
     61          

   \                                 In section .text, align 2, keep-with-next
     62          void emberAfScenesClusterServerInitCallback(int8u endpoint)
     63          {
   \                     emberAfScenesClusterServerInitCallback: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
     64          #ifdef EMBER_AF_PLUGIN_SCENES_NAME_SUPPORT
     65            {
     66              // The high bit of Name Support indicates whether scene names are supported.
     67              int8u nameSupport = BIT(7);
     68              writeServerAttribute(endpoint,
     69                                   ZCL_SCENES_CLUSTER_ID,
     70                                   ZCL_SCENE_NAME_SUPPORT_ATTRIBUTE_ID,
     71                                   "name support",
     72                                   (int8u *)&nameSupport,
     73                                   ZCL_BITMAP8_ATTRIBUTE_TYPE);
     74            }
     75          #endif
     76          #if !defined(EMBER_AF_PLUGIN_SCENES_USE_TOKENS) || defined(EZSP_HOST)
     77            {
     78              int8u i;
     79              for (i = 0; i < EMBER_AF_PLUGIN_SCENES_TABLE_SIZE; i++) {
     80                EmberAfSceneTableEntry entry;
     81                emberAfPluginScenesServerRetrieveSceneEntry(entry, i);
     82                entry.endpoint = EMBER_AF_SCENE_TABLE_UNUSED_ENDPOINT_ID;
     83                emberAfPluginScenesServerSaveSceneEntry(entry, i);
     84              }
     85              emberAfPluginScenesServerSetNumSceneEntriesInUse(0);
     86            }
     87          #endif
     88            emberAfScenesSetSceneCountAttribute(endpoint,
     89                                                emberAfPluginScenesServerNumSceneEntriesInUse());
   \   00000004   0x.... 0x....      LDR.W    R5,??DataTable37
   \   00000008   0x.... 0x....      BL       ?Subroutine8
   \                     ??CrossCallReturnLabel_28: (+1)
   \   0000000C   0x7829             LDRB     R1,[R5, #+0]
   \   0000000E   0x4620             MOV      R0,R4
   \   00000010   0xE8BD 0x4034      POP      {R2,R4,R5,LR}
   \   00000014                      REQUIRE emberAfScenesSetSceneCountAttribute
   \   00000014                      ;; // Fall through to label emberAfScenesSetSceneCountAttribute
     90          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine8: (+1)
   \   00000000   0x2301             MOVS     R3,#+1
   \   00000002   0x227F             MOVS     R2,#+127
   \   00000004   0x211C             MOVS     R1,#+28
   \   00000006   0x4628             MOV      R0,R5
   \   00000008   0x.... 0x....      B.W      halInternalGetTokenData
     91          

   \                                 In section .text, align 2, keep-with-next
     92          EmberAfStatus emberAfScenesSetSceneCountAttribute(int8u endpoint,
     93                                                            int8u newCount)
     94          {
   \                     emberAfScenesSetSceneCountAttribute: (+1)
   \   00000000   0xB502             PUSH     {R1,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
     95            return writeServerAttribute(endpoint,
     96                                        ZCL_SCENES_CLUSTER_ID,
     97                                        ZCL_SCENE_COUNT_ATTRIBUTE_ID,
     98                                        "scene count",
     99                                        (int8u *)&newCount,
    100                                        ZCL_INT8U_ATTRIBUTE_TYPE);
   \   00000004   0x2120             MOVS     R1,#+32
   \   00000006   0x9101             STR      R1,[SP, #+4]
   \   00000008   0xA902             ADD      R1,SP,#+8
   \   0000000A   0x9100             STR      R1,[SP, #+0]
   \   0000000C   0x2200             MOVS     R2,#+0
   \   0000000E   0x.... 0x....      ADR.W    R3,?_0
   \   00000012   0x....             B.N      ?Subroutine0
    101          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \   00000000   0x2105             MOVS     R1,#+5
   \   00000002   0x.... 0x....      BL       writeServerAttribute
   \   00000006   0xBD0E             POP      {R1-R3,PC}       ;; return
    102          

   \                                 In section .text, align 2, keep-with-next
    103          EmberAfStatus emberAfScenesMakeValid(int8u endpoint,
    104                                               int8u sceneId,
    105                                               int16u groupId)
    106          {
   \                     emberAfScenesMakeValid: (+1)
   \   00000000   0xB516             PUSH     {R1,R2,R4,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
   \   00000004   0x4604             MOV      R4,R0
    107            EmberAfStatus status;
    108            boolean valid = TRUE;
   \   00000006   0x2001             MOVS     R0,#+1
   \   00000008   0xF88D 0x0008      STRB     R0,[SP, #+8]
    109          
    110            // scene ID
    111            status = writeServerAttribute(endpoint,
    112                                          ZCL_SCENES_CLUSTER_ID,
    113                                          ZCL_CURRENT_SCENE_ATTRIBUTE_ID,
    114                                          "current scene",
    115                                          (int8u *)&sceneId,
    116                                          ZCL_INT8U_ATTRIBUTE_TYPE);
   \   0000000C   0x2020             MOVS     R0,#+32
   \   0000000E   0x9001             STR      R0,[SP, #+4]
   \   00000010   0xA804             ADD      R0,SP,#+16
   \   00000012   0x9000             STR      R0,[SP, #+0]
   \   00000014   0x2201             MOVS     R2,#+1
   \   00000016   0x.... 0x....      ADR.W    R3,?_1
   \   0000001A   0x2105             MOVS     R1,#+5
   \   0000001C   0x.... 0x....      BL       ??Subroutine3_0
    117            if (status != EMBER_ZCL_STATUS_SUCCESS) {
   \                     ??CrossCallReturnLabel_11: (+1)
   \   00000020   0xB9A0             CBNZ.N   R0,??CrossCallReturnLabel_9
    118              return status;
    119            }
    120          
    121            // group ID
    122            status = writeServerAttribute(endpoint,
    123                                          ZCL_SCENES_CLUSTER_ID,
    124                                          ZCL_CURRENT_GROUP_ATTRIBUTE_ID,
    125                                          "current group",
    126                                          (int8u *)&groupId,
    127                                          ZCL_INT16U_ATTRIBUTE_TYPE);
   \   00000022   0x2021             MOVS     R0,#+33
   \   00000024   0x9001             STR      R0,[SP, #+4]
   \   00000026   0xA805             ADD      R0,SP,#+20
   \   00000028   0x9000             STR      R0,[SP, #+0]
   \   0000002A   0x2202             MOVS     R2,#+2
   \   0000002C   0x.... 0x....      ADR.W    R3,?_2
   \   00000030   0x2105             MOVS     R1,#+5
   \   00000032   0x.... 0x....      BL       ??Subroutine3_0
    128            if (status != EMBER_ZCL_STATUS_SUCCESS) {
   \                     ??CrossCallReturnLabel_10: (+1)
   \   00000036   0xB948             CBNZ.N   R0,??CrossCallReturnLabel_9
    129              return status;
    130            }
    131          
    132            status = writeServerAttribute(endpoint,
    133                                          ZCL_SCENES_CLUSTER_ID,
    134                                          ZCL_SCENE_VALID_ATTRIBUTE_ID,
    135                                          "scene valid",
    136                                          (int8u *)&valid,
    137                                          ZCL_BOOLEAN_ATTRIBUTE_TYPE);
    138            return status;
   \   00000038   0x2010             MOVS     R0,#+16
   \   0000003A   0x9001             STR      R0,[SP, #+4]
   \   0000003C   0xA802             ADD      R0,SP,#+8
   \   0000003E   0x9000             STR      R0,[SP, #+0]
   \   00000040   0x2203             MOVS     R2,#+3
   \   00000042   0x.... 0x....      ADR.W    R3,?_3
   \   00000046   0x2105             MOVS     R1,#+5
   \   00000048   0x.... 0x....      BL       ??Subroutine3_0
   \                     ??CrossCallReturnLabel_9: (+1)
   \   0000004C   0xB006             ADD      SP,SP,#+24
   \   0000004E   0xBD10             POP      {R4,PC}          ;; return
    139          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine3: (+1)
   \   00000000   0xF44F 0x7140      MOV      R1,#+768
   \                     ??Subroutine3_0: (+1)
   \   00000004   0x4620             MOV      R0,R4
   \   00000006   0x....             B.N      writeServerAttribute
    140          

   \                                 In section .text, align 2, keep-with-next
    141          EmberAfStatus emberAfScenesClusterMakeInvalidCallback(int8u endpoint)
    142          {
   \                     emberAfScenesClusterMakeInvalidCallback: (+1)
   \   00000000   0xB5E0             PUSH     {R5-R7,LR}
    143            boolean valid = FALSE;
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0xF88D 0x1008      STRB     R1,[SP, #+8]
    144            return writeServerAttribute(endpoint,
    145                                        ZCL_SCENES_CLUSTER_ID,
    146                                        ZCL_SCENE_VALID_ATTRIBUTE_ID,
    147                                        "scene valid",
    148                                        (int8u *)&valid,
    149                                        ZCL_BOOLEAN_ATTRIBUTE_TYPE);
   \   00000008   0x2110             MOVS     R1,#+16
   \   0000000A   0x9101             STR      R1,[SP, #+4]
   \   0000000C   0xA902             ADD      R1,SP,#+8
   \   0000000E   0x9100             STR      R1,[SP, #+0]
   \   00000010   0x2203             MOVS     R2,#+3
   \   00000012   0x.... 0x....      ADR.W    R3,?_3
   \   00000016                      REQUIRE ?Subroutine0
   \   00000016                      ;; // Fall through to label ?Subroutine0
    150          }
    151          

   \                                 In section .text, align 2, keep-with-next
    152          void emAfPluginScenesServerPrintInfo(void)
    153          {
   \                     emAfPluginScenesServerPrintInfo: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
    154            int8u i;
    155            EmberAfSceneTableEntry entry;
    156            emberAfCorePrintln("using 0x%x out of 0x%x table slots",
    157                               emberAfPluginScenesServerNumSceneEntriesInUse(),
    158                               EMBER_AF_PLUGIN_SCENES_TABLE_SIZE);
   \   00000004   0x.... 0x....      LDR.W    R4,??DataTable37
   \   00000008   0xB08D             SUB      SP,SP,#+52
   \   0000000A   0x2301             MOVS     R3,#+1
   \   0000000C   0x227F             MOVS     R2,#+127
   \   0000000E   0x211C             MOVS     R1,#+28
   \   00000010   0x4620             MOV      R0,R4
   \   00000012   0x.... 0x....      BL       halInternalGetTokenData
   \   00000016   0x7822             LDRB     R2,[R4, #+0]
   \   00000018   0x.... 0x....      ADR.W    R1,?_4
   \   0000001C   0x2314             MOVS     R3,#+20
   \   0000001E   0x2001             MOVS     R0,#+1
   \   00000020   0x.... 0x....      BL       emberAfPrintln
    159            for (i = 0; i < EMBER_AF_PLUGIN_SCENES_TABLE_SIZE; i++) {
   \   00000024   0x2400             MOVS     R4,#+0
   \   00000026   0x.... 0x....      ADR.W    R5,?_11
   \   0000002A   0x.... 0x....      ADR.W    R6,?_10
   \   0000002E   0x.... 0x....      ADR.W    R9,?_9
   \   00000032   0x.... 0x....      ADR.W    R8,?_8
   \   00000036   0x.... 0x....      ADR.W    R10,?_6
   \   0000003A   0x.... 0x....      ADR.W    R11,?_5
   \   0000003E   0x....             ADR.N    R7,??DataTable30  ;; ".%d"
    160              emberAfPluginScenesServerRetrieveSceneEntry(entry, i);
   \                     ??emAfPluginScenesServerPrintInfo_0: (+1)
   \   00000040   0x2322             MOVS     R3,#+34
   \   00000042   0x4622             MOV      R2,R4
   \   00000044   0x.... 0x....      BL       ?Subroutine16
    161              emberAfCorePrint("%x: ", i);
   \                     ??CrossCallReturnLabel_57: (+1)
   \   00000048   0x4622             MOV      R2,R4
   \   0000004A   0x4659             MOV      R1,R11
   \   0000004C   0x.... 0x....      BL       ?Subroutine14
    162              if (entry.endpoint != EMBER_AF_SCENE_TABLE_UNUSED_ENDPOINT_ID) {
   \                     ??CrossCallReturnLabel_48: (+1)
   \   00000050   0xF89D 0x000C      LDRB     R0,[SP, #+12]
   \   00000054   0x2800             CMP      R0,#+0
   \   00000056   0xD03B             BEQ.N    ??emAfPluginScenesServerPrintInfo_1
    163                emberAfCorePrint("ep %x grp %2x scene %x tt %d",
    164                                 entry.endpoint,
    165                                 entry.groupId,
    166                                 entry.sceneId,
    167                                 entry.transitionTime);
   \   00000058   0xF8BD 0x0012      LDRH     R0,[SP, #+18]
   \   0000005C   0xF8BD 0x300E      LDRH     R3,[SP, #+14]
   \   00000060   0xF89D 0x200C      LDRB     R2,[SP, #+12]
   \   00000064   0x9001             STR      R0,[SP, #+4]
   \   00000066   0x4651             MOV      R1,R10
   \   00000068   0xF89D 0x0010      LDRB     R0,[SP, #+16]
   \   0000006C   0x9000             STR      R0,[SP, #+0]
   \   0000006E   0x2001             MOVS     R0,#+1
   \   00000070   0x.... 0x....      BL       emberAfPrint
    168                if (emberIsZllNetwork()) {
   \   00000074   0x.... 0x....      BL       emberIsZllNetwork
   \   00000078   0xB120             CBZ.N    R0,??CrossCallReturnLabel_47
    169                  emberAfCorePrint(".%d", entry.transitionTime100ms);
   \   0000007A   0xF89D 0x2014      LDRB     R2,[SP, #+20]
   \   0000007E   0x4639             MOV      R1,R7
   \   00000080   0x.... 0x....      BL       ?Subroutine14
    170                }
    171          #ifdef EMBER_AF_PLUGIN_SCENES_NAME_SUPPORT
    172                emberAfCorePrint(" name(%x)\"", emberAfStringLength(entry.name));
    173                emberAfCorePrintString(entry.name);
    174                emberAfCorePrint("\"");
    175          #endif
    176          #ifdef ZCL_USING_ON_OFF_CLUSTER_SERVER
    177                emberAfCorePrint(" on/off %x", entry.onOffValue);
   \                     ??CrossCallReturnLabel_47: (+1)
   \   00000084   0xF89D 0x2016      LDRB     R2,[SP, #+22]
   \   00000088   0x4641             MOV      R1,R8
   \   0000008A   0x.... 0x....      BL       ?Subroutine14
    178          #endif
    179          #ifdef ZCL_USING_LEVEL_CONTROL_CLUSTER_SERVER
    180                emberAfCorePrint(" lvl %x", entry.currentLevelValue);
   \                     ??CrossCallReturnLabel_46: (+1)
   \   0000008E   0xF89D 0x2018      LDRB     R2,[SP, #+24]
   \   00000092   0x4649             MOV      R1,R9
   \   00000094   0x.... 0x....      BL       ?Subroutine14
    181          #endif
    182          #ifdef ZCL_USING_THERMOSTAT_CLUSTER_SERVER
    183                emberAfCorePrint(" therm %2x %2x %x",
    184                                 entry.occupiedCoolingSetpointValue,
    185                                 entry.occupiedHeatingSetpointValue,
    186                                 entry.systemModeValue);
    187          #endif
    188          #ifdef ZCL_USING_COLOR_CONTROL_CLUSTER_SERVER
    189                emberAfCorePrint(" color %2x %2x",
    190                                 entry.currentXValue,
    191                                 entry.currentYValue);
   \                     ??CrossCallReturnLabel_45: (+1)
   \   00000098   0xF8BD 0x301E      LDRH     R3,[SP, #+30]
   \   0000009C   0xF8BD 0x201A      LDRH     R2,[SP, #+26]
   \   000000A0   0x4631             MOV      R1,R6
   \   000000A2   0x2001             MOVS     R0,#+1
   \   000000A4   0x.... 0x....      BL       emberAfPrint
    192                if (emberIsZllNetwork()) {
   \   000000A8   0x.... 0x....      BL       emberIsZllNetwork
   \   000000AC   0xB180             CBZ.N    R0,??emAfPluginScenesServerPrintInfo_1
    193                  emberAfCorePrint(" %2x %x %x %x %2x",
    194                                   entry.enhancedCurrentHueValue,
    195                                   entry.currentSaturationValue,
    196                                   entry.colorLoopActiveValue,
    197                                   entry.colorLoopDirectionValue,
    198                                   entry.colorLoopTimeValue);
   \   000000AE   0xF8BD 0x002C      LDRH     R0,[SP, #+44]
   \   000000B2   0xF89D 0x3025      LDRB     R3,[SP, #+37]
   \   000000B6   0xF8BD 0x2022      LDRH     R2,[SP, #+34]
   \   000000BA   0x9002             STR      R0,[SP, #+8]
   \   000000BC   0x4629             MOV      R1,R5
   \   000000BE   0xF89D 0x0029      LDRB     R0,[SP, #+41]
   \   000000C2   0x9001             STR      R0,[SP, #+4]
   \   000000C4   0xF89D 0x0027      LDRB     R0,[SP, #+39]
   \   000000C8   0x9000             STR      R0,[SP, #+0]
   \   000000CA   0x2001             MOVS     R0,#+1
   \   000000CC   0x.... 0x....      BL       emberAfPrint
    199                }
    200                emberAfCoreFlush();
    201          #endif //ZCL_USING_COLOR_CONTROL_CLUSTER_SERVER
    202          #ifdef ZCL_USING_DOOR_LOCK_CLUSTER_SERVER
    203                emberAfCorePrint(" door %x", entry.lockStateValue);
    204          #endif
    205          #ifdef ZCL_USING_WINDOW_COVERING_CLUSTER_SERVER
    206                emberAfCorePrint(" window %x %x",
    207                                 entry.currentPositionLiftPercentageValue,
    208                                 entry.currentPositionTiltPercentageValue);
    209          #endif
    210              }
    211              emberAfCorePrintln("");
   \                     ??emAfPluginScenesServerPrintInfo_1: (+1)
   \   000000D0   0x....             ADR.N    R1,??DataTable32  ;; ""
   \   000000D2   0x2001             MOVS     R0,#+1
   \   000000D4   0x.... 0x....      BL       emberAfPrintln
    212            }
   \   000000D8   0x1C64             ADDS     R4,R4,#+1
   \   000000DA   0x2C14             CMP      R4,#+20
   \   000000DC   0xDBB0             BLT.N    ??emAfPluginScenesServerPrintInfo_0
    213          }
   \   000000DE   0xB00D             ADD      SP,SP,#+52
   \   000000E0   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine14: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x.... 0x....      B.W      emberAfPrint

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine16: (+1)
   \   00000000   0x211D             MOVS     R1,#+29
   \   00000002   0xA803             ADD      R0,SP,#+12
   \   00000004   0x.... 0x....      B.W      halInternalGetTokenData
    214          

   \                                 In section .text, align 2, keep-with-next
    215          boolean emberAfScenesClusterAddSceneCallback(int16u groupId,
    216                                                       int8u sceneId,
    217                                                       int16u transitionTime,
    218                                                       int8u *sceneName,
    219                                                       int8u *extensionFieldSets)
    220          {
   \                     emberAfScenesClusterAddSceneCallback: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
    221            return emberAfPluginScenesServerParseAddScene(emberAfCurrentCommand(),
    222                                                          groupId,
    223                                                          sceneId,
    224                                                          transitionTime,
    225                                                          sceneName,
    226                                                          extensionFieldSets);
   \   00000002   0x9300             STR      R3,[SP, #+0]
   \   00000004   0x4613             MOV      R3,R2
   \   00000006   0x460A             MOV      R2,R1
   \   00000008   0x4601             MOV      R1,R0
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable37_1
   \   0000000E   0x9C04             LDR      R4,[SP, #+16]
   \   00000010   0x6800             LDR      R0,[R0, #+0]
   \   00000012   0x9401             STR      R4,[SP, #+4]
   \   00000014   0x.... 0x....      BL       emberAfPluginScenesServerParseAddScene
   \   00000018   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    227          }
    228          

   \                                 In section .text, align 2, keep-with-next
    229          boolean emberAfScenesClusterViewSceneCallback(int16u groupId, int8u sceneId)
    230          {
    231            return emberAfPluginScenesServerParseViewScene(emberAfCurrentCommand(),
    232                                                           groupId,
    233                                                           sceneId);
   \                     emberAfScenesClusterViewSceneCallback: (+1)
   \   00000000   0x460A             MOV      R2,R1
   \   00000002   0x4601             MOV      R1,R0
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable37_1
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0x.... 0x....      B.W      emberAfPluginScenesServerParseViewScene
    234          }
    235          

   \                                 In section .text, align 2, keep-with-next
    236          boolean emberAfScenesClusterRemoveSceneCallback(int16u groupId, int8u sceneId)
    237          {
   \                     emberAfScenesClusterRemoveSceneCallback: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xB08A             SUB      SP,SP,#+40
   \   00000006   0x4604             MOV      R4,R0
   \   00000008   0x4688             MOV      R8,R1
    238            EmberAfStatus status = EMBER_ZCL_STATUS_NOT_FOUND;
   \   0000000A   0x278B             MOVS     R7,#+139
    239          
    240            emberAfScenesClusterPrintln("RX: RemoveScene 0x%2x, 0x%x", groupId, sceneId);
    241          
    242            // If a group id is specified but this endpoint isn't in it, take no action.
    243            if (groupId != ZCL_SCENES_GLOBAL_SCENE_GROUP_ID
    244                && !emberAfGroupsClusterEndpointInGroupCallback(emberAfCurrentEndpoint(),
    245                                                                groupId)) {
   \   0000000C   0x.... 0x....      LDR.W    R6,??DataTable37_1
   \   00000010   0xB124             CBZ.N    R4,??emberAfScenesClusterRemoveSceneCallback_0
   \   00000012   0x.... 0x....      BL       ?Subroutine18
   \                     ??CrossCallReturnLabel_61: (+1)
   \   00000016   0xB908             CBNZ.N   R0,??emberAfScenesClusterRemoveSceneCallback_0
    246              status = EMBER_ZCL_STATUS_INVALID_FIELD;
   \   00000018   0x2785             MOVS     R7,#+133
   \   0000001A   0xE01E             B.N      ??emberAfScenesClusterRemoveSceneCallback_1
    247            } else {
    248              int8u i;
    249              for (i = 0; i < EMBER_AF_PLUGIN_SCENES_TABLE_SIZE; i++) {
   \                     ??emberAfScenesClusterRemoveSceneCallback_0: (+1)
   \   0000001C   0x2500             MOVS     R5,#+0
    250                EmberAfSceneTableEntry entry;
    251                emberAfPluginScenesServerRetrieveSceneEntry(entry, i);
   \                     ??emberAfScenesClusterRemoveSceneCallback_2: (+1)
   \   0000001E   0x.... 0x....      BL       ?Subroutine15
    252                if (entry.endpoint == emberAfCurrentEndpoint()
    253                    && entry.groupId == groupId
    254                    && entry.sceneId == sceneId) {
   \                     ??CrossCallReturnLabel_53: (+1)
   \   00000022   0x.... 0x....      BL       ?Subroutine21
   \                     ??CrossCallReturnLabel_67: (+1)
   \   00000026   0xBF01             ITTTT    EQ 
   \   00000028   0xF8BD 0x0002      LDRHEQ   R0,[SP, #+2]
   \   0000002C   0x42A0             CMPEQ    R0,R4
   \   0000002E   0xF89D 0x0004      LDRBEQ   R0,[SP, #+4]
   \   00000032   0x4540             CMPEQ    R0,R8
   \   00000034   0xD10D             BNE.N    ??emberAfScenesClusterRemoveSceneCallback_3
    255                  entry.endpoint = EMBER_AF_SCENE_TABLE_UNUSED_ENDPOINT_ID;
   \   00000036   0x.... 0x....      BL       ?Subroutine17
    256                  emberAfPluginScenesServerSaveSceneEntry(entry, i);
    257                  emberAfPluginScenesServerDecrNumSceneEntriesInUse();
   \                     ??CrossCallReturnLabel_59: (+1)
   \   0000003A   0x.... 0x....      LDR.W    R7,??DataTable37
   \   0000003E   0x.... 0x....      BL       ?Subroutine9
   \                     ??CrossCallReturnLabel_32: (+1)
   \   00000042   0x.... 0x....      BL       ?Subroutine10
    258                  emberAfScenesSetSceneCountAttribute(emberAfCurrentEndpoint(),
    259                                                      emberAfPluginScenesServerNumSceneEntriesInUse());
   \                     ??CrossCallReturnLabel_34: (+1)
   \   00000046   0x.... 0x....      BL       ?Subroutine9
   \                     ??CrossCallReturnLabel_31: (+1)
   \   0000004A   0x.... 0x....      BL       ?Subroutine19
    260                  status = EMBER_ZCL_STATUS_SUCCESS;
   \                     ??CrossCallReturnLabel_63: (+1)
   \   0000004E   0x2700             MOVS     R7,#+0
    261                  break;
   \   00000050   0xE003             B.N      ??emberAfScenesClusterRemoveSceneCallback_1
    262                }
    263              }
   \                     ??emberAfScenesClusterRemoveSceneCallback_3: (+1)
   \   00000052   0x1C6D             ADDS     R5,R5,#+1
   \   00000054   0xB2ED             UXTB     R5,R5
   \   00000056   0x2D14             CMP      R5,#+20
   \   00000058   0xDBE1             BLT.N    ??emberAfScenesClusterRemoveSceneCallback_2
   \                     ??emberAfScenesClusterRemoveSceneCallback_1: (+1)
   \   0000005A   0x6830             LDR      R0,[R6, #+0]
   \   0000005C   0x7900             LDRB     R0,[R0, #+4]
   \   0000005E   0x2800             CMP      R0,#+0
   \   00000060   0xBF18             IT       NE 
   \   00000062   0x2801             CMPNE    R0,#+1
   \   00000064   0xD109             BNE.N    ??emberAfScenesClusterRemoveSceneCallback_4
    264            }
    265          
    266            // Remove Scene commands are only responded to when they are addressed to a
    267            // single device.
    268            if (emberAfCurrentCommand()->type == EMBER_INCOMING_UNICAST
    269                || emberAfCurrentCommand()->type == EMBER_INCOMING_UNICAST_REPLY) {
    270              emberAfFillCommandScenesClusterRemoveSceneResponse(status,
    271                                                                 groupId,
    272                                                                 sceneId);
   \   00000066   0xF8CD 0x8008      STR      R8,[SP, #+8]
   \   0000006A   0x9401             STR      R4,[SP, #+4]
   \   0000006C   0x9700             STR      R7,[SP, #+0]
   \   0000006E   0x....             ADR.N    R3,??DataTable32_1  ;; "uvu"
   \   00000070   0x2202             MOVS     R2,#+2
   \   00000072   0x.... 0x....      BL       ??Subroutine13_0
    273              emberAfSendResponse();
   \                     ??CrossCallReturnLabel_42: (+1)
   \   00000076   0x.... 0x....      BL       emberAfSendResponse
    274            }
    275            return TRUE;
   \                     ??emberAfScenesClusterRemoveSceneCallback_4: (+1)
   \   0000007A   0x....             B.N      ?Subroutine1
    276          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine21: (+1)
   \   00000000   0x6831             LDR      R1,[R6, #+0]
   \                     ??Subroutine21_0: (+1)
   \   00000002   0x6809             LDR      R1,[R1, #+0]
   \   00000004   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000008   0x7949             LDRB     R1,[R1, #+5]
   \   0000000A   0x4288             CMP      R0,R1
   \   0000000C   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   \                     ??Subroutine1_0: (+1)
   \   00000002   0xB00A             ADD      SP,SP,#+40
   \   00000004   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine19: (+1)
   \   00000000   0x6830             LDR      R0,[R6, #+0]
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x7839             LDRB     R1,[R7, #+0]
   \   00000006   0x7940             LDRB     R0,[R0, #+5]
   \   00000008   0x....             B.N      emberAfScenesSetSceneCountAttribute

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine18: (+1)
   \   00000000   0x6830             LDR      R0,[R6, #+0]
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x7940             LDRB     R0,[R0, #+5]
   \   00000006   0x4621             MOV      R1,R4
   \   00000008   0x.... 0x....      B.W      emberAfGroupsClusterEndpointInGroupCallback

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine10: (+1)
   \   00000000   0x7838             LDRB     R0,[R7, #+0]
   \   00000002   0x1E40             SUBS     R0,R0,#+1
   \   00000004   0x7038             STRB     R0,[R7, #+0]
   \   00000006   0x2301             MOVS     R3,#+1
   \   00000008   0x463A             MOV      R2,R7
   \   0000000A   0x217F             MOVS     R1,#+127
   \   0000000C   0x201C             MOVS     R0,#+28
   \   0000000E   0x.... 0x....      B.W      halInternalSetTokenData

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine9: (+1)
   \   00000000   0x2301             MOVS     R3,#+1
   \   00000002   0x227F             MOVS     R2,#+127
   \   00000004   0x211C             MOVS     R1,#+28
   \   00000006   0x4638             MOV      R0,R7
   \   00000008   0x.... 0x....      B.W      halInternalGetTokenData

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine13: (+1)
   \   00000000   0x....             ADR.N    R3,??DataTable32_1  ;; "uvu"
   \                     ??Subroutine13_0: (+1)
   \   00000002   0x2105             MOVS     R1,#+5
   \   00000004   0x2009             MOVS     R0,#+9
   \   00000006   0x.... 0x....      B.W      emberAfFillExternalBuffer

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine17: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   00000006   0x2322             MOVS     R3,#+34
   \   00000008   0xAA00             ADD      R2,SP,#+0
   \   0000000A   0x4629             MOV      R1,R5
   \   0000000C   0x201D             MOVS     R0,#+29
   \   0000000E   0x.... 0x....      B.W      halInternalSetTokenData

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine15: (+1)
   \   00000000   0x2322             MOVS     R3,#+34
   \   00000002   0x462A             MOV      R2,R5
   \                     ??Subroutine15_0: (+1)
   \   00000004   0x211D             MOVS     R1,#+29
   \   00000006   0xA800             ADD      R0,SP,#+0
   \   00000008   0x.... 0x....      B.W      halInternalGetTokenData
    277          

   \                                 In section .text, align 2, keep-with-next
    278          boolean emberAfScenesClusterRemoveAllScenesCallback(int16u groupId)
    279          {
   \                     emberAfScenesClusterRemoveAllScenesCallback: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xB08A             SUB      SP,SP,#+40
   \   00000006   0x4604             MOV      R4,R0
    280            EmberAfStatus status = EMBER_ZCL_STATUS_INVALID_FIELD;
   \   00000008   0x2585             MOVS     R5,#+133
    281          
    282            emberAfScenesClusterPrintln("RX: RemoveAllScenes 0x%2x", groupId);
    283          
    284            if (groupId == ZCL_SCENES_GLOBAL_SCENE_GROUP_ID
    285                || emberAfGroupsClusterEndpointInGroupCallback(emberAfCurrentEndpoint(),
    286                                                               groupId)) {
   \   0000000A   0x.... 0x....      LDR.W    R6,??DataTable37_1
   \   0000000E   0xB11C             CBZ.N    R4,??emberAfScenesClusterRemoveAllScenesCallback_0
   \   00000010   0x.... 0x....      BL       ?Subroutine18
   \                     ??CrossCallReturnLabel_60: (+1)
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xD022             BEQ.N    ??CrossCallReturnLabel_62
    287              int8u i;
    288              status = EMBER_ZCL_STATUS_SUCCESS;
   \                     ??emberAfScenesClusterRemoveAllScenesCallback_0: (+1)
   \   00000018   0x2500             MOVS     R5,#+0
    289              for (i = 0; i < EMBER_AF_PLUGIN_SCENES_TABLE_SIZE; i++) {
   \   0000001A   0x46A8             MOV      R8,R5
   \   0000001C   0x.... 0x....      LDR.W    R7,??DataTable37
    290                EmberAfSceneTableEntry entry;
    291                emberAfPluginScenesServerRetrieveSceneEntry(entry, i);
   \                     ??emberAfScenesClusterRemoveAllScenesCallback_1: (+1)
   \   00000020   0x2322             MOVS     R3,#+34
   \   00000022   0x4642             MOV      R2,R8
   \   00000024   0x.... 0x....      BL       ??Subroutine15_0
    292                if (entry.endpoint == emberAfCurrentEndpoint()
    293                    && entry.groupId == groupId) {
   \                     ??CrossCallReturnLabel_51: (+1)
   \   00000028   0x.... 0x....      BL       ?Subroutine21
   \                     ??CrossCallReturnLabel_68: (+1)
   \   0000002C   0xBF04             ITT      EQ 
   \   0000002E   0xF8BD 0x0002      LDRHEQ   R0,[SP, #+2]
   \   00000032   0x42A0             CMPEQ    R0,R4
   \   00000034   0xD10A             BNE.N    ??CrossCallReturnLabel_33
    294                  entry.endpoint = EMBER_AF_SCENE_TABLE_UNUSED_ENDPOINT_ID;
   \   00000036   0xF88D 0x5000      STRB     R5,[SP, #+0]
    295                  emberAfPluginScenesServerSaveSceneEntry(entry, i);
   \   0000003A   0x2322             MOVS     R3,#+34
   \   0000003C   0xAA00             ADD      R2,SP,#+0
   \   0000003E   0x4641             MOV      R1,R8
   \   00000040   0x.... 0x....      BL       ?Subroutine22
    296                  emberAfPluginScenesServerDecrNumSceneEntriesInUse();
   \                     ??CrossCallReturnLabel_73: (+1)
   \   00000044   0x.... 0x....      BL       ?Subroutine9
    297                }
    298              }
   \                     ??CrossCallReturnLabel_30: (+1)
   \   00000048   0x.... 0x....      BL       ?Subroutine10
   \                     ??CrossCallReturnLabel_33: (+1)
   \   0000004C   0xF108 0x0801      ADD      R8,R8,#+1
   \   00000050   0xF1B8 0x0F14      CMP      R8,#+20
   \   00000054   0xDBE4             BLT.N    ??emberAfScenesClusterRemoveAllScenesCallback_1
    299              emberAfScenesSetSceneCountAttribute(emberAfCurrentEndpoint(),
    300                                                  emberAfPluginScenesServerNumSceneEntriesInUse());
   \   00000056   0x.... 0x....      BL       ?Subroutine9
    301            }
   \                     ??CrossCallReturnLabel_29: (+1)
   \   0000005A   0x.... 0x....      BL       ?Subroutine19
   \                     ??CrossCallReturnLabel_62: (+1)
   \   0000005E   0x6830             LDR      R0,[R6, #+0]
   \   00000060   0x7900             LDRB     R0,[R0, #+4]
   \   00000062   0x2800             CMP      R0,#+0
   \   00000064   0xBF18             IT       NE 
   \   00000066   0x2801             CMPNE    R0,#+1
   \   00000068   0xD107             BNE.N    ??emberAfScenesClusterRemoveAllScenesCallback_2
    302          
    303            // Remove All Scenes commands are only responded to when they are addressed
    304            // to a single device.
    305            if (emberAfCurrentCommand()->type == EMBER_INCOMING_UNICAST
    306                || emberAfCurrentCommand()->type == EMBER_INCOMING_UNICAST_REPLY) {
    307              emberAfFillCommandScenesClusterRemoveAllScenesResponse(status, groupId);
   \   0000006A   0x9401             STR      R4,[SP, #+4]
   \   0000006C   0x9500             STR      R5,[SP, #+0]
   \   0000006E   0x....             ADR.N    R3,??DataTable33  ;; 0x75, 0x76, 0x00, 0x00
   \   00000070   0x2203             MOVS     R2,#+3
   \   00000072   0x.... 0x....      BL       ??Subroutine13_0
    308              emberAfSendResponse();
   \                     ??CrossCallReturnLabel_41: (+1)
   \   00000076   0x.... 0x....      BL       emberAfSendResponse
    309            }
    310            return TRUE;
   \                     ??emberAfScenesClusterRemoveAllScenesCallback_2: (+1)
   \   0000007A                      REQUIRE ?Subroutine1
   \   0000007A                      ;; // Fall through to label ?Subroutine1
    311          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine22: (+1)
   \   00000000   0x201D             MOVS     R0,#+29
   \   00000002   0x.... 0x....      B.W      halInternalSetTokenData
    312          

   \                                 In section .text, align 2, keep-with-next
    313          boolean emberAfScenesClusterStoreSceneCallback(int16u groupId, int8u sceneId)
    314          {
   \                     emberAfScenesClusterStoreSceneCallback: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
    315            EmberAfStatus status;
    316            emberAfScenesClusterPrintln("RX: StoreScene 0x%2x, 0x%x", groupId, sceneId);
    317            status = emberAfScenesClusterStoreCurrentSceneCallback(emberAfCurrentEndpoint(),
    318                                                                   groupId,
    319                                                                   sceneId);
   \   00000002   0x.... 0x....      LDR.W    R6,??DataTable37_1
   \   00000006   0xB084             SUB      SP,SP,#+16
   \   00000008   0x4604             MOV      R4,R0
   \   0000000A   0x6830             LDR      R0,[R6, #+0]
   \   0000000C   0x6800             LDR      R0,[R0, #+0]
   \   0000000E   0x7940             LDRB     R0,[R0, #+5]
   \   00000010   0x460D             MOV      R5,R1
   \   00000012   0x462A             MOV      R2,R5
   \   00000014   0x4621             MOV      R1,R4
   \   00000016   0x.... 0x....      BL       emberAfScenesClusterStoreCurrentSceneCallback
   \   0000001A   0x6831             LDR      R1,[R6, #+0]
   \   0000001C   0x7909             LDRB     R1,[R1, #+4]
   \   0000001E   0x2900             CMP      R1,#+0
   \   00000020   0xBF18             IT       NE 
   \   00000022   0x2901             CMPNE    R1,#+1
   \   00000024   0xD108             BNE.N    ??emberAfScenesClusterStoreSceneCallback_0
    320          
    321            // Store Scene commands are only responded to when they are addressed to a
    322            // single device.
    323            if (emberAfCurrentCommand()->type == EMBER_INCOMING_UNICAST
    324                || emberAfCurrentCommand()->type == EMBER_INCOMING_UNICAST_REPLY) {
    325              emberAfFillCommandScenesClusterStoreSceneResponse(status, groupId, sceneId);
   \   00000026   0x9000             STR      R0,[SP, #+0]
   \   00000028   0x9502             STR      R5,[SP, #+8]
   \   0000002A   0x9401             STR      R4,[SP, #+4]
   \   0000002C   0x....             ADR.N    R3,??DataTable32_1  ;; "uvu"
   \   0000002E   0x2204             MOVS     R2,#+4
   \   00000030   0x.... 0x....      BL       ??Subroutine13_0
    326              emberAfSendResponse();
   \                     ??CrossCallReturnLabel_40: (+1)
   \   00000034   0x.... 0x....      BL       emberAfSendResponse
    327            }
    328            return TRUE;
   \                     ??emberAfScenesClusterStoreSceneCallback_0: (+1)
   \   00000038   0x2001             MOVS     R0,#+1
   \   0000003A   0xB004             ADD      SP,SP,#+16
   \   0000003C   0xBD70             POP      {R4-R6,PC}       ;; return
    329          }
    330          

   \                                 In section .text, align 2, keep-with-next
    331          boolean emberAfScenesClusterRecallSceneCallback(int16u groupId, int8u sceneId)
    332          {
    333            EmberAfStatus status;
    334            emberAfScenesClusterPrintln("RX: RecallScene 0x%2x, 0x%x", groupId, sceneId);
    335            status = emberAfScenesClusterRecallSavedSceneCallback(emberAfCurrentEndpoint(),
    336                                                                  groupId,
    337                                                                  sceneId);
   \                     emberAfScenesClusterRecallSceneCallback: (+1)
   \   00000000   0x460A             MOV      R2,R1
   \   00000002   0xB580             PUSH     {R7,LR}
   \   00000004   0x4601             MOV      R1,R0
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable37_1
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0x6800             LDR      R0,[R0, #+0]
   \   0000000E   0x7940             LDRB     R0,[R0, #+5]
   \   00000010   0x.... 0x....      BL       emberAfScenesClusterRecallSavedSceneCallback
    338          #ifdef EMBER_AF_PLUGIN_ZLL_SCENES_SERVER
    339            if (status == EMBER_ZCL_STATUS_SUCCESS) {
    340              emberAfPluginZllScenesServerRecallSceneZllExtensions(emberAfCurrentEndpoint());
    341            }
    342          #endif
    343            emberAfSendImmediateDefaultResponse(status);
   \   00000014   0x.... 0x....      BL       emberAfSendImmediateDefaultResponse
    344            return TRUE;
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0xBD02             POP      {R1,PC}          ;; return
    345          }
    346          

   \                                 In section .text, align 2, keep-with-next
    347          boolean emberAfScenesClusterGetSceneMembershipCallback(int16u groupId)
    348          {
   \                     emberAfScenesClusterGetSceneMembershipCallback: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xB08E             SUB      SP,SP,#+56
   \   00000006   0x4606             MOV      R6,R0
    349            EmberAfStatus status = EMBER_ZCL_STATUS_SUCCESS;
    350            int8u sceneCount = 0;
    351          
    352            emberAfScenesClusterPrintln("RX: GetSceneMembership 0x%2x", groupId);
    353          
    354          
    355            // If this is a ZLL device, Get Scene Membership commands can only be
    356            // addressed to a single device.
    357            if (emberIsZllNetwork()) {
   \   00000008   0x.... 0x....      BL       emberIsZllNetwork
   \   0000000C   0x2700             MOVS     R7,#+0
   \   0000000E   0x2500             MOVS     R5,#+0
   \   00000010   0x.... 0x....      LDR.W    R4,??DataTable37_1
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xBF1F             ITTTT    NE 
   \   00000018   0x6820             LDRNE    R0,[R4, #+0]
   \   0000001A   0x7900             LDRBNE   R0,[R0, #+4]
   \   0000001C   0x2800             CMPNE    R0,#+0
   \   0000001E   0x2801             CMPNE    R0,#+1
   \   00000020   0xD14A             BNE.N    ??emberAfScenesClusterGetSceneMembershipCallbac_0
    358              if (emberAfCurrentCommand()->type != EMBER_INCOMING_UNICAST
    359                  && emberAfCurrentCommand()->type != EMBER_INCOMING_UNICAST_REPLY) {
    360                return TRUE;
    361              }
    362            }
    363          
    364            if (!groupId == ZCL_SCENES_GLOBAL_SCENE_GROUP_ID
    365                && !emberAfGroupsClusterEndpointInGroupCallback(emberAfCurrentEndpoint(),
    366                                                                groupId)) {
   \   00000022   0xB13E             CBZ.N    R6,??emberAfScenesClusterGetSceneMembershipCallbac_1
   \   00000024   0x6820             LDR      R0,[R4, #+0]
   \   00000026   0x6800             LDR      R0,[R0, #+0]
   \   00000028   0x7940             LDRB     R0,[R0, #+5]
   \   0000002A   0x4631             MOV      R1,R6
   \   0000002C   0x.... 0x....      BL       emberAfGroupsClusterEndpointInGroupCallback
   \   00000030   0xB900             CBNZ.N   R0,??emberAfScenesClusterGetSceneMembershipCallbac_1
    367              status = EMBER_ZCL_STATUS_INVALID_FIELD;
   \   00000032   0x2785             MOVS     R7,#+133
    368            }
    369          
    370            // The status, capacity, and group id are always included in the response, but
    371            // the scene count and scene list are only included if the group id matched.
    372            emberAfFillExternalBuffer((ZCL_CLUSTER_SPECIFIC_COMMAND
    373                                       | ZCL_FRAME_CONTROL_SERVER_TO_CLIENT
    374                                       | EMBER_AF_DEFAULT_RESPONSE_POLICY_RESPONSES),
    375                                      ZCL_SCENES_CLUSTER_ID,
    376                                      ZCL_GET_SCENE_MEMBERSHIP_RESPONSE_COMMAND_ID,
    377                                      "uuv",
    378                                      status,
    379                                      (EMBER_AF_PLUGIN_SCENES_TABLE_SIZE
    380                                       - emberAfPluginScenesServerNumSceneEntriesInUse()), // capacity
    381                                      groupId);
   \                     ??emberAfScenesClusterGetSceneMembershipCallbac_1: (+1)
   \   00000034   0x.... 0x....      LDR.W    R8,??DataTable37
   \   00000038   0x2301             MOVS     R3,#+1
   \   0000003A   0x227F             MOVS     R2,#+127
   \   0000003C   0x211C             MOVS     R1,#+28
   \   0000003E   0x4640             MOV      R0,R8
   \   00000040   0x.... 0x....      BL       halInternalGetTokenData
   \   00000044   0xF898 0x0000      LDRB     R0,[R8, #+0]
   \   00000048   0x9602             STR      R6,[SP, #+8]
   \   0000004A   0xF1C0 0x0014      RSB      R0,R0,#+20
   \   0000004E   0x9001             STR      R0,[SP, #+4]
   \   00000050   0x9700             STR      R7,[SP, #+0]
   \   00000052   0x....             ADR.N    R3,??DataTable33_1  ;; "uuv"
   \   00000054   0x2206             MOVS     R2,#+6
   \   00000056   0x.... 0x....      BL       ??Subroutine13_0
    382            if (status == EMBER_ZCL_STATUS_SUCCESS) {
   \                     ??CrossCallReturnLabel_39: (+1)
   \   0000005A   0xBB27             CBNZ.N   R7,??emberAfScenesClusterGetSceneMembershipCallbac_2
    383              int8u i, sceneList[EMBER_AF_PLUGIN_SCENES_TABLE_SIZE];
    384              for (i = 0; i < EMBER_AF_PLUGIN_SCENES_TABLE_SIZE; i++) {
   \   0000005C   0x46A8             MOV      R8,R5
   \   0000005E   0xAF09             ADD      R7,SP,#+36
    385                EmberAfSceneTableEntry entry;
    386                emberAfPluginScenesServerRetrieveSceneEntry(entry, i);
   \                     ??emberAfScenesClusterGetSceneMembershipCallbac_3: (+1)
   \   00000060   0x2322             MOVS     R3,#+34
   \   00000062   0x4642             MOV      R2,R8
   \   00000064   0x.... 0x....      BL       ??Subroutine15_0
    387                if (entry.endpoint == emberAfCurrentEndpoint()
    388                    && entry.groupId == groupId) {
   \                     ??CrossCallReturnLabel_50: (+1)
   \   00000068   0x6821             LDR      R1,[R4, #+0]
   \   0000006A   0x.... 0x....      BL       ??Subroutine21_0
   \                     ??CrossCallReturnLabel_69: (+1)
   \   0000006E   0xBF04             ITT      EQ 
   \   00000070   0xF8BD 0x0002      LDRHEQ   R0,[SP, #+2]
   \   00000074   0x42B0             CMPEQ    R0,R6
   \   00000076   0xD104             BNE.N    ??emberAfScenesClusterGetSceneMembershipCallbac_4
    389                  sceneList[sceneCount] = entry.sceneId;
   \   00000078   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   0000007C   0xB2ED             UXTB     R5,R5
   \   0000007E   0x55E8             STRB     R0,[R5, R7]
    390                  sceneCount++;
   \   00000080   0x1C6D             ADDS     R5,R5,#+1
    391                }
    392              }
   \                     ??emberAfScenesClusterGetSceneMembershipCallbac_4: (+1)
   \   00000082   0xF108 0x0801      ADD      R8,R8,#+1
   \   00000086   0xF1B8 0x0F14      CMP      R8,#+20
   \   0000008A   0xDBE9             BLT.N    ??emberAfScenesClusterGetSceneMembershipCallbac_3
    393              emberAfPutInt8uInResp(sceneCount);
   \   0000008C   0xB2E8             UXTB     R0,R5
   \   0000008E   0x.... 0x....      BL       emberAfPutInt8uInResp
    394              for (i = 0; i < sceneCount; i++) {
   \   00000092   0x2600             MOVS     R6,#+0
   \   00000094   0xE003             B.N      ??emberAfScenesClusterGetSceneMembershipCallbac_5
    395                emberAfPutInt8uInResp(sceneList[i]);
   \                     ??emberAfScenesClusterGetSceneMembershipCallbac_6: (+1)
   \   00000096   0x5DF0             LDRB     R0,[R6, R7]
   \   00000098   0x.... 0x....      BL       emberAfPutInt8uInResp
    396              }
   \   0000009C   0x1C76             ADDS     R6,R6,#+1
   \                     ??emberAfScenesClusterGetSceneMembershipCallbac_5: (+1)
   \   0000009E   0xB2F6             UXTB     R6,R6
   \   000000A0   0xB2ED             UXTB     R5,R5
   \   000000A2   0x42AE             CMP      R6,R5
   \   000000A4   0xD3F7             BCC.N    ??emberAfScenesClusterGetSceneMembershipCallbac_6
   \                     ??emberAfScenesClusterGetSceneMembershipCallbac_2: (+1)
   \   000000A6   0x6820             LDR      R0,[R4, #+0]
   \   000000A8   0x7900             LDRB     R0,[R0, #+4]
   \   000000AA   0x2800             CMP      R0,#+0
   \   000000AC   0xBF18             IT       NE 
   \   000000AE   0x2801             CMPNE    R0,#+1
   \   000000B0   0xD000             BEQ.N    ??emberAfScenesClusterGetSceneMembershipCallbac_7
   \   000000B2   0xB10D             CBZ.N    R5,??emberAfScenesClusterGetSceneMembershipCallbac_0
    397            }
    398          
    399            // Get Scene Membership commands are only responded to when they are
    400            // addressed to a single device or when an entry in the table matches.
    401            if (emberAfCurrentCommand()->type == EMBER_INCOMING_UNICAST
    402                || emberAfCurrentCommand()->type == EMBER_INCOMING_UNICAST_REPLY
    403                || sceneCount != 0) {
    404              emberAfSendResponse();
   \                     ??emberAfScenesClusterGetSceneMembershipCallbac_7: (+1)
   \   000000B4   0x.... 0x....      BL       emberAfSendResponse
    405            }
    406            return TRUE;
   \                     ??emberAfScenesClusterGetSceneMembershipCallbac_0: (+1)
   \   000000B8   0x2001             MOVS     R0,#+1
   \   000000BA   0xB00E             ADD      SP,SP,#+56
   \   000000BC   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    407          }
    408          

   \                                 In section .text, align 2, keep-with-next
    409          EmberAfStatus emberAfScenesClusterStoreCurrentSceneCallback(int8u endpoint,
    410                                                                      int16u groupId,
    411                                                                      int8u sceneId)
    412          {
   \                     emberAfScenesClusterStoreCurrentSceneCallback: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xB08C             SUB      SP,SP,#+48
   \   00000006   0x4604             MOV      R4,R0
   \   00000008   0x460D             MOV      R5,R1
   \   0000000A   0x4690             MOV      R8,R2
    413            EmberAfSceneTableEntry entry;
    414            int8u i, index = EMBER_AF_SCENE_TABLE_NULL_INDEX;
   \   0000000C   0x27FF             MOVS     R7,#+255
    415          
    416            // If a group id is specified but this endpoint isn't in it, take no action.
    417            if (groupId != ZCL_SCENES_GLOBAL_SCENE_GROUP_ID
    418                && !emberAfGroupsClusterEndpointInGroupCallback(endpoint, groupId)) {
   \   0000000E   0xB125             CBZ.N    R5,??emberAfScenesClusterStoreCurrentSceneCallback_0
   \   00000010   0x.... 0x....      BL       emberAfGroupsClusterEndpointInGroupCallback
   \   00000014   0xB908             CBNZ.N   R0,??emberAfScenesClusterStoreCurrentSceneCallback_0
    419              return EMBER_ZCL_STATUS_INVALID_FIELD;
   \   00000016   0x2085             MOVS     R0,#+133
   \                     ??emberAfScenesClusterStoreCurrentSceneCallback_1: (+1)
   \   00000018   0xE0C0             B.N      ??emberAfScenesClusterStoreCurrentSceneCallback_2
    420            }
    421          
    422            for (i = 0; i < EMBER_AF_PLUGIN_SCENES_TABLE_SIZE; i++) {
   \                     ??emberAfScenesClusterStoreCurrentSceneCallback_0: (+1)
   \   0000001A   0x2600             MOVS     R6,#+0
    423              emberAfPluginScenesServerRetrieveSceneEntry(entry, i);
   \                     ??emberAfScenesClusterStoreCurrentSceneCallback_3: (+1)
   \   0000001C   0x2322             MOVS     R3,#+34
   \   0000001E   0x4632             MOV      R2,R6
   \   00000020   0x211D             MOVS     R1,#+29
   \   00000022   0xA802             ADD      R0,SP,#+8
   \   00000024   0x.... 0x....      BL       halInternalGetTokenData
    424              if (entry.endpoint == endpoint
    425                  && entry.groupId == groupId
    426                  && entry.sceneId == sceneId) {
   \   00000028   0xF89D 0x0008      LDRB     R0,[SP, #+8]
   \   0000002C   0x42A0             CMP      R0,R4
   \   0000002E   0xBF01             ITTTT    EQ 
   \   00000030   0xF8BD 0x000A      LDRHEQ   R0,[SP, #+10]
   \   00000034   0x42A8             CMPEQ    R0,R5
   \   00000036   0xF89D 0x000C      LDRBEQ   R0,[SP, #+12]
   \   0000003A   0x4540             CMPEQ    R0,R8
   \   0000003C   0xD101             BNE.N    ??emberAfScenesClusterStoreCurrentSceneCallback_4
    427                index = i;
   \   0000003E   0x4637             MOV      R7,R6
    428                break;
   \   00000040   0xE009             B.N      ??emberAfScenesClusterStoreCurrentSceneCallback_5
    429              } else if (index == EMBER_AF_SCENE_TABLE_NULL_INDEX
    430                         && entry.endpoint == EMBER_AF_SCENE_TABLE_UNUSED_ENDPOINT_ID) {
   \                     ??emberAfScenesClusterStoreCurrentSceneCallback_4: (+1)
   \   00000042   0x2FFF             CMP      R7,#+255
   \   00000044   0xBF02             ITTT     EQ 
   \   00000046   0xF89D 0x0008      LDRBEQ   R0,[SP, #+8]
   \   0000004A   0x2800             CMPEQ    R0,#+0
   \   0000004C   0x4637             MOVEQ    R7,R6
    431                index = i;
    432              }
    433            }
   \   0000004E   0x1C76             ADDS     R6,R6,#+1
   \   00000050   0xB2F6             UXTB     R6,R6
   \   00000052   0x2E14             CMP      R6,#+20
   \   00000054   0xDBE2             BLT.N    ??emberAfScenesClusterStoreCurrentSceneCallback_3
    434          
    435            // If the target index is still zero, the table is full.
    436            if (index == EMBER_AF_SCENE_TABLE_NULL_INDEX) {
   \                     ??emberAfScenesClusterStoreCurrentSceneCallback_5: (+1)
   \   00000056   0x2FFF             CMP      R7,#+255
   \   00000058   0xBF08             IT       EQ 
   \   0000005A   0x2089             MOVEQ    R0,#+137
    437              return EMBER_ZCL_STATUS_INSUFFICIENT_SPACE;
   \   0000005C   0xD0DC             BEQ.N    ??emberAfScenesClusterStoreCurrentSceneCallback_1
    438            }
    439          
    440            emberAfPluginScenesServerRetrieveSceneEntry(entry, index);
   \   0000005E   0x2322             MOVS     R3,#+34
   \   00000060   0x463A             MOV      R2,R7
   \   00000062   0x211D             MOVS     R1,#+29
   \   00000064   0xA802             ADD      R0,SP,#+8
   \   00000066   0x.... 0x....      BL       halInternalGetTokenData
    441          
    442            // When creating a new entry or refreshing an existing one, the extension
    443            // fields are updated with the current state of other clusters on the device.
    444          #ifdef ZCL_USING_ON_OFF_CLUSTER_SERVER
    445            entry.hasOnOffValue = readServerAttribute(endpoint,
    446                                                      ZCL_ON_OFF_CLUSTER_ID,
    447                                                      ZCL_ON_OFF_ATTRIBUTE_ID,
    448                                                      "on/off",
    449                                                      (int8u *)&entry.onOffValue,
    450                                                      sizeof(entry.onOffValue));
   \   0000006A   0x2001             MOVS     R0,#+1
   \   0000006C   0x9001             STR      R0,[SP, #+4]
   \   0000006E   0xF10D 0x0012      ADD      R0,SP,#+18
   \   00000072   0x9000             STR      R0,[SP, #+0]
   \   00000074   0x2200             MOVS     R2,#+0
   \   00000076   0x.... 0x....      ADR.W    R3,?_16
   \   0000007A   0x2106             MOVS     R1,#+6
   \   0000007C   0x.... 0x....      BL       ??Subroutine2_0
   \                     ??CrossCallReturnLabel_1: (+1)
   \   00000080   0xF88D 0x0011      STRB     R0,[SP, #+17]
    451          #endif
    452          #ifdef ZCL_USING_LEVEL_CONTROL_CLUSTER_SERVER
    453            entry.hasCurrentLevelValue = readServerAttribute(endpoint,
    454                                                             ZCL_LEVEL_CONTROL_CLUSTER_ID,
    455                                                             ZCL_CURRENT_LEVEL_ATTRIBUTE_ID,
    456                                                             "current level",
    457                                                             (int8u *)&entry.currentLevelValue,
    458                                                             sizeof(entry.currentLevelValue));
   \   00000084   0x2001             MOVS     R0,#+1
   \   00000086   0x9001             STR      R0,[SP, #+4]
   \   00000088   0xA805             ADD      R0,SP,#+20
   \   0000008A   0x9000             STR      R0,[SP, #+0]
   \   0000008C   0x2200             MOVS     R2,#+0
   \   0000008E   0x.... 0x....      ADR.W    R3,?_17
   \   00000092   0x2108             MOVS     R1,#+8
   \   00000094   0x.... 0x....      BL       ??Subroutine2_0
   \                     ??CrossCallReturnLabel_0: (+1)
   \   00000098   0xF88D 0x0013      STRB     R0,[SP, #+19]
    459          #endif
    460          #ifdef ZCL_USING_THERMOSTAT_CLUSTER_SERVER
    461            entry.hasOccupiedCoolingSetpointValue = readServerAttribute(endpoint,
    462                                                                        ZCL_THERMOSTAT_CLUSTER_ID,
    463                                                                        ZCL_OCCUPIED_COOLING_SETPOINT_ATTRIBUTE_ID,
    464                                                                        "occupied cooling setpoint",
    465                                                                        (int8u *)&entry.occupiedCoolingSetpointValue,
    466                                                                        sizeof(entry.occupiedCoolingSetpointValue));
    467            entry.hasOccupiedHeatingSetpointValue = readServerAttribute(endpoint,
    468                                                                        ZCL_THERMOSTAT_CLUSTER_ID,
    469                                                                        ZCL_OCCUPIED_HEATING_SETPOINT_ATTRIBUTE_ID,
    470                                                                        "occupied heating setpoint",
    471                                                                        (int8u *)&entry.occupiedHeatingSetpointValue,
    472                                                                        sizeof(entry.occupiedHeatingSetpointValue));
    473            entry.hasSystemModeValue = readServerAttribute(endpoint,
    474                                                           ZCL_THERMOSTAT_CLUSTER_ID,
    475                                                           ZCL_SYSTEM_MODE_ATTRIBUTE_ID,
    476                                                           "system mode",
    477                                                           (int8u *)&entry.systemModeValue,
    478                                                           sizeof(entry.systemModeValue));
    479          #endif
    480          #ifdef ZCL_USING_COLOR_CONTROL_CLUSTER_SERVER
    481            entry.hasCurrentXValue = readServerAttribute(endpoint,
    482                                                         ZCL_COLOR_CONTROL_CLUSTER_ID,
    483                                                         ZCL_COLOR_CONTROL_CURRENT_X_ATTRIBUTE_ID,
    484                                                         "current x",
    485                                                         (int8u *)&entry.currentXValue,
    486                                                         sizeof(entry.currentXValue));
   \   0000009C   0x2002             MOVS     R0,#+2
   \   0000009E   0x9001             STR      R0,[SP, #+4]
   \   000000A0   0xF10D 0x0016      ADD      R0,SP,#+22
   \   000000A4   0x9000             STR      R0,[SP, #+0]
   \   000000A6   0x2203             MOVS     R2,#+3
   \   000000A8   0x.... 0x....      ADR.W    R3,?_18
   \   000000AC   0x.... 0x....      BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_8: (+1)
   \   000000B0   0xF88D 0x0015      STRB     R0,[SP, #+21]
    487            entry.hasCurrentYValue = readServerAttribute(endpoint,
    488                                                         ZCL_COLOR_CONTROL_CLUSTER_ID,
    489                                                         ZCL_COLOR_CONTROL_CURRENT_Y_ATTRIBUTE_ID,
    490                                                         "current y",
    491                                                         (int8u *)&entry.currentYValue,
    492                                                         sizeof(entry.currentYValue));
   \   000000B4   0x2002             MOVS     R0,#+2
   \   000000B6   0x9001             STR      R0,[SP, #+4]
   \   000000B8   0xF10D 0x001A      ADD      R0,SP,#+26
   \   000000BC   0x9000             STR      R0,[SP, #+0]
   \   000000BE   0x2204             MOVS     R2,#+4
   \   000000C0   0x.... 0x....      ADR.W    R3,?_19
   \   000000C4   0x.... 0x....      BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_7: (+1)
   \   000000C8   0xF88D 0x0018      STRB     R0,[SP, #+24]
    493            if (emberIsZllNetwork()) {
   \   000000CC   0x.... 0x....      BL       emberIsZllNetwork
   \   000000D0   0x2800             CMP      R0,#+0
   \   000000D2   0xD032             BEQ.N    ??emberAfScenesClusterStoreCurrentSceneCallback_6
    494              entry.hasEnhancedCurrentHueValue = readServerAttribute(endpoint,
    495                                                                     ZCL_COLOR_CONTROL_CLUSTER_ID,
    496                                                                     ZCL_COLOR_CONTROL_ENHANCED_CURRENT_HUE_ATTRIBUTE_ID,
    497                                                                     "enhanced current hue",
    498                                                                     (int8u *)&entry.enhancedCurrentHueValue,
    499                                                                     sizeof(entry.enhancedCurrentHueValue));
   \   000000D4   0x2002             MOVS     R0,#+2
   \   000000D6   0x9001             STR      R0,[SP, #+4]
   \   000000D8   0xF10D 0x001E      ADD      R0,SP,#+30
   \   000000DC   0x.... 0x....      BL       ?Subroutine4
   \                     ??CrossCallReturnLabel_17: (+1)
   \   000000E0   0x.... 0x....      BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_6: (+1)
   \   000000E4   0xF88D 0x001C      STRB     R0,[SP, #+28]
    500              entry.hasCurrentSaturationValue = readServerAttribute(endpoint,
    501                                                                    ZCL_COLOR_CONTROL_CLUSTER_ID,
    502                                                                    ZCL_COLOR_CONTROL_CURRENT_SATURATION_ATTRIBUTE_ID,
    503                                                                    "current saturation",
    504                                                                    (int8u *)&entry.currentSaturationValue,
    505                                                                    sizeof(entry.currentSaturationValue));
   \   000000E8   0x2001             MOVS     R0,#+1
   \   000000EA   0x9001             STR      R0,[SP, #+4]
   \   000000EC   0xF10D 0x0021      ADD      R0,SP,#+33
   \   000000F0   0x9000             STR      R0,[SP, #+0]
   \   000000F2   0x2201             MOVS     R2,#+1
   \   000000F4   0x.... 0x....      ADR.W    R3,?_21
   \   000000F8   0x.... 0x....      BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_5: (+1)
   \   000000FC   0xF88D 0x0020      STRB     R0,[SP, #+32]
    506              entry.hasColorLoopActiveValue = readServerAttribute(endpoint,
    507                                                                  ZCL_COLOR_CONTROL_CLUSTER_ID,
    508                                                                  ZCL_COLOR_CONTROL_COLOR_LOOP_ACTIVE_ATTRIBUTE_ID,
    509                                                                  "color loop active",
    510                                                                  (int8u *)&entry.colorLoopActiveValue,
    511                                                                  sizeof(entry.colorLoopActiveValue));
   \   00000100   0x2001             MOVS     R0,#+1
   \   00000102   0x9001             STR      R0,[SP, #+4]
   \   00000104   0xF10D 0x0023      ADD      R0,SP,#+35
   \   00000108   0x.... 0x....      BL       ?Subroutine5
   \                     ??CrossCallReturnLabel_19: (+1)
   \   0000010C   0x.... 0x....      BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_4: (+1)
   \   00000110   0xF88D 0x0022      STRB     R0,[SP, #+34]
    512              entry.hasColorLoopDirectionValue = readServerAttribute(endpoint,
    513                                                                     ZCL_COLOR_CONTROL_CLUSTER_ID,
    514                                                                     ZCL_COLOR_CONTROL_COLOR_LOOP_DIRECTION_ATTRIBUTE_ID,
    515                                                                     "color loop direction",
    516                                                                     (int8u *)&entry.colorLoopDirectionValue,
    517                                                                     sizeof(entry.colorLoopDirectionValue));
   \   00000114   0x2001             MOVS     R0,#+1
   \   00000116   0x9001             STR      R0,[SP, #+4]
   \   00000118   0xF10D 0x0025      ADD      R0,SP,#+37
   \   0000011C   0x.... 0x....      BL       ?Subroutine6
   \                     ??CrossCallReturnLabel_21: (+1)
   \   00000120   0x.... 0x....      BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_3: (+1)
   \   00000124   0xF88D 0x0024      STRB     R0,[SP, #+36]
    518              entry.hasColorLoopTimeValue = readServerAttribute(endpoint,
    519                                                                ZCL_COLOR_CONTROL_CLUSTER_ID,
    520                                                                ZCL_COLOR_CONTROL_COLOR_LOOP_TIME_ATTRIBUTE_ID,
    521                                                                "color loop time",
    522                                                                (int8u *)&entry.colorLoopTimeValue,
    523                                                                sizeof(entry.colorLoopTimeValue));
   \   00000128   0x2002             MOVS     R0,#+2
   \   0000012A   0x9001             STR      R0,[SP, #+4]
   \   0000012C   0xA80A             ADD      R0,SP,#+40
   \   0000012E   0x.... 0x....      BL       ?Subroutine7
    524          
    525            }
   \                     ??CrossCallReturnLabel_23: (+1)
   \   00000132   0x.... 0x....      BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_2: (+1)
   \   00000136   0xF88D 0x0026      STRB     R0,[SP, #+38]
    526          #endif //ZCL_USING_COLOR_CONTROL_CLUSTER_SERVER
    527          #ifdef ZCL_USING_DOOR_LOCK_CLUSTER_SERVER
    528            entry.hasLockStateValue = readServerAttribute(endpoint,
    529                                                          ZCL_DOOR_LOCK_CLUSTER_ID,
    530                                                          ZCL_LOCK_STATE_ATTRIBUTE_ID,
    531                                                          "lock state",
    532                                                          (int8u *)&entry.lockStateValue,
    533                                                          sizeof(entry.lockStateValue));
    534          #endif
    535          #ifdef ZCL_USING_WINDOW_COVERING_CLUSTER_SERVER
    536            entry.hasCurrentPositionLiftPercentageValue = readServerAttribute(endpoint,
    537                                                                              ZCL_WINDOW_COVERING_CLUSTER_ID,
    538                                                                              ZCL_CURRENT_LIFT_PERCENTAGE_ATTRIBUTE_ID,
    539                                                                              "current position lift percentage",
    540                                                                              (int8u *)&entry.currentPositionLiftPercentageValue,
    541                                                                              sizeof(entry.currentPositionLiftPercentageValue));
    542            entry.hasCurrentPositionTiltPercentageValue = readServerAttribute(endpoint,
    543                                                                              ZCL_WINDOW_COVERING_CLUSTER_ID,
    544                                                                              ZCL_CURRENT_TILT_PERCENTAGE_ATTRIBUTE_ID,
    545                                                                              "current position tilt percentage",
    546                                                                              (int8u *)&entry.currentPositionTiltPercentageValue,
    547                                                                              sizeof(entry.currentPositionTiltPercentageValue));
    548          #endif
    549          
    550            // When creating a new entry, the name is set to the null string (i.e., the
    551            // length is set to zero) and the transition time is set to zero.  The scene
    552            // count must be increased and written to the attribute table when adding a
    553            // new scene.  Otherwise, these fields and the count are left alone.
    554            if (i != index) {
   \                     ??emberAfScenesClusterStoreCurrentSceneCallback_6: (+1)
   \   0000013A   0x42BE             CMP      R6,R7
   \   0000013C   0xD023             BEQ.N    ??emberAfScenesClusterStoreCurrentSceneCallback_7
    555              entry.endpoint = endpoint;
    556              entry.groupId = groupId;
    557              entry.sceneId = sceneId;
    558          #ifdef EMBER_AF_PLUGIN_SCENES_NAME_SUPPORT
    559              entry.name[0] = 0;
    560          #endif
    561              entry.transitionTime = 0;
   \   0000013E   0x2000             MOVS     R0,#+0
   \   00000140   0xF8AD 0x000E      STRH     R0,[SP, #+14]
   \   00000144   0xF88D 0x4008      STRB     R4,[SP, #+8]
   \   00000148   0xF8AD 0x500A      STRH     R5,[SP, #+10]
   \   0000014C   0xF88D 0x800C      STRB     R8,[SP, #+12]
    562              if (emberIsZllNetwork()) {
   \   00000150   0x.... 0x....      BL       emberIsZllNetwork
   \   00000154   0xB110             CBZ.N    R0,??emberAfScenesClusterStoreCurrentSceneCallback_8
    563                entry.transitionTime100ms = 0;
   \   00000156   0x2000             MOVS     R0,#+0
   \   00000158   0xF88D 0x0010      STRB     R0,[SP, #+16]
    564              }
    565              emberAfPluginScenesServerIncrNumSceneEntriesInUse();
   \                     ??emberAfScenesClusterStoreCurrentSceneCallback_8: (+1)
   \   0000015C   0x2301             MOVS     R3,#+1
   \   0000015E   0x.... 0x....      LDR.W    R6,??DataTable37
   \   00000162   0x.... 0x....      BL       ?Subroutine12
   \                     ??CrossCallReturnLabel_38: (+1)
   \   00000166   0x7830             LDRB     R0,[R6, #+0]
   \   00000168   0x1C40             ADDS     R0,R0,#+1
   \   0000016A   0x7030             STRB     R0,[R6, #+0]
   \   0000016C   0x2301             MOVS     R3,#+1
   \   0000016E   0x4632             MOV      R2,R6
   \   00000170   0x217F             MOVS     R1,#+127
   \   00000172   0x201C             MOVS     R0,#+28
   \   00000174   0x.... 0x....      BL       halInternalSetTokenData
    566              emberAfScenesSetSceneCountAttribute(endpoint,
    567                                                  emberAfPluginScenesServerNumSceneEntriesInUse());
   \   00000178   0x2301             MOVS     R3,#+1
   \   0000017A   0x.... 0x....      BL       ?Subroutine12
    568            }
   \                     ??CrossCallReturnLabel_37: (+1)
   \   0000017E   0x7831             LDRB     R1,[R6, #+0]
   \   00000180   0x4620             MOV      R0,R4
   \   00000182   0x.... 0x....      BL       emberAfScenesSetSceneCountAttribute
    569          
    570            // Save the scene entry and mark is as valid by storing its scene and group
    571            // ids in the attribute table and setting valid to true.
    572            emberAfPluginScenesServerSaveSceneEntry(entry, index);
   \                     ??emberAfScenesClusterStoreCurrentSceneCallback_7: (+1)
   \   00000186   0x2322             MOVS     R3,#+34
   \   00000188   0xAA02             ADD      R2,SP,#+8
   \   0000018A   0x4639             MOV      R1,R7
   \   0000018C   0x.... 0x....      BL       ?Subroutine22
    573            emberAfScenesMakeValid(endpoint, sceneId, groupId);
   \                     ??CrossCallReturnLabel_72: (+1)
   \   00000190   0x462A             MOV      R2,R5
   \   00000192   0x4641             MOV      R1,R8
   \   00000194   0x4620             MOV      R0,R4
   \   00000196   0x.... 0x....      BL       emberAfScenesMakeValid
    574            return EMBER_ZCL_STATUS_SUCCESS;
   \   0000019A   0x2000             MOVS     R0,#+0
   \                     ??emberAfScenesClusterStoreCurrentSceneCallback_2: (+1)
   \   0000019C   0xB00C             ADD      SP,SP,#+48
   \   0000019E   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    575          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine12: (+1)
   \   00000000   0x227F             MOVS     R2,#+127
   \   00000002   0x211C             MOVS     R1,#+28
   \   00000004   0x4630             MOV      R0,R6
   \   00000006   0x.... 0x....      B.W      halInternalGetTokenData

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2: (+1)
   \   00000000   0xF44F 0x7140      MOV      R1,#+768
   \                     ??Subroutine2_0: (+1)
   \   00000004   0x4620             MOV      R0,R4
   \   00000006   0x....             B.N      readServerAttribute

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine7: (+1)
   \   00000000   0x9000             STR      R0,[SP, #+0]
   \   00000002   0xF244 0x0204      MOVW     R2,#+16388
   \   00000006   0x.... 0x....      ADR.W    R3,?_24
   \   0000000A   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine6: (+1)
   \   00000000   0x9000             STR      R0,[SP, #+0]
   \   00000002   0xF244 0x0203      MOVW     R2,#+16387
   \   00000006   0x.... 0x....      ADR.W    R3,?_23
   \   0000000A   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine5: (+1)
   \   00000000   0x9000             STR      R0,[SP, #+0]
   \   00000002   0xF244 0x0202      MOVW     R2,#+16386
   \   00000006   0x.... 0x....      ADR.W    R3,?_22
   \   0000000A   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine4: (+1)
   \   00000000   0x9000             STR      R0,[SP, #+0]
   \   00000002   0xF44F 0x4280      MOV      R2,#+16384
   \   00000006   0x.... 0x....      ADR.W    R3,?_20
   \   0000000A   0x4770             BX       LR
    576          
    577          //MN Added from Gary's sample code

   \                                 In section .text, align 2, keep-with-next
    578          EmberAfStatus emberAfScenesClusterRecallSavedSceneCallback(int8u endpoint,
    579                                                                     int16u groupId,
    580                                                                     int8u sceneId)
    581          { 
   \                     emberAfScenesClusterRecallSavedSceneCallback: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0x000D             MOVS     R5,R1
   \   00000004   0xB08D             SUB      SP,SP,#+52
   \   00000006   0x4604             MOV      R4,R0
   \   00000008   0x4616             MOV      R6,R2
    582            if (groupId != ZCL_SCENES_GLOBAL_SCENE_GROUP_ID
    583                && !emberAfGroupsClusterEndpointInGroupCallback(endpoint, groupId)) 
   \   0000000A   0xD004             BEQ.N    ??emberAfScenesClusterRecallSavedSceneCallback_0
   \   0000000C   0x.... 0x....      BL       emberAfGroupsClusterEndpointInGroupCallback
   \   00000010   0xB908             CBNZ.N   R0,??emberAfScenesClusterRecallSavedSceneCallback_0
    584            {
    585              return EMBER_ZCL_STATUS_INVALID_FIELD;
   \   00000012   0x2085             MOVS     R0,#+133
   \   00000014   0xE0A7             B.N      ??emberAfScenesClusterRecallSavedSceneCallback_1
    586            }     
    587            else 
    588            {
    589              int8u i;
    590              for (i = 0; i < EMBER_AF_PLUGIN_SCENES_TABLE_SIZE; i++) 
   \                     ??emberAfScenesClusterRecallSavedSceneCallback_0: (+1)
   \   00000016   0x2700             MOVS     R7,#+0
    591              {
    592                EmberAfSceneTableEntry entry;
    593                emberAfPluginScenesServerRetrieveSceneEntry(entry, i);
   \                     ??emberAfScenesClusterRecallSavedSceneCallback_2: (+1)
   \   00000018   0x2322             MOVS     R3,#+34
   \   0000001A   0x463A             MOV      R2,R7
   \   0000001C   0x211D             MOVS     R1,#+29
   \   0000001E   0xA804             ADD      R0,SP,#+16
   \   00000020   0x.... 0x....      BL       halInternalGetTokenData
    594                if (entry.endpoint == endpoint
    595                    && entry.groupId == groupId
    596                    && entry.sceneId == sceneId) 
   \   00000024   0xF89D 0x0010      LDRB     R0,[SP, #+16]
   \   00000028   0x42A0             CMP      R0,R4
   \   0000002A   0xBF01             ITTTT    EQ 
   \   0000002C   0xF8BD 0x0012      LDRHEQ   R0,[SP, #+18]
   \   00000030   0x42A8             CMPEQ    R0,R5
   \   00000032   0xF89D 0x0014      LDRBEQ   R0,[SP, #+20]
   \   00000036   0x42B0             CMPEQ    R0,R6
   \   00000038   0xF040 0x808F      BNE.W    ??emberAfScenesClusterRecallSavedSceneCallback_3
    597                {
    598                  if (entry.hasCurrentLevelValue) 
   \   0000003C   0xF89D 0x001B      LDRB     R0,[SP, #+27]
   \   00000040   0xB140             CBZ.N    R0,??emberAfScenesClusterRecallSavedSceneCallback_4
    599                  {           
    600                    #ifdef ZCL_USING_LEVEL_CONTROL_CLUSTER_SERVER
    601          
    602                    //GB Change Lamp level by simulating an incoming MoveToLevelWithOnOff command.
    603                    emAfPluginLevelControlClusterOnOffEffectHandler(
                           ^
Warning[Pe223]: function "emAfPluginLevelControlClusterOnOffEffectHandler"
          declared implicitly
    604                                          ZCL_MOVE_TO_LEVEL_WITH_ON_OFF_COMMAND_ID,
    605                                          entry.currentLevelValue, 
    606                                          FALSE,
    607                                          entry.transitionTime);            //MN changed from emAfPluginLevelControlClusterOnOffEffect to emAfPluginLevelControlClusterOnOffEffectHandler
   \   00000042   0xF8BD 0x3016      LDRH     R3,[SP, #+22]
   \   00000046   0xF89D 0x101C      LDRB     R1,[SP, #+28]
   \   0000004A   0x2200             MOVS     R2,#+0
   \   0000004C   0x2004             MOVS     R0,#+4
   \   0000004E   0x.... 0x....      BL       emAfPluginLevelControlClusterOnOffEffectHandler
   \   00000052   0xE01D             B.N      ??emberAfScenesClusterRecallSavedSceneCallback_5
    608                    #endif
    609          
    610                  }
    611                  else 
    612                  if (entry.hasOnOffValue) 
   \                     ??emberAfScenesClusterRecallSavedSceneCallback_4: (+1)
   \   00000054   0xF89D 0x0019      LDRB     R0,[SP, #+25]
   \   00000058   0xB1D0             CBZ.N    R0,??emberAfScenesClusterRecallSavedSceneCallback_5
    613                  {
    614                    #ifdef ZCL_USING_ON_OFF_CLUSTER_SERVER          
    615                    boolean currentOnOffState = FALSE;    
   \   0000005A   0x2000             MOVS     R0,#+0
   \   0000005C   0xF88D 0x000C      STRB     R0,[SP, #+12]
    616                    //MN emberAfOnOffClusterReadOnOffState(endpoint, &currentOnOffState); // Read current on/off state.
    617                    //MN added:
    618                      // read current on/off value
    619          emberAfReadAttribute(endpoint,
    620                                          ZCL_ON_OFF_CLUSTER_ID,
    621                                          ZCL_ON_OFF_ATTRIBUTE_ID,
    622                                          CLUSTER_MASK_SERVER,
    623                                          (int8u *)&currentOnOffState,
    624                                          sizeof(currentOnOffState),
    625                                          NULL); // data type
   \   00000060   0x9002             STR      R0,[SP, #+8]
   \   00000062   0x2340             MOVS     R3,#+64
   \   00000064   0x2001             MOVS     R0,#+1
   \   00000066   0x9001             STR      R0,[SP, #+4]
   \   00000068   0x2200             MOVS     R2,#+0
   \   0000006A   0xA803             ADD      R0,SP,#+12
   \   0000006C   0x9000             STR      R0,[SP, #+0]
   \   0000006E   0x2106             MOVS     R1,#+6
   \   00000070   0x4620             MOV      R0,R4
   \   00000072   0x.... 0x....      BL       emberAfReadAttribute
    626                    
    627                    if (entry.onOffValue != currentOnOffState)
   \   00000076   0xF89D 0x001A      LDRB     R0,[SP, #+26]
   \   0000007A   0xF89D 0x100C      LDRB     R1,[SP, #+12]
   \   0000007E   0x4288             CMP      R0,R1
   \   00000080   0xD006             BEQ.N    ??emberAfScenesClusterRecallSavedSceneCallback_5
    628                    {
    629                      //GB Set Lamp on/off state as required by simulating an incoming On/Off command.      
    630                      emberAfOnOffClusterSetValueCallback(
    631                                          endpoint,
    632                                          (entry.onOffValue ? ZCL_ON_COMMAND_ID : ZCL_OFF_COMMAND_ID),
    633                                          FALSE); 
   \   00000082   0x0001             MOVS     R1,R0
   \   00000084   0xBF18             IT       NE 
   \   00000086   0x2101             MOVNE    R1,#+1
   \   00000088   0x2200             MOVS     R2,#+0
   \   0000008A   0x4620             MOV      R0,R4
   \   0000008C   0x.... 0x....      BL       emberAfOnOffClusterSetValueCallback
    634                    }
    635                    #endif          
    636                  }
    637          
    638          #ifdef ZCL_USING_COLOR_CONTROL_CLUSTER_SERVER        
    639                  if ((entry.hasCurrentXValue) 
    640                    && (entry.hasCurrentYValue)
    641                    && (entry.currentXValue != 0)
    642                    && (entry.currentYValue != 0))  {          
   \                     ??emberAfScenesClusterRecallSavedSceneCallback_5: (+1)
   \   00000090   0xF89D 0x001D      LDRB     R0,[SP, #+29]
   \   00000094   0x2800             CMP      R0,#+0
   \   00000096   0xBF1C             ITT      NE 
   \   00000098   0xF89D 0x0020      LDRBNE   R0,[SP, #+32]
   \   0000009C   0x2800             CMPNE    R0,#+0
   \   0000009E   0xD00A             BEQ.N    ??emberAfScenesClusterRecallSavedSceneCallback_6
   \   000000A0   0xF8BD 0x001E      LDRH     R0,[SP, #+30]
   \   000000A4   0x2800             CMP      R0,#+0
   \   000000A6   0xBF1F             ITTTT    NE 
   \   000000A8   0xF8BD 0x1022      LDRHNE   R1,[SP, #+34]
   \   000000AC   0x2900             CMPNE    R1,#+0
    643                    
    644                      //GB Change Lamp color by simulating an incoming MoveToColor (X/Y) command.
    645                      emberAfColorControlClusterMoveToColorCallback(entry.currentXValue, 
    646                                                         entry.currentYValue, 
    647                                                         entry.transitionTime); //MN changed to emberAfColorControlClusterMoveToColorCallback from emAfColorControlClusterMoveToColor
   \   000000AE   0xF8BD 0x2016      LDRHNE   R2,[SP, #+22]
   \   000000B2   0x.... 0x....      BLNE     emberAfColorControlClusterMoveToColorCallback
    648                  }
    649                  
    650                  // Per ZLL CCB, value of 0 for X and Y means enhanced scene attributes
    651                  // will be used
    652                  if (emberIsZllNetwork()
    653                      && entry.hasCurrentXValue
    654                      && entry.hasCurrentYValue
    655                      && (entry.currentXValue == 0)
    656                      && (entry.currentYValue == 0)){
   \                     ??emberAfScenesClusterRecallSavedSceneCallback_6: (+1)
   \   000000B6   0x.... 0x....      BL       emberIsZllNetwork
   \   000000BA   0x2800             CMP      R0,#+0
   \   000000BC   0xBF1F             ITTTT    NE 
   \   000000BE   0xF89D 0x001D      LDRBNE   R0,[SP, #+29]
   \   000000C2   0x2800             CMPNE    R0,#+0
   \   000000C4   0xF89D 0x0020      LDRBNE   R0,[SP, #+32]
   \   000000C8   0x2800             CMPNE    R0,#+0
   \   000000CA   0xD03F             BEQ.N    ??CrossCallReturnLabel_12
   \   000000CC   0xF8BD 0x001E      LDRH     R0,[SP, #+30]
   \   000000D0   0x2800             CMP      R0,#+0
   \   000000D2   0xBF04             ITT      EQ 
   \   000000D4   0xF8BD 0x0022      LDRHEQ   R0,[SP, #+34]
   \   000000D8   0x2800             CMPEQ    R0,#+0
   \   000000DA   0xD137             BNE.N    ??CrossCallReturnLabel_12
    657                      if (entry.hasEnhancedCurrentHueValue) {
   \   000000DC   0xF89D 0x0024      LDRB     R0,[SP, #+36]
   \   000000E0   0xB138             CBZ.N    R0,??CrossCallReturnLabel_16
    658                        writeServerAttribute(endpoint,
    659                            ZCL_COLOR_CONTROL_CLUSTER_ID,
    660                            ZCL_COLOR_CONTROL_ENHANCED_CURRENT_HUE_ATTRIBUTE_ID,
    661                            "enhanced current hue",
    662                            (int8u*)&entry.enhancedCurrentHueValue,
    663                            ZCL_INT16U_ATTRIBUTE_TYPE);
   \   000000E2   0x2021             MOVS     R0,#+33
   \   000000E4   0x9001             STR      R0,[SP, #+4]
   \   000000E6   0xF10D 0x0026      ADD      R0,SP,#+38
   \   000000EA   0x.... 0x....      BL       ?Subroutine4
    664                      }
   \                     ??CrossCallReturnLabel_18: (+1)
   \   000000EE   0x.... 0x....      BL       ?Subroutine3
    665                      if (entry.hasCurrentSaturationValue) {
   \                     ??CrossCallReturnLabel_16: (+1)
   \   000000F2   0xF89D 0x0028      LDRB     R0,[SP, #+40]
   \   000000F6   0xB148             CBZ.N    R0,??CrossCallReturnLabel_15
    666                        writeServerAttribute(endpoint,
    667                            ZCL_COLOR_CONTROL_CLUSTER_ID,
    668                            ZCL_COLOR_CONTROL_CURRENT_SATURATION_ATTRIBUTE_ID,
    669                            "current saturation",
    670                            (int8u*)&entry.currentSaturationValue,
    671                            ZCL_INT8U_ATTRIBUTE_TYPE);
   \   000000F8   0x2020             MOVS     R0,#+32
   \   000000FA   0x9001             STR      R0,[SP, #+4]
   \   000000FC   0xF10D 0x0029      ADD      R0,SP,#+41
   \   00000100   0x9000             STR      R0,[SP, #+0]
   \   00000102   0x2201             MOVS     R2,#+1
   \   00000104   0x.... 0x....      ADR.W    R3,?_21
   \   00000108   0x.... 0x....      BL       ?Subroutine3
    672                      }
    673                      if (entry.hasColorLoopActiveValue) {
   \                     ??CrossCallReturnLabel_15: (+1)
   \   0000010C   0xF89D 0x002A      LDRB     R0,[SP, #+42]
   \   00000110   0xB138             CBZ.N    R0,??CrossCallReturnLabel_14
    674                        writeServerAttribute(endpoint,
    675                            ZCL_COLOR_CONTROL_CLUSTER_ID,
    676                            ZCL_COLOR_CONTROL_COLOR_LOOP_ACTIVE_ATTRIBUTE_ID,
    677                            "color loop active",
    678                            (int8u *)&entry.colorLoopActiveValue,
    679                            ZCL_INT8U_ATTRIBUTE_TYPE);
   \   00000112   0x2020             MOVS     R0,#+32
   \   00000114   0x9001             STR      R0,[SP, #+4]
   \   00000116   0xF10D 0x002B      ADD      R0,SP,#+43
   \   0000011A   0x.... 0x....      BL       ?Subroutine5
    680                      }
   \                     ??CrossCallReturnLabel_20: (+1)
   \   0000011E   0x.... 0x....      BL       ?Subroutine3
    681                      if (entry.hasColorLoopDirectionValue) {
   \                     ??CrossCallReturnLabel_14: (+1)
   \   00000122   0xF89D 0x002C      LDRB     R0,[SP, #+44]
   \   00000126   0xB138             CBZ.N    R0,??CrossCallReturnLabel_13
    682                        writeServerAttribute(endpoint,
    683                            ZCL_COLOR_CONTROL_CLUSTER_ID,
    684                            ZCL_COLOR_CONTROL_COLOR_LOOP_DIRECTION_ATTRIBUTE_ID,
    685                            "color loop direction",
    686                            (int8u *)&entry.colorLoopDirectionValue,
    687                            ZCL_INT8U_ATTRIBUTE_TYPE);
   \   00000128   0x2020             MOVS     R0,#+32
   \   0000012A   0x9001             STR      R0,[SP, #+4]
   \   0000012C   0xF10D 0x002D      ADD      R0,SP,#+45
   \   00000130   0x.... 0x....      BL       ?Subroutine6
    688                      }
   \                     ??CrossCallReturnLabel_22: (+1)
   \   00000134   0x.... 0x....      BL       ?Subroutine3
    689                      if (entry.hasColorLoopTimeValue) {
   \                     ??CrossCallReturnLabel_13: (+1)
   \   00000138   0xF89D 0x002E      LDRB     R0,[SP, #+46]
   \   0000013C   0xB130             CBZ.N    R0,??CrossCallReturnLabel_12
    690                        writeServerAttribute(endpoint,
    691                            ZCL_COLOR_CONTROL_CLUSTER_ID,
    692                            ZCL_COLOR_CONTROL_COLOR_LOOP_TIME_ATTRIBUTE_ID,
    693                            "color loop time",
    694                            (int8u *)&entry.colorLoopTimeValue,
    695                            ZCL_INT16U_ATTRIBUTE_TYPE);
   \   0000013E   0x2021             MOVS     R0,#+33
   \   00000140   0x9001             STR      R0,[SP, #+4]
   \   00000142   0xA80C             ADD      R0,SP,#+48
   \   00000144   0x.... 0x....      BL       ?Subroutine7
    696                      }
    697                    }                  
   \                     ??CrossCallReturnLabel_24: (+1)
   \   00000148   0x.... 0x....      BL       ?Subroutine3
    698          #endif //ZCL_USING_COLOR_CONTROL_CLUSTER_SERVER
    699          #ifdef ZCL_USING_THERMOSTAT_CLUSTER_SERVER
    700                  if (entry.hasOccupiedCoolingSetpointValue) {
    701                    writeServerAttribute(endpoint,
    702                                         ZCL_THERMOSTAT_CLUSTER_ID,
    703                                         ZCL_OCCUPIED_COOLING_SETPOINT_ATTRIBUTE_ID,
    704                                         "occupied cooling setpoint",
    705                                         (int8u *)&entry.occupiedCoolingSetpointValue,
    706                                         ZCL_INT16S_ATTRIBUTE_TYPE);
    707                  }
    708                  if (entry.hasOccupiedHeatingSetpointValue) {
    709                    writeServerAttribute(endpoint,
    710                                         ZCL_THERMOSTAT_CLUSTER_ID,
    711                                         ZCL_OCCUPIED_HEATING_SETPOINT_ATTRIBUTE_ID,
    712                                         "occupied heating setpoint",
    713                                         (int8u *)&entry.occupiedHeatingSetpointValue,
    714                                         ZCL_INT16S_ATTRIBUTE_TYPE);
    715                  }
    716                  if (entry.hasSystemModeValue) {
    717                    writeServerAttribute(endpoint,
    718                                         ZCL_THERMOSTAT_CLUSTER_ID,
    719                                         ZCL_SYSTEM_MODE_ATTRIBUTE_ID,
    720                                         "system mode",
    721                                         (int8u *)&entry.systemModeValue,
    722                                         ZCL_INT8U_ATTRIBUTE_TYPE);
    723                  }
    724          #endif
    725          #ifdef ZCL_USING_DOOR_LOCK_CLUSTER_SERVER
    726                  if (entry.hasLockStateValue) {
    727                    writeServerAttribute(endpoint,
    728                                         ZCL_DOOR_LOCK_CLUSTER_ID,
    729                                         ZCL_LOCK_STATE_ATTRIBUTE_ID,
    730                                         "lock state",
    731                                         (int8u *)&entry.lockStateValue,
    732                                         ZCL_INT8U_ATTRIBUTE_TYPE);
    733                  }
    734          #endif
    735          #ifdef ZCL_USING_WINDOW_COVERING_CLUSTER_SERVER
    736                  if (entry.hasCurrentPositionLiftPercentageValue) {
    737                    writeServerAttribute(endpoint,
    738                                         ZCL_WINDOW_COVERING_CLUSTER_ID,
    739                                         ZCL_CURRENT_LIFT_PERCENTAGE_ATTRIBUTE_ID,
    740                                         "current position lift percentage",
    741                                         (int8u *)&entry.currentPositionLiftPercentageValue,
    742                                         ZCL_INT8U_ATTRIBUTE_TYPE);
    743                  }
    744                  if (entry.hasCurrentPositionTiltPercentageValue) {
    745                    writeServerAttribute(endpoint,
    746                                         ZCL_WINDOW_COVERING_CLUSTER_ID,
    747                                         ZCL_CURRENT_TILT_PERCENTAGE_ATTRIBUTE_ID,
    748                                         "current position tilt percentage",
    749                                         (int8u *)&entry.currentPositionTiltPercentageValue,
    750                                         ZCL_INT8U_ATTRIBUTE_TYPE);
    751                  }
    752          #endif
    753                  emberAfScenesMakeValid(endpoint, sceneId, groupId);
   \                     ??CrossCallReturnLabel_12: (+1)
   \   0000014C   0x462A             MOV      R2,R5
   \   0000014E   0x4631             MOV      R1,R6
   \   00000150   0x4620             MOV      R0,R4
   \   00000152   0x.... 0x....      BL       emberAfScenesMakeValid
    754                  return EMBER_ZCL_STATUS_SUCCESS;
   \   00000156   0x2000             MOVS     R0,#+0
   \   00000158   0xE005             B.N      ??emberAfScenesClusterRecallSavedSceneCallback_1
    755                }
    756              }
   \                     ??emberAfScenesClusterRecallSavedSceneCallback_3: (+1)
   \   0000015A   0x1C7F             ADDS     R7,R7,#+1
   \   0000015C   0xB2FF             UXTB     R7,R7
   \   0000015E   0x2F14             CMP      R7,#+20
   \   00000160   0xF6FF 0xAF5A      BLT.W    ??emberAfScenesClusterRecallSavedSceneCallback_2
    757            }
    758          
    759            return EMBER_ZCL_STATUS_NOT_FOUND;
   \   00000164   0x208B             MOVS     R0,#+139
   \                     ??emberAfScenesClusterRecallSavedSceneCallback_1: (+1)
   \   00000166   0xB00D             ADD      SP,SP,#+52
   \   00000168   0xBDF0             POP      {R4-R7,PC}       ;; return
    760          }
    761          
    762          // Original emberAfScenesClusterRecallSavedSceneCallback function
    763          /*
    764          
    765          EmberAfStatus emberAfScenesClusterRecallSavedSceneCallback(int8u endpoint,
    766                                                                     int16u groupId,
    767                                                                     int8u sceneId)
    768          {
    769            if (groupId != ZCL_SCENES_GLOBAL_SCENE_GROUP_ID
    770                && !emberAfGroupsClusterEndpointInGroupCallback(endpoint, groupId)) {
    771              return EMBER_ZCL_STATUS_INVALID_FIELD;
    772            } else {
    773              int8u i;
    774              for (i = 0; i < EMBER_AF_PLUGIN_SCENES_TABLE_SIZE; i++) {
    775                EmberAfSceneTableEntry entry;
    776                emberAfPluginScenesServerRetrieveSceneEntry(entry, i);
    777                if (entry.endpoint == endpoint
    778                    && entry.groupId == groupId
    779                    && entry.sceneId == sceneId) {
    780          #ifdef ZCL_USING_ON_OFF_CLUSTER_SERVER
    781                  if (entry.hasOnOffValue) {
    782                    writeServerAttribute(endpoint,
    783                                         ZCL_ON_OFF_CLUSTER_ID,
    784                                         ZCL_ON_OFF_ATTRIBUTE_ID,
    785                                         "on/off",
    786                                         (int8u *)&entry.onOffValue,
    787                                         ZCL_BOOLEAN_ATTRIBUTE_TYPE);
    788                  }
    789          #endif
    790          #ifdef ZCL_USING_LEVEL_CONTROL_CLUSTER_SERVER
    791                  if (entry.hasCurrentLevelValue) {
    792                    writeServerAttribute(endpoint,
    793                                         ZCL_LEVEL_CONTROL_CLUSTER_ID,
    794                                         ZCL_CURRENT_LEVEL_ATTRIBUTE_ID,
    795                                         "current level",
    796                                         (int8u *)&entry.currentLevelValue,
    797                                         ZCL_INT8U_ATTRIBUTE_TYPE);
    798                  }
    799          #endif
    800          #ifdef ZCL_USING_THERMOSTAT_CLUSTER_SERVER
    801                  if (entry.hasOccupiedCoolingSetpointValue) {
    802                    writeServerAttribute(endpoint,
    803                                         ZCL_THERMOSTAT_CLUSTER_ID,
    804                                         ZCL_OCCUPIED_COOLING_SETPOINT_ATTRIBUTE_ID,
    805                                         "occupied cooling setpoint",
    806                                         (int8u *)&entry.occupiedCoolingSetpointValue,
    807                                         ZCL_INT16S_ATTRIBUTE_TYPE);
    808                  }
    809                  if (entry.hasOccupiedHeatingSetpointValue) {
    810                    writeServerAttribute(endpoint,
    811                                         ZCL_THERMOSTAT_CLUSTER_ID,
    812                                         ZCL_OCCUPIED_HEATING_SETPOINT_ATTRIBUTE_ID,
    813                                         "occupied heating setpoint",
    814                                         (int8u *)&entry.occupiedHeatingSetpointValue,
    815                                         ZCL_INT16S_ATTRIBUTE_TYPE);
    816                  }
    817                  if (entry.hasSystemModeValue) {
    818                    writeServerAttribute(endpoint,
    819                                         ZCL_THERMOSTAT_CLUSTER_ID,
    820                                         ZCL_SYSTEM_MODE_ATTRIBUTE_ID,
    821                                         "system mode",
    822                                         (int8u *)&entry.systemModeValue,
    823                                         ZCL_INT8U_ATTRIBUTE_TYPE);
    824                  }
    825          #endif
    826          #ifdef ZCL_USING_COLOR_CONTROL_CLUSTER_SERVER
    827                  if (entry.hasCurrentXValue) {
    828                    writeServerAttribute(endpoint,
    829                        ZCL_COLOR_CONTROL_CLUSTER_ID,
    830                        ZCL_COLOR_CONTROL_CURRENT_X_ATTRIBUTE_ID,
    831                        "current x",
    832                        (int8u *)&entry.currentXValue,
    833                        ZCL_INT16U_ATTRIBUTE_TYPE);
    834                  }
    835                  if (entry.hasCurrentYValue) {
    836                    writeServerAttribute(endpoint,
    837                        ZCL_COLOR_CONTROL_CLUSTER_ID,
    838                        ZCL_COLOR_CONTROL_CURRENT_Y_ATTRIBUTE_ID,
    839                        "current y",
    840                        (int8u *)&entry.currentYValue,
    841                        ZCL_INT16U_ATTRIBUTE_TYPE);
    842                  }
    843                  
    844                  // Per ZLL CCB, value of 0 for X and Y means enhanced scene attributes
    845                  // will be used
    846                  if (emberIsZllNetwork()
    847                      && entry.hasCurrentXValue
    848                      && entry.hasCurrentYValue
    849                      && (entry.currentXValue == 0)
    850                      && (entry.currentYValue == 0)){
    851                      if (entry.hasEnhancedCurrentHueValue) {
    852                        writeServerAttribute(endpoint,
    853                            ZCL_COLOR_CONTROL_CLUSTER_ID,
    854                            ZCL_COLOR_CONTROL_ENHANCED_CURRENT_HUE_ATTRIBUTE_ID,
    855                            "enhanced current hue",
    856                            (int8u *)&entry.enhancedCurrentHueValue,
    857                            ZCL_INT16U_ATTRIBUTE_TYPE);
    858                      }
    859                      if (entry.hasCurrentSaturationValue) {
    860                        writeServerAttribute(endpoint,
    861                            ZCL_COLOR_CONTROL_CLUSTER_ID,
    862                            ZCL_COLOR_CONTROL_CURRENT_SATURATION_ATTRIBUTE_ID,
    863                            "current saturation",
    864                            (int8u *)&entry.currentSaturationValue,
    865                            ZCL_INT8U_ATTRIBUTE_TYPE);
    866                      }
    867                      if (entry.hasColorLoopActiveValue) {
    868                        writeServerAttribute(endpoint,
    869                            ZCL_COLOR_CONTROL_CLUSTER_ID,
    870                            ZCL_COLOR_CONTROL_COLOR_LOOP_ACTIVE_ATTRIBUTE_ID,
    871                            "color loop active",
    872                            (int8u *)&entry.colorLoopActiveValue,
    873                            ZCL_INT8U_ATTRIBUTE_TYPE);
    874                      }
    875                      if (entry.hasColorLoopDirectionValue) {
    876                        writeServerAttribute(endpoint,
    877                            ZCL_COLOR_CONTROL_CLUSTER_ID,
    878                            ZCL_COLOR_CONTROL_COLOR_LOOP_DIRECTION_ATTRIBUTE_ID,
    879                            "color loop direction",
    880                            (int8u *)&entry.colorLoopDirectionValue,
    881                            ZCL_INT8U_ATTRIBUTE_TYPE);
    882                      }
    883                      if (entry.hasColorLoopTimeValue) {
    884                        writeServerAttribute(endpoint,
    885                            ZCL_COLOR_CONTROL_CLUSTER_ID,
    886                            ZCL_COLOR_CONTROL_COLOR_LOOP_TIME_ATTRIBUTE_ID,
    887                            "color loop time",
    888                            (int8u *)&entry.colorLoopTimeValue,
    889                            ZCL_INT16U_ATTRIBUTE_TYPE);
    890                      }
    891                    }
    892          #endif //ZCL_USING_COLOR_CONTROL_CLUSTER_SERVER
    893          #ifdef ZCL_USING_DOOR_LOCK_CLUSTER_SERVER
    894                  if (entry.hasLockStateValue) {
    895                    writeServerAttribute(endpoint,
    896                                         ZCL_DOOR_LOCK_CLUSTER_ID,
    897                                         ZCL_LOCK_STATE_ATTRIBUTE_ID,
    898                                         "lock state",
    899                                         (int8u *)&entry.lockStateValue,
    900                                         ZCL_INT8U_ATTRIBUTE_TYPE);
    901                  }
    902          #endif
    903          #ifdef ZCL_USING_WINDOW_COVERING_CLUSTER_SERVER
    904                  if (entry.hasCurrentPositionLiftPercentageValue) {
    905                    writeServerAttribute(endpoint,
    906                                         ZCL_WINDOW_COVERING_CLUSTER_ID,
    907                                         ZCL_CURRENT_LIFT_PERCENTAGE_ATTRIBUTE_ID,
    908                                         "current position lift percentage",
    909                                         (int8u *)&entry.currentPositionLiftPercentageValue,
    910                                         ZCL_INT8U_ATTRIBUTE_TYPE);
    911                  }
    912                  if (entry.hasCurrentPositionTiltPercentageValue) {
    913                    writeServerAttribute(endpoint,
    914                                         ZCL_WINDOW_COVERING_CLUSTER_ID,
    915                                         ZCL_CURRENT_TILT_PERCENTAGE_ATTRIBUTE_ID,
    916                                         "current position tilt percentage",
    917                                         (int8u *)&entry.currentPositionTiltPercentageValue,
    918                                         ZCL_INT8U_ATTRIBUTE_TYPE);
    919                  }
    920          #endif
    921                  emberAfScenesMakeValid(endpoint, sceneId, groupId);
    922                  return EMBER_ZCL_STATUS_SUCCESS;
    923                }
    924              }
    925            }
    926          
    927            return EMBER_ZCL_STATUS_NOT_FOUND;
    928          }
    929          
    930          */
    931          

   \                                 In section .text, align 2, keep-with-next
    932          void emberAfScenesClusterClearSceneTableCallback(int8u endpoint)
    933          {
   \                     emberAfScenesClusterClearSceneTableCallback: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB08A             SUB      SP,SP,#+40
   \   00000004   0x4606             MOV      R6,R0
    934            int8u i, networkIndex = emberGetCurrentNetwork();
   \   00000006   0x.... 0x....      BL       emberGetCurrentNetwork
   \   0000000A   0x4604             MOV      R4,R0
    935            for (i = 0; i < EMBER_AF_PLUGIN_SCENES_TABLE_SIZE; i++) {
   \   0000000C   0x2500             MOVS     R5,#+0
    936              EmberAfSceneTableEntry entry;
    937              emberAfPluginScenesServerRetrieveSceneEntry(entry, i);
   \                     ??emberAfScenesClusterClearSceneTableCallback_0: (+1)
   \   0000000E   0x.... 0x....      BL       ?Subroutine15
    938              if (entry.endpoint != EMBER_AF_SCENE_TABLE_UNUSED_ENDPOINT_ID
    939                  && (endpoint == entry.endpoint
    940                      || (endpoint == EMBER_BROADCAST_ENDPOINT
    941                          && (networkIndex
    942                              == emberAfNetworkIndexFromEndpoint(entry.endpoint))))) {
   \                     ??CrossCallReturnLabel_52: (+1)
   \   00000012   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000016   0xB148             CBZ.N    R0,??CrossCallReturnLabel_58
   \   00000018   0x4286             CMP      R6,R0
   \   0000001A   0xD005             BEQ.N    ??emberAfScenesClusterClearSceneTableCallback_1
   \   0000001C   0x2EFF             CMP      R6,#+255
   \   0000001E   0xD105             BNE.N    ??CrossCallReturnLabel_58
   \   00000020   0x.... 0x....      BL       emberAfNetworkIndexFromEndpoint
   \   00000024   0x4284             CMP      R4,R0
   \   00000026   0xD101             BNE.N    ??CrossCallReturnLabel_58
    943                entry.endpoint = EMBER_AF_SCENE_TABLE_UNUSED_ENDPOINT_ID;
   \                     ??emberAfScenesClusterClearSceneTableCallback_1: (+1)
   \   00000028   0x.... 0x....      BL       ?Subroutine17
    944                emberAfPluginScenesServerSaveSceneEntry(entry, i);
    945              }
    946            }
   \                     ??CrossCallReturnLabel_58: (+1)
   \   0000002C   0x1C6D             ADDS     R5,R5,#+1
   \   0000002E   0x2D14             CMP      R5,#+20
   \   00000030   0xDBED             BLT.N    ??emberAfScenesClusterClearSceneTableCallback_0
    947            emberAfPluginScenesServerSetNumSceneEntriesInUse(0);
   \   00000032   0x.... 0x....      LDR.W    R2,??DataTable37
   \   00000036   0x2000             MOVS     R0,#+0
   \   00000038   0x7010             STRB     R0,[R2, #+0]
   \   0000003A   0x2301             MOVS     R3,#+1
   \   0000003C   0x217F             MOVS     R1,#+127
   \   0000003E   0x201C             MOVS     R0,#+28
   \   00000040   0x.... 0x....      BL       halInternalSetTokenData
    948            if (endpoint == EMBER_BROADCAST_ENDPOINT) {
   \   00000044   0x2EFF             CMP      R6,#+255
   \   00000046   0xD114             BNE.N    ??emberAfScenesClusterClearSceneTableCallback_2
    949              for (i = 0; i < emberAfEndpointCount(); i++) {
   \   00000048   0x2500             MOVS     R5,#+0
   \   0000004A   0x.... 0x....      LDR.W    R6,??DataTable37_2
   \                     ??emberAfScenesClusterClearSceneTableCallback_3: (+1)
   \   0000004E   0x.... 0x....      BL       emberAfEndpointCount
   \   00000052   0xB2ED             UXTB     R5,R5
   \   00000054   0x4285             CMP      R5,R0
   \   00000056   0xD210             BCS.N    ??emberAfScenesClusterClearSceneTableCallback_4
    950                if (emberAfNetworkIndexFromEndpointIndex(i) == networkIndex) {
   \   00000058   0xEB06 0x1005      ADD      R0,R6,R5, LSL #+4
   \   0000005C   0x7B00             LDRB     R0,[R0, #+12]
   \   0000005E   0x42A0             CMP      R0,R4
   \   00000060   0xD105             BNE.N    ??emberAfScenesClusterClearSceneTableCallback_5
    951                  emberAfScenesSetSceneCountAttribute(emberAfEndpointFromIndex(i), 0);
   \   00000062   0x4628             MOV      R0,R5
   \   00000064   0x.... 0x....      BL       emberAfEndpointFromIndex
   \   00000068   0x2100             MOVS     R1,#+0
   \   0000006A   0x.... 0x....      BL       emberAfScenesSetSceneCountAttribute
    952                }
    953              }
   \                     ??emberAfScenesClusterClearSceneTableCallback_5: (+1)
   \   0000006E   0x1C6D             ADDS     R5,R5,#+1
   \   00000070   0xE7ED             B.N      ??emberAfScenesClusterClearSceneTableCallback_3
    954            } else {
    955              emberAfScenesSetSceneCountAttribute(endpoint, 0);
   \                     ??emberAfScenesClusterClearSceneTableCallback_2: (+1)
   \   00000072   0x2100             MOVS     R1,#+0
   \   00000074   0x4630             MOV      R0,R6
   \   00000076   0x.... 0x....      BL       emberAfScenesSetSceneCountAttribute
    956            }
    957          }
   \                     ??emberAfScenesClusterClearSceneTableCallback_4: (+1)
   \   0000007A   0xB00A             ADD      SP,SP,#+40
   \   0000007C   0xBD70             POP      {R4-R6,PC}       ;; return
    958          

   \                                 In section .text, align 2, keep-with-next
    959          boolean emberAfPluginScenesServerParseAddScene(const EmberAfClusterCommand *cmd,
    960                                                         int16u groupId,
    961                                                         int8u sceneId,
    962                                                         int16u transitionTime,
    963                                                         int8u *sceneName,
    964                                                         int8u *extensionFieldSets)
    965          {
   \                     emberAfPluginScenesServerParseAddScene: (+1)
   \   00000000   0xE92D 0x4FF6      PUSH     {R1,R2,R4-R11,LR}
   \   00000004   0x4607             MOV      R7,R0
   \   00000006   0xB08D             SUB      SP,SP,#+52
    966            EmberAfSceneTableEntry entry;
    967            EmberAfStatus status;
    968            boolean enhanced = (cmd->commandId == ZCL_ENHANCED_ADD_SCENE_COMMAND_ID);
   \   00000008   0x7CF8             LDRB     R0,[R7, #+19]
   \   0000000A   0x2840             CMP      R0,#+64
    969            int16u extensionFieldSetsLen = (cmd->bufLen
    970                                            - (cmd->payloadStartIndex
    971                                               + sizeof(groupId)
    972                                               + sizeof(sceneId)
    973                                               + sizeof(transitionTime)
    974                                               + emberAfStringLength(sceneName) + 1));
   \   0000000C   0x9818             LDR      R0,[SP, #+96]
   \   0000000E   0x4698             MOV      R8,R3
   \   00000010   0xBF0C             ITE      EQ 
   \   00000012   0xF04F 0x0901      MOVEQ    R9,#+1
   \   00000016   0xF04F 0x0900      MOVNE    R9,#+0
   \   0000001A   0x.... 0x....      BL       emberAfStringLength
   \   0000001E   0x89B9             LDRH     R1,[R7, #+12]
   \   00000020   0x7D3A             LDRB     R2,[R7, #+20]
   \   00000022   0x1A89             SUBS     R1,R1,R2
    975            int16u extensionFieldSetsIndex = 0;
   \   00000024   0x2400             MOVS     R4,#+0
   \   00000026   0x1A08             SUBS     R0,R1,R0
   \   00000028   0x1F85             SUBS     R5,R0,#+6
    976            int8u endpoint = cmd->apsFrame->destinationEndpoint;
   \   0000002A   0x6838             LDR      R0,[R7, #+0]
   \   0000002C   0x7940             LDRB     R0,[R0, #+5]
   \   0000002E   0x9000             STR      R0,[SP, #+0]
   \   00000030   0xB2AD             UXTH     R5,R5
    977            int8u i, index = EMBER_AF_SCENE_TABLE_NULL_INDEX;
    978          
    979            emberAfScenesClusterPrint("RX: %pAddScene 0x%2x, 0x%x, 0x%2x, \"",
    980                                      (enhanced ? "Enhanced" : ""),
    981                                      groupId,
    982                                      sceneId,
    983                                      transitionTime);
    984            emberAfScenesClusterPrintString(sceneName);
    985            emberAfScenesClusterPrint("\", ");
    986            emberAfScenesClusterPrintBuffer(extensionFieldSets, extensionFieldSetsLen, FALSE);
    987            emberAfScenesClusterPrintln("");
    988          
    989            // Unless this is a ZLL device, Add Scene commands can only be addressed to a
    990            // single device.
    991            if (emberIsZllNetwork()) {
   \   00000032   0x.... 0x....      BL       emberIsZllNetwork
   \   00000036   0x2800             CMP      R0,#+0
   \   00000038   0xBF1E             ITTT     NE 
   \   0000003A   0x7938             LDRBNE   R0,[R7, #+4]
   \   0000003C   0x2800             CMPNE    R0,#+0
   \   0000003E   0x2801             CMPNE    R0,#+1
   \   00000040   0xF04F 0x0AFF      MOV      R10,#+255
    992              if (cmd->type != EMBER_INCOMING_UNICAST
    993                  && cmd->type != EMBER_INCOMING_UNICAST_REPLY) {
   \   00000044   0xF040 0x8121      BNE.W    ??emberAfPluginScenesServerParseAddScene_0
    994                return TRUE;
    995              }
    996            }
    997          
    998            // Add Scene commands can only reference groups to which we belong.
    999            if (groupId != ZCL_SCENES_GLOBAL_SCENE_GROUP_ID
   1000                && !emberAfGroupsClusterEndpointInGroupCallback(endpoint, groupId)) {
   \   00000048   0xF8BD 0x0034      LDRH     R0,[SP, #+52]
   \   0000004C   0xB138             CBZ.N    R0,??emberAfPluginScenesServerParseAddScene_1
   \   0000004E   0x4601             MOV      R1,R0
   \   00000050   0x9800             LDR      R0,[SP, #+0]
   \   00000052   0xB2C0             UXTB     R0,R0
   \   00000054   0x.... 0x....      BL       emberAfGroupsClusterEndpointInGroupCallback
   \   00000058   0xB908             CBNZ.N   R0,??emberAfPluginScenesServerParseAddScene_1
   1001              status = EMBER_ZCL_STATUS_INVALID_FIELD;
   \   0000005A   0x2585             MOVS     R5,#+133
   1002              goto kickout;
   \                     ??emberAfPluginScenesServerParseAddScene_2: (+1)
   \   0000005C   0xE10A             B.N      ??emberAfPluginScenesServerParseAddScene_3
   1003            }
   1004          
   1005            for (i = 0; i < EMBER_AF_PLUGIN_SCENES_TABLE_SIZE; i++) {
   \                     ??emberAfPluginScenesServerParseAddScene_1: (+1)
   \   0000005E   0x2700             MOVS     R7,#+0
   1006              emberAfPluginScenesServerRetrieveSceneEntry(entry, i);
   \                     ??emberAfPluginScenesServerParseAddScene_4: (+1)
   \   00000060   0x2322             MOVS     R3,#+34
   \   00000062   0x463A             MOV      R2,R7
   \   00000064   0x.... 0x....      BL       ?Subroutine16
   1007              if (entry.endpoint == endpoint
   1008                  && entry.groupId == groupId
   1009                  && entry.sceneId == sceneId) {
   \                     ??CrossCallReturnLabel_56: (+1)
   \   00000068   0xF89D 0x000C      LDRB     R0,[SP, #+12]
   \   0000006C   0x9900             LDR      R1,[SP, #+0]
   \   0000006E   0x4288             CMP      R0,R1
   \   00000070   0xBF02             ITTT     EQ 
   \   00000072   0xF8BD 0x000E      LDRHEQ   R0,[SP, #+14]
   \   00000076   0xF8BD 0x1034      LDRHEQ   R1,[SP, #+52]
   \   0000007A   0x4288             CMPEQ    R0,R1
   \   0000007C   0xBF02             ITTT     EQ 
   \   0000007E   0xF89D 0x0010      LDRBEQ   R0,[SP, #+16]
   \   00000082   0xF89D 0x1038      LDRBEQ   R1,[SP, #+56]
   \   00000086   0x4288             CMPEQ    R0,R1
   \   00000088   0xD101             BNE.N    ??emberAfPluginScenesServerParseAddScene_5
   1010                index = i;
   \   0000008A   0x46BA             MOV      R10,R7
   1011                break;
   \   0000008C   0xE00A             B.N      ??emberAfPluginScenesServerParseAddScene_6
   1012              } else if (index == EMBER_AF_SCENE_TABLE_NULL_INDEX
   1013                         && entry.endpoint == EMBER_AF_SCENE_TABLE_UNUSED_ENDPOINT_ID) {
   \                     ??emberAfPluginScenesServerParseAddScene_5: (+1)
   \   0000008E   0xF1BA 0x0FFF      CMP      R10,#+255
   \   00000092   0xBF02             ITTT     EQ 
   \   00000094   0xF89D 0x000C      LDRBEQ   R0,[SP, #+12]
   \   00000098   0x2800             CMPEQ    R0,#+0
   \   0000009A   0x46BA             MOVEQ    R10,R7
   1014                index = i;
   1015              }
   1016            }
   \   0000009C   0x1C7F             ADDS     R7,R7,#+1
   \   0000009E   0xB2FF             UXTB     R7,R7
   \   000000A0   0x2F14             CMP      R7,#+20
   \   000000A2   0xDBDD             BLT.N    ??emberAfPluginScenesServerParseAddScene_4
   1017          
   1018            // If the target index is still zero, the table is full.
   1019            if (index == EMBER_AF_SCENE_TABLE_NULL_INDEX) {
   \                     ??emberAfPluginScenesServerParseAddScene_6: (+1)
   \   000000A4   0xF1BA 0x0FFF      CMP      R10,#+255
   \   000000A8   0xBF08             IT       EQ 
   \   000000AA   0x2589             MOVEQ    R5,#+137
   1020              status = EMBER_ZCL_STATUS_INSUFFICIENT_SPACE;
   1021              goto kickout;
   \   000000AC   0xD0D6             BEQ.N    ??emberAfPluginScenesServerParseAddScene_2
   1022            }
   1023          
   1024            emberAfPluginScenesServerRetrieveSceneEntry(entry, index);
   \   000000AE   0x2322             MOVS     R3,#+34
   \   000000B0   0x4652             MOV      R2,R10
   \   000000B2   0x.... 0x....      BL       ?Subroutine16
   1025          
   1026            if (emberIsZllNetwork()) {
   \                     ??CrossCallReturnLabel_55: (+1)
   \   000000B6   0x.... 0x....      BL       emberIsZllNetwork
   \   000000BA   0xB1A0             CBZ.N    R0,??emberAfPluginScenesServerParseAddScene_7
   1027              // The transition time is specified in seconds in the regular version of the
   1028              // command and tenths of a second in the enhanced version.
   1029              if (enhanced) {
   \   000000BC   0xF1B9 0x0F00      CMP      R9,#+0
   \   000000C0   0xD00C             BEQ.N    ??emberAfPluginScenesServerParseAddScene_8
   1030                entry.transitionTime = transitionTime / 10;
   \   000000C2   0x200A             MOVS     R0,#+10
   \   000000C4   0xFB98 0xF0F0      SDIV     R0,R8,R0
   \   000000C8   0xF8AD 0x0012      STRH     R0,[SP, #+18]
   1031                entry.transitionTime100ms = (int8u)(transitionTime - entry.transitionTime * 10);
   \   000000CC   0x210A             MOVS     R1,#+10
   \   000000CE   0xF8BD 0x0012      LDRH     R0,[SP, #+18]
   \   000000D2   0xFB01 0x8010      MLS      R0,R1,R0,R8
   \   000000D6   0xF88D 0x0014      STRB     R0,[SP, #+20]
   \   000000DA   0xE006             B.N      ??emberAfPluginScenesServerParseAddScene_9
   1032              } else {
   1033                entry.transitionTime = transitionTime;
   \                     ??emberAfPluginScenesServerParseAddScene_8: (+1)
   \   000000DC   0xF8AD 0x8012      STRH     R8,[SP, #+18]
   1034                entry.transitionTime100ms = 0;
   \   000000E0   0xF88D 0x4014      STRB     R4,[SP, #+20]
   \   000000E4   0xE001             B.N      ??emberAfPluginScenesServerParseAddScene_9
   1035              }
   1036            } else {
   1037              entry.transitionTime = transitionTime;
   \                     ??emberAfPluginScenesServerParseAddScene_7: (+1)
   \   000000E6   0xF8AD 0x8012      STRH     R8,[SP, #+18]
   1038            }
   1039          
   1040          #ifdef EMBER_AF_PLUGIN_SCENES_NAME_SUPPORT
   1041            emberAfCopyString(entry.name, sceneName, ZCL_SCENES_CLUSTER_MAXIMUM_NAME_LENGTH);
   1042          #endif
   1043          
   1044            // When adding a new scene, wipe out all of the extensions before parsing the
   1045            // extension field sets data.
   1046            if (i != index) {
   \                     ??emberAfPluginScenesServerParseAddScene_9: (+1)
   \   000000EA   0x4557             CMP      R7,R10
   \   000000EC   0xD014             BEQ.N    ??emberAfPluginScenesServerParseAddScene_10
   1047          #ifdef ZCL_USING_ON_OFF_CLUSTER_SERVER
   1048              entry.hasOnOffValue = FALSE;
   \   000000EE   0xF88D 0x4015      STRB     R4,[SP, #+21]
   1049          #endif
   1050          #ifdef ZCL_USING_LEVEL_CONTROL_CLUSTER_SERVER
   1051              entry.hasCurrentLevelValue = FALSE;
   \   000000F2   0xF88D 0x4017      STRB     R4,[SP, #+23]
   1052          #endif
   1053          #ifdef ZCL_USING_THERMOSTAT_CLUSTER_SERVER
   1054              entry.hasOccupiedCoolingSetpointValue = FALSE;
   1055              entry.hasOccupiedHeatingSetpointValue = FALSE;
   1056              entry.hasSystemModeValue = FALSE;
   1057          #endif
   1058          #ifdef ZCL_USING_COLOR_CONTROL_CLUSTER_SERVER
   1059              entry.hasCurrentXValue = FALSE;
   \   000000F6   0xF88D 0x4019      STRB     R4,[SP, #+25]
   1060              entry.hasCurrentYValue = FALSE;
   \   000000FA   0xF88D 0x401C      STRB     R4,[SP, #+28]
   1061              if (emberIsZllNetwork()) {
   \   000000FE   0x.... 0x....      BL       emberIsZllNetwork
   \   00000102   0xB148             CBZ.N    R0,??emberAfPluginScenesServerParseAddScene_10
   1062                entry.hasEnhancedCurrentHueValue = FALSE;
   \   00000104   0xF88D 0x4020      STRB     R4,[SP, #+32]
   1063                entry.hasCurrentSaturationValue = FALSE;
   \   00000108   0xF88D 0x4024      STRB     R4,[SP, #+36]
   1064                entry.hasColorLoopActiveValue = FALSE;
   \   0000010C   0xF88D 0x4026      STRB     R4,[SP, #+38]
   1065                entry.hasColorLoopDirectionValue = FALSE;
   \   00000110   0xF88D 0x4028      STRB     R4,[SP, #+40]
   1066                entry.hasColorLoopTimeValue = FALSE;
   \   00000114   0xF88D 0x402A      STRB     R4,[SP, #+42]
   \                     ??emberAfPluginScenesServerParseAddScene_10: (+1)
   \   00000118   0xF8DD 0x8064      LDR      R8,[SP, #+100]
   \   0000011C   0xE054             B.N      ??emberAfPluginScenesServerParseAddScene_11
   1067              }
   1068          #endif //ZCL_USING_COLOR_CONTROL_CLUSTER_SERVER
   1069          #ifdef ZCL_USING_DOOR_LOCK_CLUSTER_SERVER
   1070              entry.hasLockStateValue = FALSE;
   1071          #endif
   1072          #ifdef ZCL_USING_WINDOW_COVERING_CLUSTER_SERVER
   1073              entry.hasCurrentPositionLiftPercentageValue = FALSE;
   1074              entry.hasCurrentPositionTiltPercentageValue = FALSE;
   1075          #endif
   1076            }
   1077          
   1078            while (extensionFieldSetsIndex < extensionFieldSetsLen) {
   1079              EmberAfClusterId clusterId;
   1080              int8u length;
   1081          
   1082              // Each extension field set must contain a two-byte cluster id and a one-
   1083              // byte length.  Otherwise, the command is malformed.
   1084              if (extensionFieldSetsLen < extensionFieldSetsIndex + 3) {
   1085                status = EMBER_ZCL_STATUS_MALFORMED_COMMAND;
   1086                goto kickout;
   1087              }
   1088          
   1089              clusterId = emberAfGetInt16u(extensionFieldSets, extensionFieldSetsIndex, extensionFieldSetsLen);
   1090              extensionFieldSetsIndex += 2;
   1091              length = emberAfGetInt8u(extensionFieldSets, extensionFieldSetsIndex, extensionFieldSetsLen);
   1092              extensionFieldSetsIndex++;
   1093          
   1094              // If the length is off, the command is also malformed.
   1095              if (length == 0) {
   1096                continue;
   1097              } else if (extensionFieldSetsLen < extensionFieldSetsIndex + length) {
   1098                status = EMBER_ZCL_STATUS_MALFORMED_COMMAND;
   1099                goto kickout;
   1100              }
   1101          
   1102              switch (clusterId) {
   1103          #ifdef ZCL_USING_ON_OFF_CLUSTER_SERVER
   1104              case ZCL_ON_OFF_CLUSTER_ID:
   1105                // We only know of one extension for the On/Off cluster and it is just one
   1106                // byte, which means we can skip some logic for this cluster.  If other
   1107                // extensions are added in this cluster, more logic will be needed here.
   1108                entry.hasOnOffValue = TRUE;
   1109                entry.onOffValue = emberAfGetInt8u(extensionFieldSets, extensionFieldSetsIndex, extensionFieldSetsLen);
   1110                break;
   1111          #endif
   1112          #ifdef ZCL_USING_LEVEL_CONTROL_CLUSTER_SERVER
   1113              case ZCL_LEVEL_CONTROL_CLUSTER_ID:
   1114                // We only know of one extension for the Color Control cluster and it is
   1115                // just one byte, which means we can skip some logic for this cluster.  If
   1116                // other extensions are added in this cluster, more logic will be needed
   1117                // here.
   1118                entry.hasCurrentLevelValue = TRUE;
   1119                entry.currentLevelValue = emberAfGetInt8u(extensionFieldSets, extensionFieldSetsIndex, extensionFieldSetsLen);
   1120                break;
   1121          #endif
   1122          #ifdef ZCL_USING_THERMOSTAT_CLUSTER_SERVER
   1123              case ZCL_THERMOSTAT_CLUSTER_ID:
   1124                if (length < 2) {
   1125                  break;
   1126                }
   1127                entry.hasOccupiedCoolingSetpointValue = TRUE;
   1128                entry.occupiedCoolingSetpointValue = (int16s)emberAfGetInt16u(extensionFieldSets, extensionFieldSetsIndex, extensionFieldSetsLen);
   1129                extensionFieldSetsIndex += 2;
   1130                length -= 2;
   1131                if (length < 2) {
   1132                  break;
   1133                }
   1134                entry.hasOccupiedHeatingSetpointValue = TRUE;
   1135                entry.occupiedHeatingSetpointValue = (int16s)emberAfGetInt16u(extensionFieldSets, extensionFieldSetsIndex, extensionFieldSetsLen);
   1136                extensionFieldSetsIndex += 2;
   1137                length -= 2;
   1138                if (length < 1) {
   1139                  break;
   1140                }
   1141                entry.hasSystemModeValue = TRUE;
   1142                entry.systemModeValue = emberAfGetInt8u(extensionFieldSets, extensionFieldSetsIndex, extensionFieldSetsLen);
   1143                // If additional Thermostat extensions are added, adjust the index and
   1144                // length variables here.
   1145                break;
   1146          #endif
   1147          #ifdef ZCL_USING_COLOR_CONTROL_CLUSTER_SERVER
   1148              case ZCL_COLOR_CONTROL_CLUSTER_ID:
   1149                if (length < 2) {
   \                     ??emberAfPluginScenesServerParseAddScene_12: (+1)
   \   0000011E   0x2E02             CMP      R6,#+2
   \   00000120   0xDB51             BLT.N    ??emberAfPluginScenesServerParseAddScene_13
   1150                  break;
   1151                }
   1152                entry.hasCurrentXValue = TRUE;
   \   00000122   0x2001             MOVS     R0,#+1
   \   00000124   0xF88D 0x0019      STRB     R0,[SP, #+25]
   1153                entry.currentXValue = emberAfGetInt16u(extensionFieldSets, extensionFieldSetsIndex, extensionFieldSetsLen);
   \   00000128   0x462A             MOV      R2,R5
   \   0000012A   0x4640             MOV      R0,R8
   \   0000012C   0x1EB6             SUBS     R6,R6,#+2
   \   0000012E   0x.... 0x....      BL       emberAfGetInt16u
   1154                extensionFieldSetsIndex += 2;
   \   00000132   0x1CA4             ADDS     R4,R4,#+2
   1155                length -= 2;
   \   00000134   0xB2F6             UXTB     R6,R6
   1156                if (length < 2) {
   \   00000136   0x2E02             CMP      R6,#+2
   \   00000138   0xF8AD 0x001A      STRH     R0,[SP, #+26]
   \   0000013C   0xDB43             BLT.N    ??emberAfPluginScenesServerParseAddScene_13
   1157                  break;
   1158                }
   1159                entry.hasCurrentYValue = TRUE;
   \   0000013E   0x2001             MOVS     R0,#+1
   \   00000140   0xF88D 0x001C      STRB     R0,[SP, #+28]
   1160                entry.currentYValue = emberAfGetInt16u(extensionFieldSets, extensionFieldSetsIndex, extensionFieldSetsLen);
   \   00000144   0x.... 0x....      BL       ?Subroutine20
   \                     ??CrossCallReturnLabel_66: (+1)
   \   00000148   0xF8AD 0x001E      STRH     R0,[SP, #+30]
   1161                if (emberIsZllNetwork() && enhanced) {
   \   0000014C   0x.... 0x....      BL       emberIsZllNetwork
   \   00000150   0x2800             CMP      R0,#+0
   \   00000152   0xBF18             IT       NE 
   \   00000154   0xF1B9 0x0F00      CMPNE    R9,#+0
   \   00000158   0xD035             BEQ.N    ??emberAfPluginScenesServerParseAddScene_13
   1162                  extensionFieldSetsIndex += 2;
   1163                  length -= 2;
   \   0000015A   0x1EB6             SUBS     R6,R6,#+2
   \   0000015C   0x1CA4             ADDS     R4,R4,#+2
   \   0000015E   0xB2F6             UXTB     R6,R6
   1164                  if (length < 2) {
   \   00000160   0x2E02             CMP      R6,#+2
   \   00000162   0xDB30             BLT.N    ??emberAfPluginScenesServerParseAddScene_13
   1165                    break;
   1166                  }
   1167                  entry.hasEnhancedCurrentHueValue = TRUE;
   \   00000164   0x2001             MOVS     R0,#+1
   \   00000166   0xF88D 0x0020      STRB     R0,[SP, #+32]
   1168                  entry.enhancedCurrentHueValue = emberAfGetInt16u(extensionFieldSets, extensionFieldSetsIndex, extensionFieldSetsLen);
   \   0000016A   0x.... 0x....      BL       ?Subroutine20
   1169                  extensionFieldSetsIndex += 2;
   1170                  length -= 2;
   \                     ??CrossCallReturnLabel_65: (+1)
   \   0000016E   0x1EB6             SUBS     R6,R6,#+2
   \   00000170   0xF8AD 0x0022      STRH     R0,[SP, #+34]
   \   00000174   0x1CA4             ADDS     R4,R4,#+2
   \   00000176   0xB2F6             UXTB     R6,R6
   1171                  if (length < 1) {
   \   00000178   0xB32E             CBZ.N    R6,??emberAfPluginScenesServerParseAddScene_13
   1172                    break;
   1173                  }
   1174                  entry.hasCurrentSaturationValue = TRUE;
   \   0000017A   0x2001             MOVS     R0,#+1
   \   0000017C   0xF88D 0x0024      STRB     R0,[SP, #+36]
   1175                  entry.currentSaturationValue = emberAfGetInt8u(extensionFieldSets, extensionFieldSetsIndex, extensionFieldSetsLen);
   \   00000180   0x.... 0x....      BL       ?Subroutine23
   1176                  extensionFieldSetsIndex++;
   1177                  length--;
   \                     ??CrossCallReturnLabel_74: (+1)
   \   00000184   0xF88D 0x0025      STRB     R0,[SP, #+37]
   \   00000188   0x1C64             ADDS     R4,R4,#+1
   \   0000018A   0xB2F6             UXTB     R6,R6
   1178                  if (length < 1) {
   \   0000018C   0xB1DE             CBZ.N    R6,??emberAfPluginScenesServerParseAddScene_13
   1179                    break;
   1180                  }
   1181                  entry.hasColorLoopActiveValue = TRUE;
   \   0000018E   0x2001             MOVS     R0,#+1
   \   00000190   0xF88D 0x0026      STRB     R0,[SP, #+38]
   1182                  entry.colorLoopActiveValue = emberAfGetInt8u(extensionFieldSets, extensionFieldSetsIndex, extensionFieldSetsLen);
   \   00000194   0x.... 0x....      BL       ?Subroutine23
   1183                  extensionFieldSetsIndex++;
   1184                  length--;
   \                     ??CrossCallReturnLabel_75: (+1)
   \   00000198   0xF88D 0x0027      STRB     R0,[SP, #+39]
   \   0000019C   0x1C64             ADDS     R4,R4,#+1
   \   0000019E   0xB2F6             UXTB     R6,R6
   1185                  if (length < 1) {
   \   000001A0   0xB18E             CBZ.N    R6,??emberAfPluginScenesServerParseAddScene_13
   1186                    break;
   1187                  }
   1188                  entry.hasColorLoopDirectionValue = TRUE;
   \   000001A2   0x2001             MOVS     R0,#+1
   \   000001A4   0xF88D 0x0028      STRB     R0,[SP, #+40]
   1189                  entry.colorLoopDirectionValue = emberAfGetInt8u(extensionFieldSets, extensionFieldSetsIndex, extensionFieldSetsLen);
   \   000001A8   0x.... 0x....      BL       ?Subroutine23
   1190                  extensionFieldSetsIndex++;
   1191                  length--;
   \                     ??CrossCallReturnLabel_76: (+1)
   \   000001AC   0x1C64             ADDS     R4,R4,#+1
   \   000001AE   0xB2F6             UXTB     R6,R6
   1192                  if (length < 2) {
   \   000001B0   0x2E02             CMP      R6,#+2
   \   000001B2   0xF88D 0x0029      STRB     R0,[SP, #+41]
   \   000001B6   0xDB06             BLT.N    ??emberAfPluginScenesServerParseAddScene_13
   1193                    break;
   1194                  }
   1195                  entry.hasColorLoopTimeValue = TRUE;
   \   000001B8   0x2001             MOVS     R0,#+1
   \   000001BA   0xF88D 0x002A      STRB     R0,[SP, #+42]
   1196                  entry.colorLoopTimeValue = emberAfGetInt16u(extensionFieldSets, extensionFieldSetsIndex, extensionFieldSetsLen);
   \   000001BE   0x.... 0x....      BL       ?Subroutine20
   1197                }
   \                     ??CrossCallReturnLabel_64: (+1)
   \   000001C2   0xF8AD 0x002C      STRH     R0,[SP, #+44]
   1198                // If additional Color Control extensions are added, adjust the index and
   1199                // length variables here.
   1200                break;
   1201          #endif //ZCL_USING_COLOR_CONTROL_CLUSTER_SERVER
   1202          #ifdef ZCL_USING_DOOR_LOCK_CLUSTER_SERVER
   1203              case ZCL_DOOR_LOCK_CLUSTER_ID:
   1204                // We only know of one extension for the Door Lock cluster and it is just
   1205                // one byte, which means we can skip some logic for this cluster.  If
   1206                // other extensions are added in this cluster, more logic will be needed
   1207                // here.
   1208                entry.hasLockStateValue = TRUE;
   1209                entry.lockStateValue = emberAfGetInt8u(extensionFieldSets, extensionFieldSetsIndex, extensionFieldSetsLen);
   1210                break;
   1211          #endif
   1212          #ifdef ZCL_USING_WINDOW_COVERING_CLUSTER_SERVER
   1213              case ZCL_WINDOW_COVERING_CLUSTER_ID:
   1214                // If we're here, we know we have at least one byte, so we can skip the
   1215                // length check for the first field.
   1216                entry.hasCurrentPositionLiftPercentageValue = TRUE;
   1217                entry.currentPositionLiftPercentageValue = emberAfGetInt8u(extensionFieldSets, extensionFieldSetsIndex, extensionFieldSetsLen);
   1218                extensionFieldSetsIndex++;
   1219                length--;
   1220                if (length < 1) {
   1221                  break;
   1222                }
   1223                entry.hasCurrentPositionTiltPercentageValue = TRUE;
   1224                entry.currentPositionTiltPercentageValue = emberAfGetInt8u(extensionFieldSets, extensionFieldSetsIndex, extensionFieldSetsLen);
   1225                // If additional Window Covering extensions are added, adjust the index
   1226                // and length variables here.
   1227                break;
   1228          #endif
   1229              default:
   1230                break;
   1231              }
   1232          
   1233              extensionFieldSetsIndex += length;
   \                     ??emberAfPluginScenesServerParseAddScene_13: (+1)
   \   000001C6   0x1934             ADDS     R4,R6,R4
   \                     ??emberAfPluginScenesServerParseAddScene_11: (+1)
   \   000001C8   0xB2A4             UXTH     R4,R4
   \   000001CA   0x42AC             CMP      R4,R5
   \   000001CC   0xD22D             BCS.N    ??emberAfPluginScenesServerParseAddScene_14
   \   000001CE   0x1CE0             ADDS     R0,R4,#+3
   \   000001D0   0x4285             CMP      R5,R0
   \   000001D2   0xDB10             BLT.N    ??emberAfPluginScenesServerParseAddScene_15
   \   000001D4   0x462A             MOV      R2,R5
   \   000001D6   0x4621             MOV      R1,R4
   \   000001D8   0x4640             MOV      R0,R8
   \   000001DA   0x.... 0x....      BL       emberAfGetInt16u
   \   000001DE   0x1CA1             ADDS     R1,R4,#+2
   \   000001E0   0xB289             UXTH     R1,R1
   \   000001E2   0x1C4C             ADDS     R4,R1,#+1
   \   000001E4   0xF811 0x6008      LDRB     R6,[R1, R8]
   \   000001E8   0x2E00             CMP      R6,#+0
   \   000001EA   0xD0ED             BEQ.N    ??emberAfPluginScenesServerParseAddScene_11
   \   000001EC   0xB2A4             UXTH     R4,R4
   \   000001EE   0x4621             MOV      R1,R4
   \   000001F0   0x1872             ADDS     R2,R6,R1
   \   000001F2   0x4295             CMP      R5,R2
   \   000001F4   0xDA01             BGE.N    ??emberAfPluginScenesServerParseAddScene_16
   \                     ??emberAfPluginScenesServerParseAddScene_15: (+1)
   \   000001F6   0x2580             MOVS     R5,#+128
   \   000001F8   0xE03C             B.N      ??emberAfPluginScenesServerParseAddScene_3
   \                     ??emberAfPluginScenesServerParseAddScene_16: (+1)
   \   000001FA   0x2806             CMP      R0,#+6
   \   000001FC   0xD005             BEQ.N    ??emberAfPluginScenesServerParseAddScene_17
   \   000001FE   0x2808             CMP      R0,#+8
   \   00000200   0xD00B             BEQ.N    ??emberAfPluginScenesServerParseAddScene_18
   \   00000202   0xF5B0 0x7F40      CMP      R0,#+768
   \   00000206   0xD08A             BEQ.N    ??emberAfPluginScenesServerParseAddScene_12
   \   00000208   0xE7DD             B.N      ??emberAfPluginScenesServerParseAddScene_13
   \                     ??emberAfPluginScenesServerParseAddScene_17: (+1)
   \   0000020A   0x2001             MOVS     R0,#+1
   \   0000020C   0xF88D 0x0015      STRB     R0,[SP, #+21]
   \   00000210   0xF811 0x0008      LDRB     R0,[R1, R8]
   \   00000214   0xF88D 0x0016      STRB     R0,[SP, #+22]
   \   00000218   0xE7D5             B.N      ??emberAfPluginScenesServerParseAddScene_13
   \                     ??emberAfPluginScenesServerParseAddScene_18: (+1)
   \   0000021A   0x2001             MOVS     R0,#+1
   \   0000021C   0xF88D 0x0017      STRB     R0,[SP, #+23]
   \   00000220   0xF811 0x0008      LDRB     R0,[R1, R8]
   \   00000224   0xF88D 0x0018      STRB     R0,[SP, #+24]
   \   00000228   0xE7CD             B.N      ??emberAfPluginScenesServerParseAddScene_13
   1234            }
   1235          
   1236            // If we got this far, we either added a new entry or updated an existing one.
   1237            // If we added, store the basic data and increment the scene count.  In either
   1238            // case, save the entry.
   1239            if (i != index) {
   \                     ??emberAfPluginScenesServerParseAddScene_14: (+1)
   \   0000022A   0x4557             CMP      R7,R10
   \   0000022C   0xD01C             BEQ.N    ??emberAfPluginScenesServerParseAddScene_19
   1240              entry.endpoint = endpoint;
   \   0000022E   0x9800             LDR      R0,[SP, #+0]
   1241              entry.groupId = groupId;
   1242              entry.sceneId = sceneId;
   1243              emberAfPluginScenesServerIncrNumSceneEntriesInUse();
   \   00000230   0x....             LDR.N    R5,??DataTable37
   \   00000232   0xF88D 0x000C      STRB     R0,[SP, #+12]
   \   00000236   0x2301             MOVS     R3,#+1
   \   00000238   0xF8BD 0x0034      LDRH     R0,[SP, #+52]
   \   0000023C   0xF8AD 0x000E      STRH     R0,[SP, #+14]
   \   00000240   0x227F             MOVS     R2,#+127
   \   00000242   0xF89D 0x0038      LDRB     R0,[SP, #+56]
   \   00000246   0xF88D 0x0010      STRB     R0,[SP, #+16]
   \   0000024A   0x211C             MOVS     R1,#+28
   \   0000024C   0x4628             MOV      R0,R5
   \   0000024E   0x.... 0x....      BL       halInternalGetTokenData
   \   00000252   0x7828             LDRB     R0,[R5, #+0]
   \   00000254   0x1C40             ADDS     R0,R0,#+1
   \   00000256   0x.... 0x....      BL       ?Subroutine11
   1244              emberAfScenesSetSceneCountAttribute(endpoint,
   1245                                                  emberAfPluginScenesServerNumSceneEntriesInUse());
   \                     ??CrossCallReturnLabel_36: (+1)
   \   0000025A   0x.... 0x....      BL       ?Subroutine8
   1246            }
   \                     ??CrossCallReturnLabel_27: (+1)
   \   0000025E   0x9800             LDR      R0,[SP, #+0]
   \   00000260   0x7829             LDRB     R1,[R5, #+0]
   \   00000262   0xB2C0             UXTB     R0,R0
   \   00000264   0x.... 0x....      BL       emberAfScenesSetSceneCountAttribute
   1247            emberAfPluginScenesServerSaveSceneEntry(entry, index);
   \                     ??emberAfPluginScenesServerParseAddScene_19: (+1)
   \   00000268   0x2322             MOVS     R3,#+34
   \   0000026A   0xAA03             ADD      R2,SP,#+12
   \   0000026C   0x4651             MOV      R1,R10
   \   0000026E   0x.... 0x....      BL       ?Subroutine22
   1248            status = EMBER_ZCL_STATUS_SUCCESS;
   \                     ??CrossCallReturnLabel_71: (+1)
   \   00000272   0x2500             MOVS     R5,#+0
   1249          
   1250          kickout:
   1251            // Add Scene commands are only responded to when they are addressed to a
   1252            // single device.  This can only happen for ZLL devices.
   1253            if (emberIsZllNetwork()) {
   \                     ??emberAfPluginScenesServerParseAddScene_3: (+1)
   \   00000274   0x.... 0x....      BL       emberIsZllNetwork
   \   00000278   0x2800             CMP      R0,#+0
   \   0000027A   0xBF1F             ITTTT    NE 
   \   0000027C   0x....             LDRNE.N  R0,??DataTable37_1
   \   0000027E   0x6800             LDRNE    R0,[R0, #+0]
   \   00000280   0x7900             LDRBNE   R0,[R0, #+4]
   \   00000282   0x2800             CMPNE    R0,#+0
   \   00000284   0xD005             BEQ.N    ??emberAfPluginScenesServerParseAddScene_20
   \   00000286   0x2801             CMP      R0,#+1
   \   00000288   0xD003             BEQ.N    ??emberAfPluginScenesServerParseAddScene_20
   1254              if (emberAfCurrentCommand()->type != EMBER_INCOMING_UNICAST
   1255                  && emberAfCurrentCommand()->type != EMBER_INCOMING_UNICAST_REPLY) {
   1256                return TRUE;
   \                     ??emberAfPluginScenesServerParseAddScene_0: (+1)
   \   0000028A   0x2001             MOVS     R0,#+1
   \   0000028C   0xB00F             ADD      SP,SP,#+60
   \   0000028E   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   1257              }
   1258            }
   1259            emberAfFillExternalBuffer((ZCL_CLUSTER_SPECIFIC_COMMAND
   1260                                       | ZCL_FRAME_CONTROL_SERVER_TO_CLIENT),
   1261                                      ZCL_SCENES_CLUSTER_ID,
   1262                                      (enhanced
   1263                                       ? ZCL_ENHANCED_ADD_SCENE_RESPONSE_COMMAND_ID
   1264                                       : ZCL_ADD_SCENE_RESPONSE_COMMAND_ID),
   1265                                      "uvu",
   1266                                      status,
   1267                                      groupId,
   1268                                      sceneId);
   \                     ??emberAfPluginScenesServerParseAddScene_20: (+1)
   \   00000292   0xF89D 0x0038      LDRB     R0,[SP, #+56]
   \   00000296   0x9002             STR      R0,[SP, #+8]
   \   00000298   0xF1B9 0x0F00      CMP      R9,#+0
   \   0000029C   0xF8BD 0x0034      LDRH     R0,[SP, #+52]
   \   000002A0   0x9001             STR      R0,[SP, #+4]
   \   000002A2   0xBF14             ITE      NE 
   \   000002A4   0x2240             MOVNE    R2,#+64
   \   000002A6   0x2200             MOVEQ    R2,#+0
   \   000002A8   0x9500             STR      R5,[SP, #+0]
   \   000002AA   0x.... 0x....      BL       ?Subroutine13
   1269            emberAfSendResponse();
   \                     ??CrossCallReturnLabel_44: (+1)
   \   000002AE   0x.... 0x....      BL       emberAfSendResponse
   \   000002B2   0xE7EA             B.N      ??emberAfPluginScenesServerParseAddScene_0
   1270            return TRUE;
   1271          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine23: (+1)
   \   00000000   0xB2A4             UXTH     R4,R4
   \   00000002   0x1E76             SUBS     R6,R6,#+1
   \   00000004   0xF814 0x0008      LDRB     R0,[R4, R8]
   \   00000008   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine20: (+1)
   \   00000000   0x462A             MOV      R2,R5
   \   00000002   0xB2A1             UXTH     R1,R4
   \   00000004   0x4640             MOV      R0,R8
   \   00000006   0x.... 0x....      B.W      emberAfGetInt16u

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine11: (+1)
   \   00000000   0x7028             STRB     R0,[R5, #+0]
   \   00000002   0x2301             MOVS     R3,#+1
   \   00000004   0x462A             MOV      R2,R5
   \   00000006   0x217F             MOVS     R1,#+127
   \   00000008   0x201C             MOVS     R0,#+28
   \   0000000A   0x.... 0x....      B.W      halInternalSetTokenData
   1272          

   \                                 In section .text, align 2, keep-with-next
   1273          boolean emberAfPluginScenesServerParseViewScene(const EmberAfClusterCommand *cmd,
   1274                                                          int16u groupId,
   1275                                                          int8u sceneId)
   1276          {
   \                     emberAfPluginScenesServerParseViewScene: (+1)
   \   00000000   0xE92D 0x43F0      PUSH     {R4-R9,LR}
   \   00000004   0x460D             MOV      R5,R1
   1277            EmberAfSceneTableEntry entry;
   1278            EmberAfStatus status = EMBER_ZCL_STATUS_NOT_FOUND;
   1279            boolean enhanced = (cmd->commandId == ZCL_ENHANCED_VIEW_SCENE_COMMAND_ID);
   \   00000006   0x7CC1             LDRB     R1,[R0, #+19]
   \   00000008   0xB08D             SUB      SP,SP,#+52
   \   0000000A   0x278B             MOVS     R7,#+139
   \   0000000C   0x2941             CMP      R1,#+65
   1280            int8u endpoint = cmd->apsFrame->destinationEndpoint;
   \   0000000E   0x6801             LDR      R1,[R0, #+0]
   1281          
   1282            emberAfScenesClusterPrintln("RX: %pViewScene 0x%2x, 0x%x",
   1283                                        (enhanced ? "Enhanced" : ""),
   1284                                        groupId,
   1285                                        sceneId);
   1286          
   1287            // View Scene commands can only be addressed to a single device and only
   1288            // referencing groups to which we belong.
   1289            if (cmd->type != EMBER_INCOMING_UNICAST
   1290                && cmd->type != EMBER_INCOMING_UNICAST_REPLY) {
   \   00000010   0x7900             LDRB     R0,[R0, #+4]
   \   00000012   0xF891 0x8005      LDRB     R8,[R1, #+5]
   \   00000016   0xBF0C             ITE      EQ 
   \   00000018   0x2401             MOVEQ    R4,#+1
   \   0000001A   0x2400             MOVNE    R4,#+0
   \   0000001C   0x2800             CMP      R0,#+0
   \   0000001E   0xBF18             IT       NE 
   \   00000020   0x2801             CMPNE    R0,#+1
   \   00000022   0x4691             MOV      R9,R2
   \   00000024   0xF040 0x80AE      BNE.W    ??emberAfPluginScenesServerParseViewScene_0
   1291              return TRUE;
   1292            } else if (groupId != ZCL_SCENES_GLOBAL_SCENE_GROUP_ID
   1293                       && !emberAfGroupsClusterEndpointInGroupCallback(endpoint,
   1294                                                                       groupId)) {
   \   00000028   0xB135             CBZ.N    R5,??emberAfPluginScenesServerParseViewScene_1
   \   0000002A   0x4629             MOV      R1,R5
   \   0000002C   0x4640             MOV      R0,R8
   \   0000002E   0x.... 0x....      BL       emberAfGroupsClusterEndpointInGroupCallback
   \   00000032   0xB908             CBNZ.N   R0,??emberAfPluginScenesServerParseViewScene_1
   1295              status = EMBER_ZCL_STATUS_INVALID_FIELD;
   \   00000034   0x2785             MOVS     R7,#+133
   \   00000036   0xE015             B.N      ??emberAfPluginScenesServerParseViewScene_2
   1296            } else {
   1297              int8u i;
   1298              for (i = 0; i < EMBER_AF_PLUGIN_SCENES_TABLE_SIZE; i++) {
   \                     ??emberAfPluginScenesServerParseViewScene_1: (+1)
   \   00000038   0x2600             MOVS     R6,#+0
   1299                emberAfPluginScenesServerRetrieveSceneEntry(entry, i);
   \                     ??emberAfPluginScenesServerParseViewScene_3: (+1)
   \   0000003A   0x2322             MOVS     R3,#+34
   \   0000003C   0x4632             MOV      R2,R6
   \   0000003E   0x.... 0x....      BL       ?Subroutine16
   1300                if (entry.endpoint == endpoint
   1301                    && entry.groupId == groupId
   1302                    && entry.sceneId == sceneId) {
   \                     ??CrossCallReturnLabel_54: (+1)
   \   00000042   0xF89D 0x000C      LDRB     R0,[SP, #+12]
   \   00000046   0x4540             CMP      R0,R8
   \   00000048   0xBF01             ITTTT    EQ 
   \   0000004A   0xF8BD 0x000E      LDRHEQ   R0,[SP, #+14]
   \   0000004E   0x42A8             CMPEQ    R0,R5
   \   00000050   0xF89D 0x0010      LDRBEQ   R0,[SP, #+16]
   \   00000054   0x4548             CMPEQ    R0,R9
   \   00000056   0xD101             BNE.N    ??emberAfPluginScenesServerParseViewScene_4
   1303                  status = EMBER_ZCL_STATUS_SUCCESS;
   \   00000058   0x2700             MOVS     R7,#+0
   1304                  break;
   \   0000005A   0xE003             B.N      ??emberAfPluginScenesServerParseViewScene_2
   1305                }
   1306              }
   \                     ??emberAfPluginScenesServerParseViewScene_4: (+1)
   \   0000005C   0x1C76             ADDS     R6,R6,#+1
   \   0000005E   0xB2F6             UXTB     R6,R6
   \   00000060   0x2E14             CMP      R6,#+20
   \   00000062   0xDBEA             BLT.N    ??emberAfPluginScenesServerParseViewScene_3
   1307            }
   1308          
   1309            // The status, group id, and scene id are always included in the response, but
   1310            // the transition time, name, and extension fields are only included if the
   1311            // scene was found.
   1312            emberAfFillExternalBuffer((ZCL_CLUSTER_SPECIFIC_COMMAND
   1313                                       | ZCL_FRAME_CONTROL_SERVER_TO_CLIENT
   1314                                       | EMBER_AF_DEFAULT_RESPONSE_POLICY_RESPONSES),
   1315                                      ZCL_SCENES_CLUSTER_ID,
   1316                                      (enhanced
   1317                                       ? ZCL_ENHANCED_VIEW_SCENE_RESPONSE_COMMAND_ID
   1318                                       : ZCL_VIEW_SCENE_RESPONSE_COMMAND_ID),
   1319                                      "uvu",
   1320                                      status,
   1321                                      groupId,
   1322                                      sceneId);
   \                     ??emberAfPluginScenesServerParseViewScene_2: (+1)
   \   00000064   0x2C00             CMP      R4,#+0
   \   00000066   0xBF14             ITE      NE 
   \   00000068   0x2241             MOVNE    R2,#+65
   \   0000006A   0x2201             MOVEQ    R2,#+1
   \   0000006C   0xF8CD 0x9008      STR      R9,[SP, #+8]
   \   00000070   0x9501             STR      R5,[SP, #+4]
   \   00000072   0x9700             STR      R7,[SP, #+0]
   \   00000074   0x.... 0x....      BL       ?Subroutine13
   1323            if (status == EMBER_ZCL_STATUS_SUCCESS) {
   \                     ??CrossCallReturnLabel_43: (+1)
   \   00000078   0x2F00             CMP      R7,#+0
   \   0000007A   0xF040 0x8081      BNE.W    ??CrossCallReturnLabel_80
   1324              if (emberIsZllNetwork()) {
   \   0000007E   0x.... 0x....      BL       emberIsZllNetwork
   \   00000082   0x2800             CMP      R0,#+0
   \   00000084   0xF8BD 0x0012      LDRH     R0,[SP, #+18]
   \   00000088   0xD006             BEQ.N    ??emberAfPluginScenesServerParseViewScene_5
   1325                // The transition time is returned in seconds in the regular version of the
   1326                // command and tenths of a second in the enhanced version.
   1327                emberAfPutInt16uInResp(enhanced
   1328                                       ? entry.transitionTime * 10 + entry.transitionTime100ms
   1329                                       : entry.transitionTime);
   \   0000008A   0xB124             CBZ.N    R4,??emberAfPluginScenesServerParseViewScene_6
   \   0000008C   0xF89D 0x2014      LDRB     R2,[SP, #+20]
   \   00000090   0x210A             MOVS     R1,#+10
   \   00000092   0xFB01 0x2000      MLA      R0,R1,R0,R2
   \                     ??emberAfPluginScenesServerParseViewScene_6: (+1)
   \   00000096   0xB280             UXTH     R0,R0
   1330              } else {
   1331                emberAfPutInt16uInResp(entry.transitionTime);
   \                     ??emberAfPluginScenesServerParseViewScene_5: (+1)
   \   00000098   0x.... 0x....      BL       emberAfPutInt16uInResp
   1332              }
   1333          #ifdef EMBER_AF_PLUGIN_SCENES_NAME_SUPPORT
   1334              emberAfPutStringInResp(entry.name);
   1335          #else
   1336              emberAfPutInt8uInResp(0); // name length
   \   0000009C   0x2000             MOVS     R0,#+0
   \   0000009E   0x.... 0x....      BL       emberAfPutInt8uInResp
   1337          #endif
   1338          #ifdef ZCL_USING_ON_OFF_CLUSTER_SERVER
   1339              if (entry.hasOnOffValue) {
   \   000000A2   0xF89D 0x0015      LDRB     R0,[SP, #+21]
   \   000000A6   0xB148             CBZ.N    R0,??emberAfPluginScenesServerParseViewScene_7
   1340                emberAfPutInt16uInResp(ZCL_ON_OFF_CLUSTER_ID);
   \   000000A8   0x2006             MOVS     R0,#+6
   \   000000AA   0x.... 0x....      BL       emberAfPutInt16uInResp
   1341                emberAfPutInt8uInResp(1); // length
   \   000000AE   0x2001             MOVS     R0,#+1
   \   000000B0   0x.... 0x....      BL       emberAfPutInt8uInResp
   1342                emberAfPutInt8uInResp(entry.onOffValue);
   \   000000B4   0xF89D 0x0016      LDRB     R0,[SP, #+22]
   \   000000B8   0x.... 0x....      BL       emberAfPutInt8uInResp
   1343              }
   1344          #endif
   1345          #ifdef ZCL_USING_LEVEL_CONTROL_CLUSTER_SERVER
   1346              if (entry.hasCurrentLevelValue) {
   \                     ??emberAfPluginScenesServerParseViewScene_7: (+1)
   \   000000BC   0xF89D 0x0017      LDRB     R0,[SP, #+23]
   \   000000C0   0xB148             CBZ.N    R0,??emberAfPluginScenesServerParseViewScene_8
   1347                emberAfPutInt16uInResp(ZCL_LEVEL_CONTROL_CLUSTER_ID);
   \   000000C2   0x2008             MOVS     R0,#+8
   \   000000C4   0x.... 0x....      BL       emberAfPutInt16uInResp
   1348                emberAfPutInt8uInResp(1); // length
   \   000000C8   0x2001             MOVS     R0,#+1
   \   000000CA   0x.... 0x....      BL       emberAfPutInt8uInResp
   1349                emberAfPutInt8uInResp(entry.currentLevelValue);
   \   000000CE   0xF89D 0x0018      LDRB     R0,[SP, #+24]
   \   000000D2   0x.... 0x....      BL       emberAfPutInt8uInResp
   1350              }
   1351          #endif
   1352          #ifdef ZCL_USING_THERMOSTAT_CLUSTER_SERVER
   1353              if (entry.hasOccupiedCoolingSetpointValue) {
   1354                int8u *length;
   1355                emberAfPutInt16uInResp(ZCL_THERMOSTAT_CLUSTER_ID);
   1356                length = &appResponseData[appResponseLength];
   1357                emberAfPutInt8uInResp(0); // temporary length
   1358                emberAfPutInt16uInResp(entry.occupiedCoolingSetpointValue);
   1359                *length += 2;
   1360                if (entry.hasOccupiedHeatingSetpointValue) {
   1361                  emberAfPutInt16uInResp(entry.occupiedHeatingSetpointValue);
   1362                  *length += 2;
   1363                  if (entry.hasSystemModeValue) {
   1364                    emberAfPutInt8uInResp(entry.systemModeValue);
   1365                    (*length)++;
   1366                  }
   1367                }
   1368              }
   1369          #endif
   1370          #ifdef ZCL_USING_COLOR_CONTROL_CLUSTER_SERVER
   1371              if (entry.hasCurrentXValue) {
   \                     ??emberAfPluginScenesServerParseViewScene_8: (+1)
   \   000000D6   0xF89D 0x0019      LDRB     R0,[SP, #+25]
   \   000000DA   0x2800             CMP      R0,#+0
   \   000000DC   0xD050             BEQ.N    ??CrossCallReturnLabel_80
   1372                int8u *length;
   1373                emberAfPutInt16uInResp(ZCL_COLOR_CONTROL_CLUSTER_ID);
   \   000000DE   0xF44F 0x7040      MOV      R0,#+768
   \   000000E2   0x.... 0x....      BL       emberAfPutInt16uInResp
   1374                length = &appResponseData[appResponseLength];
   \   000000E6   0x....             LDR.N    R1,??DataTable37_3
   \   000000E8   0x....             LDR.N    R0,??DataTable37_4
   \   000000EA   0x8809             LDRH     R1,[R1, #+0]
   \   000000EC   0x180D             ADDS     R5,R1,R0
   1375                emberAfPutInt8uInResp(0); // temporary length
   \   000000EE   0x2000             MOVS     R0,#+0
   \   000000F0   0x.... 0x....      BL       emberAfPutInt8uInResp
   1376                emberAfPutInt16uInResp(entry.currentXValue);
   \   000000F4   0xF8BD 0x001A      LDRH     R0,[SP, #+26]
   \   000000F8   0x.... 0x....      BL       emberAfPutInt16uInResp
   1377                *length += 2;
   \   000000FC   0x.... 0x....      BL       ?Subroutine24
   1378                if (entry.hasCurrentYValue) {
   \                     ??CrossCallReturnLabel_77: (+1)
   \   00000100   0xF89D 0x001C      LDRB     R0,[SP, #+28]
   \   00000104   0x2800             CMP      R0,#+0
   \   00000106   0xD03B             BEQ.N    ??CrossCallReturnLabel_80
   1379                  emberAfPutInt16uInResp(entry.currentYValue);
   \   00000108   0xF8BD 0x001E      LDRH     R0,[SP, #+30]
   \   0000010C   0x.... 0x....      BL       emberAfPutInt16uInResp
   1380                  *length += 2;
   \   00000110   0x.... 0x....      BL       ?Subroutine24
   1381                  if (emberIsZllNetwork() && enhanced) {
   \                     ??CrossCallReturnLabel_78: (+1)
   \   00000114   0x.... 0x....      BL       emberIsZllNetwork
   \   00000118   0x2800             CMP      R0,#+0
   \   0000011A   0xBF18             IT       NE 
   \   0000011C   0x2C00             CMPNE    R4,#+0
   \   0000011E   0xD02F             BEQ.N    ??CrossCallReturnLabel_80
   1382                    if (entry.hasEnhancedCurrentHueValue) {
   \   00000120   0xF89D 0x0020      LDRB     R0,[SP, #+32]
   \   00000124   0xB360             CBZ.N    R0,??CrossCallReturnLabel_80
   1383                      emberAfPutInt16uInResp(entry.enhancedCurrentHueValue);
   \   00000126   0xF8BD 0x0022      LDRH     R0,[SP, #+34]
   \   0000012A   0x.... 0x....      BL       emberAfPutInt16uInResp
   1384                      *length += 2;
   \   0000012E   0x.... 0x....      BL       ?Subroutine24
   1385                      if (entry.hasCurrentSaturationValue) {
   \                     ??CrossCallReturnLabel_79: (+1)
   \   00000132   0xF89D 0x0024      LDRB     R0,[SP, #+36]
   \   00000136   0xB318             CBZ.N    R0,??CrossCallReturnLabel_80
   1386                        emberAfPutInt8uInResp(entry.currentSaturationValue);
   \   00000138   0xF89D 0x0025      LDRB     R0,[SP, #+37]
   \   0000013C   0x.... 0x....      BL       emberAfPutInt8uInResp
   1387                        (*length)++;
   \   00000140   0x7828             LDRB     R0,[R5, #+0]
   \   00000142   0x1C40             ADDS     R0,R0,#+1
   \   00000144   0x7028             STRB     R0,[R5, #+0]
   1388                        if (entry.hasColorLoopActiveValue) {
   \   00000146   0xF89D 0x0026      LDRB     R0,[SP, #+38]
   \   0000014A   0xB1C8             CBZ.N    R0,??CrossCallReturnLabel_80
   1389                          emberAfPutInt8uInResp(entry.colorLoopActiveValue);
   \   0000014C   0xF89D 0x0027      LDRB     R0,[SP, #+39]
   \   00000150   0x.... 0x....      BL       emberAfPutInt8uInResp
   1390                          (*length)++;
   \   00000154   0x7828             LDRB     R0,[R5, #+0]
   \   00000156   0x1C40             ADDS     R0,R0,#+1
   \   00000158   0x7028             STRB     R0,[R5, #+0]
   1391                          if (entry.hasColorLoopDirectionValue) {
   \   0000015A   0xF89D 0x0028      LDRB     R0,[SP, #+40]
   \   0000015E   0xB178             CBZ.N    R0,??CrossCallReturnLabel_80
   1392                            emberAfPutInt8uInResp(entry.colorLoopDirectionValue);
   \   00000160   0xF89D 0x0029      LDRB     R0,[SP, #+41]
   \   00000164   0x.... 0x....      BL       emberAfPutInt8uInResp
   1393                            (*length)++;
   \   00000168   0x7828             LDRB     R0,[R5, #+0]
   \   0000016A   0x1C40             ADDS     R0,R0,#+1
   \   0000016C   0x7028             STRB     R0,[R5, #+0]
   1394                            if (entry.hasColorLoopTimeValue) {
   \   0000016E   0xF89D 0x002A      LDRB     R0,[SP, #+42]
   \   00000172   0xB128             CBZ.N    R0,??CrossCallReturnLabel_80
   1395                              emberAfPutInt16uInResp(entry.colorLoopTimeValue);
   \   00000174   0xF8BD 0x002C      LDRH     R0,[SP, #+44]
   \   00000178   0x.... 0x....      BL       emberAfPutInt16uInResp
   1396                              *length += 2;
   \   0000017C   0x.... 0x....      BL       ?Subroutine24
   1397                            }
   1398                          }
   1399                        }
   1400                      }
   1401                    }
   1402                  }
   1403                }
   1404              }
   1405          #endif //ZCL_USING_COLOR_CONTROL_CLUSTER_SERVER
   1406          #ifdef ZCL_USING_DOOR_LOCK_CLUSTER_SERVER
   1407              if (entry.hasLockStateValue) {
   1408                emberAfPutInt16uInResp(ZCL_DOOR_LOCK_CLUSTER_ID);
   1409                emberAfPutInt8uInResp(1); // length
   1410                emberAfPutInt8uInResp(entry.lockStateValue);
   1411              }
   1412          #endif
   1413          #ifdef ZCL_USING_WINDOW_COVERING_CLUSTER_SERVER
   1414              if (entry.hasCurrentPositionLiftPercentageValue) {
   1415                int8u *length;
   1416                emberAfPutInt16uInResp(ZCL_WINDOW_COVERING_CLUSTER_ID);
   1417                length = &appResponseData[appResponseLength];
   1418                emberAfPutInt8uInResp(0); // temporary length
   1419                emberAfPutInt8uInResp(entry.currentPositionLiftPercentageValue);
   1420                (*length)++;
   1421                if (entry.hasCurrentPositionTiltPercentageValue) {
   1422                  emberAfPutInt8uInResp(entry.currentPositionTiltPercentageValue);
   1423                  (*length)++;
   1424                }
   1425              }
   1426          #endif
   1427            }
   1428          
   1429            emberAfSendResponse();
   \                     ??CrossCallReturnLabel_80: (+1)
   \   00000180   0x.... 0x....      BL       emberAfSendResponse
   1430            return TRUE;
   \                     ??emberAfPluginScenesServerParseViewScene_0: (+1)
   \   00000184   0x2001             MOVS     R0,#+1
   \   00000186   0xB00D             ADD      SP,SP,#+52
   \   00000188   0xE8BD 0x83F0      POP      {R4-R9,PC}       ;; return
   1431          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine24: (+1)
   \   00000000   0x7828             LDRB     R0,[R5, #+0]
   \   00000002   0x1C80             ADDS     R0,R0,#+2
   \   00000004   0x7028             STRB     R0,[R5, #+0]
   \   00000006   0x4770             BX       LR
   1432          

   \                                 In section .text, align 2, keep-with-next
   1433          void emberAfScenesClusterRemoveScenesInGroupCallback(int8u endpoint,
   1434                                                                 int16u groupId)
   1435          {
   \                     emberAfScenesClusterRemoveScenesInGroupCallback: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xB08A             SUB      SP,SP,#+40
   \   00000006   0x4604             MOV      R4,R0
   \   00000008   0x4688             MOV      R8,R1
   1436            int8u i;
   1437            for (i = 0; i < EMBER_AF_PLUGIN_SCENES_TABLE_SIZE; i++) {
   \   0000000A   0x2600             MOVS     R6,#+0
   \   0000000C   0x....             LDR.N    R7,??DataTable37_1
   \   0000000E   0x....             LDR.N    R5,??DataTable37
   1438              EmberAfSceneTableEntry entry;
   1439              emberAfPluginScenesServerRetrieveSceneEntry(entry, i);
   \                     ??emberAfScenesClusterRemoveScenesInGroupCallba_0: (+1)
   \   00000010   0x2322             MOVS     R3,#+34
   \   00000012   0x4632             MOV      R2,R6
   \   00000014   0x.... 0x....      BL       ??Subroutine15_0
   1440              if (entry.endpoint == endpoint &&
   1441                  entry.groupId == groupId) {
   \                     ??CrossCallReturnLabel_49: (+1)
   \   00000018   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000001C   0x42A0             CMP      R0,R4
   \   0000001E   0xBF04             ITT      EQ 
   \   00000020   0xF8BD 0x0002      LDRHEQ   R0,[SP, #+2]
   \   00000024   0x4540             CMPEQ    R0,R8
   \   00000026   0xD117             BNE.N    ??emberAfScenesClusterRemoveScenesInGroupCallba_1
   1442                entry.groupId = ZCL_SCENES_GLOBAL_SCENE_GROUP_ID;
   \   00000028   0x2000             MOVS     R0,#+0
   \   0000002A   0xF8AD 0x0002      STRH     R0,[SP, #+2]
   1443                entry.endpoint = EMBER_AF_SCENE_TABLE_UNUSED_ENDPOINT_ID;
   \   0000002E   0xF88D 0x0000      STRB     R0,[SP, #+0]
   1444                emberAfPluginScenesServerSaveSceneEntry(entry, i);
   \   00000032   0x2322             MOVS     R3,#+34
   \   00000034   0xAA00             ADD      R2,SP,#+0
   \   00000036   0x4631             MOV      R1,R6
   \   00000038   0x.... 0x....      BL       ?Subroutine22
   1445                emberAfPluginScenesServerDecrNumSceneEntriesInUse();
   \                     ??CrossCallReturnLabel_70: (+1)
   \   0000003C   0x.... 0x....      BL       ?Subroutine8
   \                     ??CrossCallReturnLabel_26: (+1)
   \   00000040   0x7828             LDRB     R0,[R5, #+0]
   \   00000042   0x1E40             SUBS     R0,R0,#+1
   \   00000044   0x.... 0x....      BL       ?Subroutine11
   1446                emberAfScenesSetSceneCountAttribute(emberAfCurrentEndpoint(),
   1447                                                    emberAfPluginScenesServerNumSceneEntriesInUse());
   \                     ??CrossCallReturnLabel_35: (+1)
   \   00000048   0x.... 0x....      BL       ?Subroutine8
   1448              }
   1449            }
   \                     ??CrossCallReturnLabel_25: (+1)
   \   0000004C   0x6838             LDR      R0,[R7, #+0]
   \   0000004E   0x6800             LDR      R0,[R0, #+0]
   \   00000050   0x7829             LDRB     R1,[R5, #+0]
   \   00000052   0x7940             LDRB     R0,[R0, #+5]
   \   00000054   0x.... 0x....      BL       emberAfScenesSetSceneCountAttribute
   \                     ??emberAfScenesClusterRemoveScenesInGroupCallba_1: (+1)
   \   00000058   0x1C76             ADDS     R6,R6,#+1
   \   0000005A   0x2E14             CMP      R6,#+20
   \   0000005C   0xDBD8             BLT.N    ??emberAfScenesClusterRemoveScenesInGroupCallba_0
   1450          }
   \   0000005E   0x.... 0x....      B.W      ??Subroutine1_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable30:
   \   00000000   0x2E 0x25          DC8      ".%d"
   \              0x64 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable32:
   \   00000000   0x00 0x00          DC8      "",0x0,0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable32_1:
   \   00000000   0x75 0x76          DC8      "uvu"
   \              0x75 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable33:
   \   00000000   0x75 0x76          DC8      0x75, 0x76, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable33_1:
   \   00000000   0x75 0x75          DC8      "uuv"
   \              0x76 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable37:
   \   00000000   0x........         DC32     emberAfPluginScenesServerEntriesInUse

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable37_1:
   \   00000000   0x........         DC32     emAfCurrentCommand

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable37_2:
   \   00000000   0x........         DC32     emAfEndpoints

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable37_3:
   \   00000000   0x........         DC32     appResponseLength

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable37_4:
   \   00000000   0x........         DC32     appResponseData

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_7:
   \   00000000   0x2E 0x25          DC8 ".%d"
   \              0x64 0x00    

   \                                 In section .rodata, align 1, keep-with-next
   \                     ?_12:
   \   00000000   0x00               DC8 ""

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x73 0x63          DC8 "scene count"
   \              0x65 0x6E    
   \              0x65 0x20    
   \              0x63 0x6F    
   \              0x75 0x6E    
   \              0x74 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_1:
   \   00000000   0x63 0x75          DC8 "current scene"
   \              0x72 0x72    
   \              0x65 0x6E    
   \              0x74 0x20    
   \              0x73 0x63    
   \              0x65 0x6E    
   \              0x65 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_2:
   \   00000000   0x63 0x75          DC8 "current group"
   \              0x72 0x72    
   \              0x65 0x6E    
   \              0x74 0x20    
   \              0x67 0x72    
   \              0x6F 0x75    
   \              0x70 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_3:
   \   00000000   0x73 0x63          DC8 "scene valid"
   \              0x65 0x6E    
   \              0x65 0x20    
   \              0x76 0x61    
   \              0x6C 0x69    
   \              0x64 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_4:
   \   00000000   0x75 0x73          DC8 "using 0x%x out of 0x%x table slots"
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x30 0x78    
   \              0x25 0x78    
   \              0x20 0x6F    
   \              0x75 0x74    
   \              0x20 0x6F    
   \              0x66 0x20    
   \              0x30 0x78    
   \              0x25 0x78    
   \              0x20 0x74    
   \              0x61 0x62    
   \              0x6C 0x65    
   \              0x20 0x73    
   \              0x6C 0x6F    
   \              0x74 0x73    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_5:
   \   00000000   0x25 0x78          DC8 "%x: "
   \              0x3A 0x20    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_6:
   \   00000000   0x65 0x70          DC8 "ep %x grp %2x scene %x tt %d"
   \              0x20 0x25    
   \              0x78 0x20    
   \              0x67 0x72    
   \              0x70 0x20    
   \              0x25 0x32    
   \              0x78 0x20    
   \              0x73 0x63    
   \              0x65 0x6E    
   \              0x65 0x20    
   \              0x25 0x78    
   \              0x20 0x74    
   \              0x74 0x20    
   \              0x25 0x64    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_8:
   \   00000000   0x20 0x6F          DC8 " on/off %x"
   \              0x6E 0x2F    
   \              0x6F 0x66    
   \              0x66 0x20    
   \              0x25 0x78    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_9:
   \   00000000   0x20 0x6C          DC8 " lvl %x"
   \              0x76 0x6C    
   \              0x20 0x25    
   \              0x78 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_10:
   \   00000000   0x20 0x63          DC8 " color %2x %2x"
   \              0x6F 0x6C    
   \              0x6F 0x72    
   \              0x20 0x25    
   \              0x32 0x78    
   \              0x20 0x25    
   \              0x32 0x78    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_11:
   \   00000000   0x20 0x25          DC8 " %2x %x %x %x %2x"
   \              0x32 0x78    
   \              0x20 0x25    
   \              0x78 0x20    
   \              0x25 0x78    
   \              0x20 0x25    
   \              0x78 0x20    
   \              0x25 0x32    
   \              0x78 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_16:
   \   00000000   0x6F 0x6E          DC8 "on/off"
   \              0x2F 0x6F    
   \              0x66 0x66    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_17:
   \   00000000   0x63 0x75          DC8 "current level"
   \              0x72 0x72    
   \              0x65 0x6E    
   \              0x74 0x20    
   \              0x6C 0x65    
   \              0x76 0x65    
   \              0x6C 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_18:
   \   00000000   0x63 0x75          DC8 "current x"
   \              0x72 0x72    
   \              0x65 0x6E    
   \              0x74 0x20    
   \              0x78 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_19:
   \   00000000   0x63 0x75          DC8 "current y"
   \              0x72 0x72    
   \              0x65 0x6E    
   \              0x74 0x20    
   \              0x79 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_20:
   \   00000000   0x65 0x6E          DC8 "enhanced current hue"
   \              0x68 0x61    
   \              0x6E 0x63    
   \              0x65 0x64    
   \              0x20 0x63    
   \              0x75 0x72    
   \              0x72 0x65    
   \              0x6E 0x74    
   \              0x20 0x68    
   \              0x75 0x65    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_21:
   \   00000000   0x63 0x75          DC8 "current saturation"
   \              0x72 0x72    
   \              0x65 0x6E    
   \              0x74 0x20    
   \              0x73 0x61    
   \              0x74 0x75    
   \              0x72 0x61    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_22:
   \   00000000   0x63 0x6F          DC8 "color loop active"
   \              0x6C 0x6F    
   \              0x72 0x20    
   \              0x6C 0x6F    
   \              0x6F 0x70    
   \              0x20 0x61    
   \              0x63 0x74    
   \              0x69 0x76    
   \              0x65 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_23:
   \   00000000   0x63 0x6F          DC8 "color loop direction"
   \              0x6C 0x6F    
   \              0x72 0x20    
   \              0x6C 0x6F    
   \              0x6F 0x70    
   \              0x20 0x64    
   \              0x69 0x72    
   \              0x65 0x63    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_24:
   \   00000000   0x63 0x6F          DC8 "color loop time"
   \              0x6C 0x6F    
   \              0x72 0x20    
   \              0x6C 0x6F    
   \              0x6F 0x70    
   \              0x20 0x74    
   \              0x69 0x6D    
   \              0x65 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_13:
   \   00000000   0x75 0x76          DC8 "uvu"
   \              0x75 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_14:
   \   00000000   0x75 0x76          DC8 "uv"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_15:
   \   00000000   0x75 0x75          DC8 "uuv"
   \              0x76 0x00    

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      88   emAfPluginScenesServerPrintInfo
        88   -> emberAfPrint
        88   -> emberAfPrintln
        88   -> emberIsZllNetwork
        88   -> halInternalGetTokenData
      96   emberAfPluginScenesServerParseAddScene
        96   -> emberAfFillExternalBuffer
        96   -> emberAfGetInt16u
        96   -> emberAfGroupsClusterEndpointInGroupCallback
        96   -> emberAfScenesSetSceneCountAttribute
        96   -> emberAfSendResponse
        96   -> emberAfStringLength
        96   -> emberIsZllNetwork
        96   -> halInternalGetTokenData
        96   -> halInternalSetTokenData
      80   emberAfPluginScenesServerParseViewScene
        80   -> emberAfFillExternalBuffer
        80   -> emberAfGroupsClusterEndpointInGroupCallback
        80   -> emberAfPutInt16uInResp
        80   -> emberAfPutInt8uInResp
        80   -> emberAfSendResponse
        80   -> emberIsZllNetwork
        80   -> halInternalGetTokenData
      16   emberAfScenesClusterAddSceneCallback
        16   -> emberAfPluginScenesServerParseAddScene
      56   emberAfScenesClusterClearSceneTableCallback
        56   -> emberAfEndpointCount
        56   -> emberAfEndpointFromIndex
        56   -> emberAfNetworkIndexFromEndpoint
        56   -> emberAfScenesSetSceneCountAttribute
        56   -> emberGetCurrentNetwork
        56   -> halInternalGetTokenData
        56   -> halInternalSetTokenData
      80   emberAfScenesClusterGetSceneMembershipCallback
        80   -> emberAfFillExternalBuffer
        80   -> emberAfGroupsClusterEndpointInGroupCallback
        80   -> emberAfPutInt8uInResp
        80   -> emberAfSendResponse
        80   -> emberIsZllNetwork
        80   -> halInternalGetTokenData
      16   emberAfScenesClusterMakeInvalidCallback
        16   -> writeServerAttribute
      72   emberAfScenesClusterRecallSavedSceneCallback
        72   -> emAfPluginLevelControlClusterOnOffEffectHandler
        72   -> emberAfColorControlClusterMoveToColorCallback
        72   -> emberAfGroupsClusterEndpointInGroupCallback
        72   -> emberAfOnOffClusterSetValueCallback
        72   -> emberAfReadAttribute
        72   -> emberAfScenesMakeValid
        72   -> emberIsZllNetwork
        72   -> halInternalGetTokenData
        72   -> writeServerAttribute
       8   emberAfScenesClusterRecallSceneCallback
         8   -> emberAfScenesClusterRecallSavedSceneCallback
         8   -> emberAfSendImmediateDefaultResponse
      64   emberAfScenesClusterRemoveAllScenesCallback
        64   -> emberAfFillExternalBuffer
        64   -> emberAfGroupsClusterEndpointInGroupCallback
        64   -> emberAfScenesSetSceneCountAttribute
        64   -> emberAfSendResponse
        64   -> halInternalGetTokenData
        64   -> halInternalSetTokenData
      64   emberAfScenesClusterRemoveSceneCallback
        64   -> emberAfFillExternalBuffer
        64   -> emberAfGroupsClusterEndpointInGroupCallback
        64   -> emberAfScenesSetSceneCountAttribute
        64   -> emberAfSendResponse
        64   -> halInternalGetTokenData
        64   -> halInternalSetTokenData
      64   emberAfScenesClusterRemoveScenesInGroupCallback
        64   -> emberAfScenesSetSceneCountAttribute
        64   -> halInternalGetTokenData
        64   -> halInternalSetTokenData
      16   emberAfScenesClusterServerInitCallback
         0   -> emberAfScenesSetSceneCountAttribute
        16   -> halInternalGetTokenData
      72   emberAfScenesClusterStoreCurrentSceneCallback
        72   -> emberAfGroupsClusterEndpointInGroupCallback
        72   -> emberAfScenesMakeValid
        72   -> emberAfScenesSetSceneCountAttribute
        72   -> emberIsZllNetwork
        72   -> halInternalGetTokenData
        72   -> halInternalSetTokenData
        72   -> readServerAttribute
      32   emberAfScenesClusterStoreSceneCallback
        32   -> emberAfFillExternalBuffer
        32   -> emberAfScenesClusterStoreCurrentSceneCallback
        32   -> emberAfSendResponse
       0   emberAfScenesClusterViewSceneCallback
         0   -> emberAfPluginScenesServerParseViewScene
      32   emberAfScenesMakeValid
        32   -> writeServerAttribute
      16   emberAfScenesSetSceneCountAttribute
        16   -> writeServerAttribute
      24   readServerAttribute
        24   -> emberAfContainsServer
        24   -> emberAfReadServerAttribute
       8   writeServerAttribute
         8   -> emberAfWriteServerAttribute


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable30
       4  ??DataTable32
       4  ??DataTable32_1
       4  ??DataTable33
       4  ??DataTable33_1
       4  ??DataTable37
       4  ??DataTable37_1
       4  ??DataTable37_2
       4  ??DataTable37_3
       4  ??DataTable37_4
       8  ?Subroutine0
       8  ?Subroutine1
      18  ?Subroutine10
      14  ?Subroutine11
      10  ?Subroutine12
      10  ?Subroutine13
       6  ?Subroutine14
      12  ?Subroutine15
       8  ?Subroutine16
      18  ?Subroutine17
      12  ?Subroutine18
      10  ?Subroutine19
       8  ?Subroutine2
      10  ?Subroutine20
      14  ?Subroutine21
       6  ?Subroutine22
      10  ?Subroutine23
       8  ?Subroutine24
       8  ?Subroutine3
      12  ?Subroutine4
      12  ?Subroutine5
      12  ?Subroutine6
      12  ?Subroutine7
      12  ?Subroutine8
      12  ?Subroutine9
      12  ?_0
      16  ?_1
      16  ?_10
      20  ?_11
       1  ?_12
       4  ?_13
       4  ?_14
       4  ?_15
       8  ?_16
      16  ?_17
      12  ?_18
      12  ?_19
      16  ?_2
      24  ?_20
      20  ?_21
      20  ?_22
      24  ?_23
      16  ?_24
      12  ?_3
      36  ?_4
       8  ?_5
      32  ?_6
       4  ?_7
      12  ?_8
       8  ?_9
     228  emAfPluginScenesServerPrintInfo
       1  emberAfPluginScenesServerEntriesInUse
     692  emberAfPluginScenesServerParseAddScene
     396  emberAfPluginScenesServerParseViewScene
      26  emberAfScenesClusterAddSceneCallback
     126  emberAfScenesClusterClearSceneTableCallback
     192  emberAfScenesClusterGetSceneMembershipCallback
      22  emberAfScenesClusterMakeInvalidCallback
     362  emberAfScenesClusterRecallSavedSceneCallback
      28  emberAfScenesClusterRecallSceneCallback
     122  emberAfScenesClusterRemoveAllScenesCallback
     124  emberAfScenesClusterRemoveSceneCallback
      98  emberAfScenesClusterRemoveScenesInGroupCallback
      20  emberAfScenesClusterServerInitCallback
     418  emberAfScenesClusterStoreCurrentSceneCallback
      62  emberAfScenesClusterStoreSceneCallback
      14  emberAfScenesClusterViewSceneCallback
      80  emberAfScenesMakeValid
      20  emberAfScenesSetSceneCountAttribute
      40  readServerAttribute
      14  writeServerAttribute

 
     1 byte  in section .bss
    17 bytes in section .rodata
 3 734 bytes in section .text
 
 3 734 bytes of CODE  memory
    17 bytes of CONST memory
     1 byte  of DATA  memory

Errors: none
Warnings: 1
