###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        01/Dec/2016  11:42:27
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\AONE_Zigbee\EmberZNet5.3.0-GA\em35x\app\util\common\form-and-join.c
#    Command line =  
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\AONE_Zigbee\EmberZNet5.3.0-GA\em35x\app\util\common\form-and-join.c"
#        -D
#        "GENERATED_TOKEN_HEADER=\"app/builder/Aurora_dimmer/Aurora_dimmer_tokens.h\""
#        -D "ZA_GENERATED_HEADER=\"app/builder/Aurora_dimmer/Aurora_dimmer.h\""
#        -D APP_BTL -D
#        "BOARD_HEADER=\"../../../AONE_Zigbee/EmberZNet5.3.0-GA/em35x/app/builder/Aurora_dimmer/Aurora_dimmer_board.h\""
#        -D "PLATFORM_HEADER=\"hal/micro/cortexm3/compiler/iar.h\"" -D CORTEXM3
#        -D CORTEXM3_EMBER_MICRO -D CORTEXM3_EM357 -D PHY_EM3XX -D
#        "APPLICATION_TOKEN_HEADER=\"app/framework/util/tokens.h\"" -D
#        "CONFIGURATION_HEADER=\"app/framework/util/config.h\"" -D
#        "ATTRIBUTE_STORAGE_CONFIGURATION=\"app/builder/Aurora_dimmer/Aurora_dimmer_endpoint_config.h\""
#        -D "__SOURCEFILE__=\"form-and-join.c\"" -lC
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\AONE_Zigbee\EmberZNet5.3.0-GA\em35x\build\Aurora_dimmer\"
#        --diag_suppress Pa050 -o
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\AONE_Zigbee\EmberZNet5.3.0-GA\em35x\build\Aurora_dimmer\"
#        --debug --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\AONE_Zigbee\EmberZNet5.3.0-GA\em35x\app\util\common\" -I
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\AONE_Zigbee\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\"
#        -I "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\AONE_Zigbee\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\"
#        -I "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\AONE_Zigbee\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\app\framework\include\"
#        -I "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\AONE_Zigbee\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\..\..\..\16.09.23
#        Fixedonoff\EmberZNet5.3.0-GA\em35x\" -I
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\AONE_Zigbee\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\..\..\..\16.09.23
#        Fixedonoff\EmberZNet5.3.0-GA\em35x\stack\" -I
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\AONE_Zigbee\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\..\..\..\16.09.23
#        Fixedonoff\EmberZNet5.3.0-GA\em35x\hal\" -I
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\AONE_Zigbee\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\..\..\..\16.09.23
#        Fixedonoff\EmberZNet5.3.0-GA\em35x\hal\..\" -Ohz --use_c++_inline
#    List file    =  
#        C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\AONE_Zigbee\EmberZNet5.3.0-GA\em35x\build\Aurora_dimmer\form-and-join.lst
#    Object file  =  
#        C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\AONE_Zigbee\EmberZNet5.3.0-GA\em35x\build\Aurora_dimmer\form-and-join.o
#
###############################################################################

C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH ETRX357\AONE_Zigbee\EmberZNet5.3.0-GA\em35x\app\util\common\form-and-join.c
      1          // *****************************************************************************
      2          // * form-and-join.c
      3          // * 
      4          // * Utilities for forming and joining networks.
      5          // * See form-and-join.h for a description of the exported interface.
      6          // *
      7          // * Copyright 2008 by Ember Corporation. All rights reserved.              
      8          // **************************************************************************80*
      9          
     10          #include PLATFORM_HEADER     // Micro and compiler specific typedefs and macros
     11          
     12          #define __FORM_AND_JOIN_C__
     13          
     14          #include "stack/include/ember-types.h"
     15          #include "stack/include/error.h"
     16          #include "hal/hal.h" 
     17          #include "app/util/serial/serial.h"
     18          #include "form-and-join.h"
     19          #include "form-and-join-adapter.h"
     20          
     21          // We can't include ember.h or ezsp.h from this file since it is used
     22          // for both host and node-size libraries.  However the emberStartScan()
     23          // API is identical in both.
     24          extern EmberStatus emberStartScan(int8u scanType, 
     25                                            int32u channelMask, 
     26                                            int8u duraiton);
     27          
     28          enum {
     29            FORM_AND_JOIN_NOT_SCANNING,
     30            FORM_AND_JOIN_NEXT_NETWORK,
     31            FORM_AND_JOIN_ENERGY_SCAN,      
     32            FORM_AND_JOIN_PAN_ID_SCAN,      
     33            FORM_AND_JOIN_JOINABLE_SCAN,    
     34            FORM_AND_JOIN_DUAL_CHANNEL_SCAN 
     35          };
     36          

   \                                 In section .bss, align 4
     37          static int8u formAndJoinScanType = FORM_AND_JOIN_NOT_SCANNING;
   \                     formAndJoinScanType:
   \   00000000                      DS8 1
   \   00000001                      DS8 1
   \   00000002                      DS8 1
   \   00000003                      DS8 1
   \   00000004                      DS8 4
   \   00000008                      DS8 4
   \   0000000C                      DS8 8
     38          
     39          static int8u *dataContents;
     40          #define panIdCandidates ((int16u *) dataContents)
     41          #define channelEnergies (dataContents)
     42          
     43          static int8u extendedPanIdCache[8];
     44          static int32u channelMaskCache;
     45          static int8u channelCache;
     46          static boolean ignoreExtendedPanId;
     47          static int8u networkCount;  // The number of NetworkInfo records.
     48          
     49          // The dual channel code is only present on the EM250 and EM260.

   \                                 In section .data, align 1
     50          boolean emberEnableDualChannelScan = TRUE;
   \                     emberEnableDualChannelScan:
   \   00000000   0x01               DC8 1
     51          
     52          // The minimum significant difference between energy scan results.
     53          // Results that differ by less than this are treated as identical.
     54          #define ENERGY_SCAN_FUZZ 25
     55          
     56          #define NUM_PAN_ID_CANDIDATES 16  // Must fit into one packet buffer on the node
     57          
     58          #define INVALID_PAN_ID 0xFFFF
     59          
     60          // ZigBee specifies that active scans have a duration of 3 (138 msec).
     61          // See documentation for emberStartScan in include/network-formation.h
     62          // for more info on duration values.
     63          #define ACTIVE_SCAN_DURATION 3
     64          
     65          //------------------------------------------------------------------------------
     66          // Macros for enabling or disabling debug print messages.
     67          // #define SCAN_DEBUG_PRINT_ENABLE
     68          
     69          #ifdef SCAN_DEBUG_PRINT_ENABLE
     70             // define this if printing messages -- note serial port used is 1
     71             #define SCAN_DEBUG_MSG(x,y) emberSerialPrintf(1,x,y); emberSerialWaitSend(1)
     72             #define SCAN_DEBUG(x) emberSerialPrintf(1,x); emberSerialWaitSend(1)
     73          
     74             #define SCAN_DEBUG_XPAN_PRINT(xpan)  \
     75                do {                                     \
     76                       emberSerialPrintf(1, "%x%x%x%x%x%x%x%x", \
     77                          xpan[0], xpan[1], xpan[2], xpan[3], \
     78                          xpan[4], xpan[5], xpan[6], xpan[7]); \
     79                       emberSerialWaitSend(1);  \
     80                   } while (FALSE)
     81          
     82          #elif defined(EMBER_SCRIPTED_TEST) 
     83            void debug(const char* format, ...);
     84            boolean isTestFrameworkDebugOn(void);
     85            #define SCAN_DEBUG_MSG(x,y) debug(x,y)
     86            #define SCAN_DEBUG(x) debug(x )
     87            #define SCAN_DEBUG_XPAN_PRINT(xpan) \
     88                do {                                     \
     89                       debug("%x%x%x%x%x%x%x%x", \
     90                          xpan[0], xpan[1], xpan[2], xpan[3], \
     91                          xpan[4], xpan[5], xpan[6], xpan[7]); \
     92                   } while (FALSE)
     93          
     94          #else
     95             // define this to turn off printing messages
     96             #define SCAN_DEBUG_MSG(x, ...) 
     97             #define SCAN_DEBUG(x) 
     98             #define SCAN_DEBUG_XPAN_PRINT(x) 
     99          #endif
    100          
    101          //------------------------------------------------------------------------------
    102          // Forward declarations for the benefit of the compiler.
    103          
    104          static void saveNetwork(EmberZigbeeNetwork *network, int8u lqi, int8s rssi);
    105          static boolean setup(int8u scanType);
    106          static EmberStatus startScan(EmberNetworkScanType type, int32u mask, int8u duration);
    107          static void startPanIdScan(void);
    108          static boolean isArrayZero(int8u* array, int8u size);
    109          
    110          //------------------------------------------------------------------------------
    111          // Finding unused PAN ids.
    112          

   \                                 In section .text, align 2, keep-with-next
    113          EmberStatus emberScanForUnusedPanId(int32u channelMask, int8u duration)
    114          {
   \                     emberScanForUnusedPanId: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
    115            EmberStatus status = EMBER_ERR_FATAL;
    116            if (setup(FORM_AND_JOIN_ENERGY_SCAN)) {
   \   00000006   0x2002             MOVS     R0,#+2
   \   00000008   0x.... 0x....      BL       setup
   \   0000000C   0x2601             MOVS     R6,#+1
   \   0000000E   0xB158             CBZ.N    R0,??emberScanForUnusedPanId_0
    117              MEMSET(channelEnergies, 0xFF, EMBER_NUM_802_15_4_CHANNELS);
   \   00000010   0x....             LDR.N    R0,??DataTable10
   \   00000012   0x6840             LDR      R0,[R0, #+4]
   \   00000014   0x2210             MOVS     R2,#+16
   \   00000016   0x21FF             MOVS     R1,#+255
   \   00000018   0x.... 0x....      BL       halCommonMemSet
    118              status = startScan(EMBER_ENERGY_SCAN, channelMask, duration);
   \   0000001C   0x462A             MOV      R2,R5
   \   0000001E   0x4621             MOV      R1,R4
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0x.... 0x....      BL       startScan
   \   00000026   0x4606             MOV      R6,R0
    119            }
    120            return status;
   \                     ??emberScanForUnusedPanId_0: (+1)
   \   00000028   0x4630             MOV      R0,R6
   \   0000002A   0xBD70             POP      {R4-R6,PC}       ;; return
    121          }
    122          
    123          // Pick a channel from among those with the lowest energy and then look for
    124          // a PAN ID not in use on that channel.
    125          // 
    126          // The energy scans are not particularly accurate, especially as we don't run
    127          // them for very long, so we add in some slop to the measurements and then pick
    128          // a random channel from the least noisy ones.  This avoids having several
    129          // coordinators pick the same slightly quieter channel.
    130          

   \                                 In section .text, align 2, keep-with-next
    131          static void energyScanComplete(void)
    132          {
   \                     energyScanComplete: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
    133            int8u cutoff = 0xFF;
    134            int8u candidateCount = 0;
    135            int8u channelIndex;
    136            int8u i;
    137          
    138            for (i = 0; i < EMBER_NUM_802_15_4_CHANNELS; i++) {
   \   00000002   0x....             LDR.N    R5,??DataTable10
   \   00000004   0x6869             LDR      R1,[R5, #+4]
   \   00000006   0x24FF             MOVS     R4,#+255
   \   00000008   0x2600             MOVS     R6,#+0
   \   0000000A   0x2000             MOVS     R0,#+0
    139              if (channelEnergies[i] < cutoff - ENERGY_SCAN_FUZZ) {
   \                     ??energyScanComplete_0: (+1)
   \   0000000C   0x5C42             LDRB     R2,[R0, R1]
   \   0000000E   0xF1A4 0x0319      SUB      R3,R4,#+25
   \   00000012   0x429A             CMP      R2,R3
   \   00000014   0xBFBC             ITT      LT 
   \   00000016   0xF102 0x0419      ADDLT    R4,R2,#+25
   \   0000001A   0xB2E4             UXTBLT   R4,R4
    140                cutoff = channelEnergies[i] + ENERGY_SCAN_FUZZ;
    141              }
    142            }
   \   0000001C   0x1C40             ADDS     R0,R0,#+1
   \   0000001E   0x2810             CMP      R0,#+16
   \   00000020   0xDBF4             BLT.N    ??energyScanComplete_0
    143          
    144            // There must be at least one channel,
    145            // so there will be at least one candidate.
    146            for (i = 0; i < EMBER_NUM_802_15_4_CHANNELS; i++) {
   \   00000022   0x2000             MOVS     R0,#+0
    147              if (channelEnergies[i] < cutoff) {
   \                     ??energyScanComplete_1: (+1)
   \   00000024   0x5C42             LDRB     R2,[R0, R1]
   \   00000026   0x42A2             CMP      R2,R4
   \   00000028   0xBFBC             ITT      LT 
   \   0000002A   0x1C76             ADDLT    R6,R6,#+1
   \   0000002C   0xB2F6             UXTBLT   R6,R6
    148                candidateCount += 1;
    149              }
    150            }
   \   0000002E   0x1C40             ADDS     R0,R0,#+1
   \   00000030   0x2810             CMP      R0,#+16
   \   00000032   0xDBF7             BLT.N    ??energyScanComplete_1
    151          
    152            // If for some reason we never got any energy scan results
    153            // then our candidateCount will be 0.  We want to avoid that case and
    154            // bail out (since we will do a divide by 0 below)
    155            if (candidateCount == 0) {
   \   00000034   0x0030             MOVS     R0,R6
   \   00000036   0xD103             BNE.N    ??energyScanComplete_2
    156              emberFormAndJoinCleanup(EMBER_ERR_FATAL);
   \   00000038   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   0000003C   0x2001             MOVS     R0,#+1
   \   0000003E   0x....             B.N      emberFormAndJoinCleanup
    157              return;
    158            }
    159          
    160            channelIndex = halCommonGetRandom() % candidateCount;
   \                     ??energyScanComplete_2: (+1)
   \   00000040   0x.... 0x....      BL       halCommonGetRandom
   \   00000044   0xFB90 0xF1F6      SDIV     R1,R0,R6
   \   00000048   0xFB06 0x0111      MLS      R1,R6,R1,R0
   \   0000004C   0xB2C9             UXTB     R1,R1
    161          
    162            for (i = 0; i < EMBER_NUM_802_15_4_CHANNELS; i++) {
   \   0000004E   0x2000             MOVS     R0,#+0
    163              if (channelEnergies[i] < cutoff) {
   \                     ??energyScanComplete_3: (+1)
   \   00000050   0x686A             LDR      R2,[R5, #+4]
   \   00000052   0x5C82             LDRB     R2,[R0, R2]
   \   00000054   0x42A2             CMP      R2,R4
   \   00000056   0xDA06             BGE.N    ??energyScanComplete_4
    164                if (channelIndex == 0) {
   \   00000058   0x000A             MOVS     R2,R1
   \   0000005A   0xD102             BNE.N    ??energyScanComplete_5
    165                  channelCache = EMBER_MIN_802_15_4_CHANNEL_NUMBER + i;
   \   0000005C   0x300B             ADDS     R0,R0,#+11
   \   0000005E   0x7068             STRB     R0,[R5, #+1]
    166                  break;
   \   00000060   0xE005             B.N      ??energyScanComplete_6
    167                }
    168                channelIndex -= 1;
   \                     ??energyScanComplete_5: (+1)
   \   00000062   0x1E49             SUBS     R1,R1,#+1
   \   00000064   0xB2C9             UXTB     R1,R1
    169              }
    170            }
   \                     ??energyScanComplete_4: (+1)
   \   00000066   0x1C40             ADDS     R0,R0,#+1
   \   00000068   0xB2C0             UXTB     R0,R0
   \   0000006A   0x2810             CMP      R0,#+16
   \   0000006C   0xDBF0             BLT.N    ??energyScanComplete_3
    171          
    172            startPanIdScan();
   \                     ??energyScanComplete_6: (+1)
   \   0000006E   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   00000072                      REQUIRE startPanIdScan
   \   00000072                      ;; // Fall through to label startPanIdScan
    173          }
    174          
    175          // PAN IDs can be 0..0xFFFE.  We pick some trial candidates and then do a scan
    176          // to find one that is not in use.
    177          

   \                                 In section .text, align 2, keep-with-next
    178          static void startPanIdScan(void)
    179          {
   \                     startPanIdScan: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    180            int8u i;
    181          
    182            for (i = 0; i < NUM_PAN_ID_CANDIDATES;) {
   \   00000002   0x2400             MOVS     R4,#+0
    183              int16u panId = halCommonGetRandom() & 0xFFFF;
   \                     ??startPanIdScan_0: (+1)
   \   00000004   0x.... 0x....      BL       halCommonGetRandom
    184              if (panId != 0xFFFF) {
   \   00000008   0xF64F 0x72FF      MOVW     R2,#+65535
   \   0000000C   0x4290             CMP      R0,R2
   \   0000000E   0x....             LDR.N    R1,??DataTable10
   \   00000010   0xD003             BEQ.N    ??startPanIdScan_1
    185                SCAN_DEBUG_MSG("panIdCandidate: 0x%2X\n", panId);
    186                panIdCandidates[i] = panId;
   \   00000012   0x684A             LDR      R2,[R1, #+4]
   \   00000014   0xF822 0x0014      STRH     R0,[R2, R4, LSL #+1]
    187                i++;
   \   00000018   0x1C64             ADDS     R4,R4,#+1
    188              }
    189            }
   \                     ??startPanIdScan_1: (+1)
   \   0000001A   0x2C10             CMP      R4,#+16
   \   0000001C   0xDBF2             BLT.N    ??startPanIdScan_0
    190          
    191            formAndJoinScanType = FORM_AND_JOIN_PAN_ID_SCAN;
   \   0000001E   0x2003             MOVS     R0,#+3
   \   00000020   0x7008             STRB     R0,[R1, #+0]
    192            startScan(EMBER_ACTIVE_SCAN, BIT32(channelCache), ACTIVE_SCAN_DURATION);
   \   00000022   0x7849             LDRB     R1,[R1, #+1]
   \   00000024   0xE8BD 0x4010      POP      {R4,LR}
   \   00000028   0x2001             MOVS     R0,#+1
   \   0000002A   0x2203             MOVS     R2,#+3
   \   0000002C   0xFA00 0xF101      LSL      R1,R0,R1
   \   00000030   0x....             B.N      startScan
    193          }
    194          
    195          // Form a network using one of the unused PAN IDs.  If we got unlucky we
    196          // pick some more and try again.
    197          
    198          static void panIdScanComplete(void)
    199          {
    200            int8u i;
    201          
    202            for (i = 0; i < NUM_PAN_ID_CANDIDATES; i++) {
    203              EmberStatus status = EMBER_SUCCESS;
    204              if (panIdCandidates[i] != 0xFFFF) {
    205                emberUnusedPanIdFoundHandler(panIdCandidates[i], channelCache);
    206                emberFormAndJoinCleanup(status);
    207                return;
    208              }
    209            }
    210          
    211            // XXX: Do we care this could keep happening forever?
    212            // In practice there couldn't be as many PAN IDs heard that
    213            // conflict with ALL our randomly selected set of candidate PANs.
    214            // But in theory we could get the same random set of numbers
    215            // (more likely due to a bug) and we could hear the same set of
    216            // PAN IDs that conflict with our random set.
    217          
    218            startPanIdScan();     // Start over with new candidates.
    219          }
    220          
    221          //------------------------------------------------------------------------------
    222          // Finding joinable networks
    223          

   \                                 In section .text, align 2, keep-with-next
    224          EmberStatus emberScanForJoinableNetwork(int32u channelMask, int8u* extendedPanId)
    225          {
   \                     emberScanForJoinableNetwork: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
    226            if (! setup(FORM_AND_JOIN_NEXT_NETWORK)) {
   \   00000006   0x2001             MOVS     R0,#+1
   \   00000008   0x.... 0x....      BL       setup
   \   0000000C   0xB908             CBNZ.N   R0,??emberScanForJoinableNetwork_0
    227              return EMBER_INVALID_CALL;
   \   0000000E   0x2070             MOVS     R0,#+112
   \   00000010   0xBD32             POP      {R1,R4,R5,PC}
    228            }
    229            // Init the channel to 10, gets incremented in call to next joinable network.
    230            channelCache = EMBER_MIN_802_15_4_CHANNEL_NUMBER - 1;
   \                     ??emberScanForJoinableNetwork_0: (+1)
   \   00000012   0x....             LDR.N    R0,??DataTable10
   \   00000014   0x210A             MOVS     R1,#+10
   \   00000016   0x7041             STRB     R1,[R0, #+1]
    231            channelMaskCache = channelMask;
   \   00000018   0x6084             STR      R4,[R0, #+8]
    232            if (extendedPanId == NULL
    233                || isArrayZero(extendedPanId, EXTENDED_PAN_ID_SIZE)) {
   \   0000001A   0xB135             CBZ.N    R5,??emberScanForJoinableNetwork_1
   \   0000001C   0x2100             MOVS     R1,#+0
   \                     ??emberScanForJoinableNetwork_2: (+1)
   \   0000001E   0x5D4A             LDRB     R2,[R1, R5]
   \   00000020   0xB942             CBNZ.N   R2,??emberScanForJoinableNetwork_3
   \   00000022   0x1C49             ADDS     R1,R1,#+1
   \   00000024   0xB2C9             UXTB     R1,R1
   \   00000026   0x2908             CMP      R1,#+8
   \   00000028   0xD3F9             BCC.N    ??emberScanForJoinableNetwork_2
    234              ignoreExtendedPanId = TRUE;
   \                     ??emberScanForJoinableNetwork_1: (+1)
   \   0000002A   0x2101             MOVS     R1,#+1
   \   0000002C   0x7081             STRB     R1,[R0, #+2]
    235            } else {
    236              ignoreExtendedPanId = FALSE;
    237              MEMCOPY(extendedPanIdCache, extendedPanId, EXTENDED_PAN_ID_SIZE);
    238            }
    239          
    240            return emberScanForNextJoinableNetwork();
   \                     ??emberScanForJoinableNetwork_4: (+1)
   \   0000002E   0xE8BD 0x4031      POP      {R0,R4,R5,LR}
   \   00000032   0x....             B.N      emberScanForNextJoinableNetwork
   \                     ??emberScanForJoinableNetwork_3: (+1)
   \   00000034   0x2100             MOVS     R1,#+0
   \   00000036   0x7081             STRB     R1,[R0, #+2]
   \   00000038   0x2208             MOVS     R2,#+8
   \   0000003A   0x4629             MOV      R1,R5
   \   0000003C   0x300C             ADDS     R0,R0,#+12
   \   0000003E   0x.... 0x....      BL       halCommonMemCopy
   \   00000042   0xE7F4             B.N      ??emberScanForJoinableNetwork_4
    241          }
    242          

   \                                 In section .text, align 2, keep-with-next
    243          EmberStatus emberScanForNextJoinableNetwork(void)
    244          {
   \                     emberScanForNextJoinableNetwork: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    245            
    246                SCAN_DEBUG_MSG("emberScanForNextJoinableNetwork ln 246"); //MN
    247          
    248            if (formAndJoinScanType != FORM_AND_JOIN_NEXT_NETWORK) {
   \   00000002   0x....             LDR.N    R4,??DataTable10
   \   00000004   0x7820             LDRB     R0,[R4, #+0]
   \   00000006   0x2801             CMP      R0,#+1
   \   00000008   0xD007             BEQ.N    ??emberScanForNextJoinableNetwork_0
    249              emberScanErrorHandler(EMBER_INVALID_CALL);
   \   0000000A   0x2070             MOVS     R0,#+112
   \   0000000C   0x.... 0x....      BL       emberScanErrorHandler
    250                    SCAN_DEBUG_MSG("emberScanForNextJoinableNetwork ln 250"); //MN
    251          
    252              return EMBER_INVALID_CALL;
   \   00000010   0x2070             MOVS     R0,#+112
   \   00000012   0xBD10             POP      {R4,PC}
    253            }
    254          
    255            // Check for cached networks first.
    256            while (networkCount) {
    257              NetworkInfo *finger = formAndJoinGetNetworkPointer(--networkCount);
    258              if (finger->network.panId != 0xFFFF) {
    259                emberJoinableNetworkFoundHandler(&(finger->network), finger->lqi, finger->rssi);
    260                formAndJoinSetBufferLength(networkCount);
    261                formAndJoinSetCleanupTimeout();
    262                      SCAN_DEBUG_MSG("emberScanForNextJoinableNetwork ln 262"); //MN
    263          
    264                return EMBER_SUCCESS;
    265              }
    266              formAndJoinSetBufferLength(networkCount);
   \                     ??emberScanForNextJoinableNetwork_1: (+1)
   \   00000014   0x78E0             LDRB     R0,[R4, #+3]
   \   00000016   0x.... 0x....      BL       formAndJoinSetBufferLength
   \                     ??emberScanForNextJoinableNetwork_0: (+1)
   \   0000001A   0x78E0             LDRB     R0,[R4, #+3]
   \   0000001C   0xB1A0             CBZ.N    R0,??emberScanForNextJoinableNetwork_2
   \   0000001E   0x1E40             SUBS     R0,R0,#+1
   \   00000020   0x70E0             STRB     R0,[R4, #+3]
   \   00000022   0xB2C0             UXTB     R0,R0
   \   00000024   0x.... 0x....      BL       formAndJoinGetNetworkPointer
   \   00000028   0xF64F 0x72FF      MOVW     R2,#+65535
   \   0000002C   0x8801             LDRH     R1,[R0, #+0]
   \   0000002E   0x4291             CMP      R1,R2
   \   00000030   0xD0F0             BEQ.N    ??emberScanForNextJoinableNetwork_1
   \   00000032   0xF990 0x200F      LDRSB    R2,[R0, #+15]
   \   00000036   0x7B81             LDRB     R1,[R0, #+14]
   \   00000038   0x.... 0x....      BL       emberJoinableNetworkFoundHandler
   \   0000003C   0x78E0             LDRB     R0,[R4, #+3]
   \   0000003E   0x.... 0x....      BL       formAndJoinSetBufferLength
   \   00000042   0x.... 0x....      BL       formAndJoinSetCleanupTimeout
   \   00000046   0xE014             B.N      ??emberScanForNextJoinableNetwork_3
    267            }
    268          
    269            // Find the next channel in the mask and start scanning.
    270            channelCache += 1;
   \                     ??emberScanForNextJoinableNetwork_2: (+1)
   \   00000048   0x7860             LDRB     R0,[R4, #+1]
    271            for (; channelCache <= EMBER_MAX_802_15_4_CHANNEL_NUMBER; channelCache++) {
   \                     ??emberScanForNextJoinableNetwork_4: (+1)
   \   0000004A   0x1C40             ADDS     R0,R0,#+1
   \   0000004C   0x7060             STRB     R0,[R4, #+1]
   \   0000004E   0x7860             LDRB     R0,[R4, #+1]
   \   00000050   0x281B             CMP      R0,#+27
   \   00000052   0xDA0B             BGE.N    ??emberScanForNextJoinableNetwork_5
    272              int32u bitMask = BIT32(channelCache);
   \   00000054   0x2101             MOVS     R1,#+1
    273              if (bitMask & channelMaskCache) {
   \   00000056   0x68A2             LDR      R2,[R4, #+8]
   \   00000058   0x4081             LSLS     R1,R1,R0
   \   0000005A   0x4211             TST      R1,R2
   \   0000005C   0xD0F5             BEQ.N    ??emberScanForNextJoinableNetwork_4
    274                formAndJoinScanType = FORM_AND_JOIN_JOINABLE_SCAN;
   \   0000005E   0x2004             MOVS     R0,#+4
   \   00000060   0x7020             STRB     R0,[R4, #+0]
    275                      SCAN_DEBUG_MSG("emberScanForNextJoinableNetwork ln 275"); //MN
    276          
    277                return startScan(EMBER_ACTIVE_SCAN, bitMask, ACTIVE_SCAN_DURATION);
   \   00000062   0x2203             MOVS     R2,#+3
   \   00000064   0xE8BD 0x4010      POP      {R4,LR}
   \   00000068   0x2001             MOVS     R0,#+1
   \   0000006A   0x....             B.N      startScan
    278              }
    279            }
    280          
    281            // Notify the app we're completely out of networks.
    282            emberFormAndJoinCleanup(EMBER_NO_BEACONS);
   \                     ??emberScanForNextJoinableNetwork_5: (+1)
   \   0000006C   0x20AB             MOVS     R0,#+171
   \   0000006E   0x.... 0x....      BL       emberFormAndJoinCleanup
    283                  SCAN_DEBUG_MSG("emberScanForNextJoinableNetwork ln 283"); //MN
    284          
    285            return EMBER_SUCCESS;
   \                     ??emberScanForNextJoinableNetwork_3: (+1)
   \   00000072   0x2000             MOVS     R0,#+0
   \   00000074   0xBD10             POP      {R4,PC}          ;; return
    286          }
    287          
    288          //------------------------------------------------------------------------------
    289          // Callbacks
    290          

   \                                 In section .text, align 2, keep-with-next
    291          boolean emberFormAndJoinScanCompleteHandler(int8u channel, EmberStatus status)
    292          {
   \                     emberFormAndJoinScanCompleteHandler: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x460C             MOV      R4,R1
    293            if (! emberFormAndJoinIsScanning()) {
   \   00000004   0x.... 0x....      BL       emberFormAndJoinIsScanning
   \   00000008   0xB128             CBZ.N    R0,??emberFormAndJoinScanCompleteHandler_0
    294              return FALSE;
    295            }
    296          
    297            if (FORM_AND_JOIN_ENERGY_SCAN != formAndJoinScanType) {
   \   0000000A   0x....             LDR.N    R1,??DataTable10
   \   0000000C   0x7808             LDRB     R0,[R1, #+0]
   \   0000000E   0x2802             CMP      R0,#+2
   \   00000010   0xBF18             IT       NE 
   \   00000012   0x2C00             CMPNE    R4,#+0
    298              // This scan is an Active Scan.
    299              // Active Scans potentially report transmit failures through this callback.
    300              if (EMBER_SUCCESS != status) {
   \   00000014   0xD001             BEQ.N    ??emberFormAndJoinScanCompleteHandler_1
    301                // The Active Scan is still in progress.  This callback is informing us
    302                // about a failure to transmit the beacon request on this channel.
    303                // If necessary we could save this failing channel number and start
    304                // another Active Scan on this channel later (after this current scan is
    305                // complete).
    306                return FALSE;
   \                     ??emberFormAndJoinScanCompleteHandler_0: (+1)
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0xBD10             POP      {R4,PC}
    307              }
    308            }
    309          
    310            switch (formAndJoinScanType) {
   \                     ??emberFormAndJoinScanCompleteHandler_1: (+1)
   \   0000001A   0x2802             CMP      R0,#+2
   \   0000001C   0xD006             BEQ.N    ??emberFormAndJoinScanCompleteHandler_2
   \   0000001E   0xD322             BCC.N    ??emberFormAndJoinScanCompleteHandler_3
   \   00000020   0x2804             CMP      R0,#+4
   \   00000022   0xD01C             BEQ.N    ??emberFormAndJoinScanCompleteHandler_4
   \   00000024   0xD305             BCC.N    ??emberFormAndJoinScanCompleteHandler_5
   \   00000026   0x2805             CMP      R0,#+5
   \   00000028   0xD019             BEQ.N    ??emberFormAndJoinScanCompleteHandler_4
   \   0000002A   0xE01C             B.N      ??emberFormAndJoinScanCompleteHandler_3
    311          
    312            case FORM_AND_JOIN_ENERGY_SCAN:    
    313              energyScanComplete();    
   \                     ??emberFormAndJoinScanCompleteHandler_2: (+1)
   \   0000002C   0x.... 0x....      BL       energyScanComplete
    314              break;
   \   00000030   0xE019             B.N      ??emberFormAndJoinScanCompleteHandler_3
    315          
    316            case FORM_AND_JOIN_PAN_ID_SCAN:
    317              panIdScanComplete();
   \                     ??emberFormAndJoinScanCompleteHandler_5: (+1)
   \   00000032   0x2200             MOVS     R2,#+0
   \   00000034   0xF64F 0x73FF      MOVW     R3,#+65535
   \                     ??emberFormAndJoinScanCompleteHandler_6: (+1)
   \   00000038   0x6848             LDR      R0,[R1, #+4]
   \   0000003A   0xF830 0x0012      LDRH     R0,[R0, R2, LSL #+1]
   \   0000003E   0x4298             CMP      R0,R3
   \   00000040   0xD106             BNE.N    ??emberFormAndJoinScanCompleteHandler_7
   \   00000042   0x1C52             ADDS     R2,R2,#+1
   \   00000044   0xB2D2             UXTB     R2,R2
   \   00000046   0x2A10             CMP      R2,#+16
   \   00000048   0xDBF6             BLT.N    ??emberFormAndJoinScanCompleteHandler_6
   \   0000004A   0x.... 0x....      BL       startPanIdScan
   \   0000004E   0xE00A             B.N      ??emberFormAndJoinScanCompleteHandler_3
   \                     ??emberFormAndJoinScanCompleteHandler_7: (+1)
   \   00000050   0x7849             LDRB     R1,[R1, #+1]
   \   00000052   0x.... 0x....      BL       emberUnusedPanIdFoundHandler
   \   00000056   0x2000             MOVS     R0,#+0
   \   00000058   0x.... 0x....      BL       emberFormAndJoinCleanup
   \   0000005C   0xE003             B.N      ??emberFormAndJoinScanCompleteHandler_3
    318              break;
    319          
    320            case FORM_AND_JOIN_JOINABLE_SCAN: 
    321              #if defined(XAP2B) || defined(EZSP_HOST) || defined(EMBER_TEST)
    322              if (emberEnableDualChannelScan 
    323                  && (channelCache < 15 || channelCache > 22)
    324                  && networkCount) {
    325                int8u dualChannel = (channelCache + (channelCache < 15 ? 12 : -12));
    326                formAndJoinScanType = FORM_AND_JOIN_DUAL_CHANNEL_SCAN;
    327                startScan(EMBER_ACTIVE_SCAN, BIT32(dualChannel), ACTIVE_SCAN_DURATION);
    328                break;
    329              }
    330              #endif
    331              // If no dual scan, fall through to save a little flash.
    332          
    333            case FORM_AND_JOIN_DUAL_CHANNEL_SCAN:   
    334              formAndJoinScanType = FORM_AND_JOIN_NEXT_NETWORK;
   \                     ??emberFormAndJoinScanCompleteHandler_4: (+1)
   \   0000005E   0x2001             MOVS     R0,#+1
   \   00000060   0x7008             STRB     R0,[R1, #+0]
    335              emberScanForNextJoinableNetwork(); 
   \   00000062   0x.... 0x....      BL       emberScanForNextJoinableNetwork
    336              break;
    337            }
    338            return TRUE;
   \                     ??emberFormAndJoinScanCompleteHandler_3: (+1)
   \   00000066   0x2001             MOVS     R0,#+1
   \   00000068   0xBD10             POP      {R4,PC}          ;; return
    339          }
    340          
    341          // We are either looking for PAN IDs or for joinable networks.  In the first
    342          // case we just check the found PAN ID against our list of candidates. 
    343          

   \                                 In section .text, align 2, keep-with-next
    344          boolean emberFormAndJoinNetworkFoundHandler(EmberZigbeeNetwork *networkFound,
    345                                                      int8u lqi,
    346                                                      int8s rssi)
    347          {
   \                     emberFormAndJoinNetworkFoundHandler: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
    348            int8u i;
    349          
    350            SCAN_DEBUG_MSG("SCAN: nwk found ch %d, ", networkFound->channel);
    351            SCAN_DEBUG_MSG("panID 0x%2x, xpan: ", networkFound->panId);
    352            SCAN_DEBUG_XPAN_PRINT(networkFound->extendedPanId);
    353            SCAN_DEBUG_MSG(", lqi %d", lqi);
    354            SCAN_DEBUG_MSG(", profile: %d", networkFound->stackProfile);
    355            SCAN_DEBUG_MSG(", pjoin: %d", networkFound->allowingJoin);
    356            SCAN_DEBUG("\n");
    357            
    358            switch (formAndJoinScanType) {
   \   00000004   0x....             LDR.N    R5,??DataTable10
   \   00000006   0x4604             MOV      R4,R0
   \   00000008   0x7828             LDRB     R0,[R5, #+0]
   \   0000000A   0x2803             CMP      R0,#+3
   \   0000000C   0x460E             MOV      R6,R1
   \   0000000E   0x4690             MOV      R8,R2
   \   00000010   0xD002             BEQ.N    ??emberFormAndJoinNetworkFoundHandler_0
   \   00000012   0x2804             CMP      R0,#+4
   \   00000014   0xD00F             BEQ.N    ??emberFormAndJoinNetworkFoundHandler_1
   \   00000016   0xE042             B.N      ??emberFormAndJoinNetworkFoundHandler_2
    359          
    360            case FORM_AND_JOIN_PAN_ID_SCAN:
    361              for (i = 0; i < NUM_PAN_ID_CANDIDATES; i++)
   \                     ??emberFormAndJoinNetworkFoundHandler_0: (+1)
   \   00000018   0x2000             MOVS     R0,#+0
    362                if (panIdCandidates[i] == networkFound->panId)
   \                     ??emberFormAndJoinNetworkFoundHandler_3: (+1)
   \   0000001A   0x6869             LDR      R1,[R5, #+4]
   \   0000001C   0x8823             LDRH     R3,[R4, #+0]
   \   0000001E   0xF831 0x2010      LDRH     R2,[R1, R0, LSL #+1]
   \   00000022   0x429A             CMP      R2,R3
   \   00000024   0xBF04             ITT      EQ 
   \   00000026   0xF64F 0x72FF      MOVWEQ   R2,#+65535
   \   0000002A   0xF821 0x2010      STRHEQ   R2,[R1, R0, LSL #+1]
    363                  panIdCandidates[i] = 0xFFFF;
   \   0000002E   0x1C40             ADDS     R0,R0,#+1
   \   00000030   0x2810             CMP      R0,#+16
   \   00000032   0xDBF2             BLT.N    ??emberFormAndJoinNetworkFoundHandler_3
   \   00000034   0xE033             B.N      ??emberFormAndJoinNetworkFoundHandler_2
    364              break;
    365              
    366            case FORM_AND_JOIN_JOINABLE_SCAN:
    367          
    368              // check for a beacon with permit join on...
    369              if (networkFound->allowingJoin
    370                  // ...the same stack profile as this application...
    371                  && networkFound->stackProfile == formAndJoinStackProfile()
    372                  && (// ...and ignore the Extended PAN ID, or...
    373                      ignoreExtendedPanId
    374                      // ...a matching Extended PAN ID
    375                      || (MEMCOMPARE(extendedPanIdCache,
    376                                     networkFound->extendedPanId,
    377                                     EXTENDED_PAN_ID_SIZE) == 0))) {
   \                     ??emberFormAndJoinNetworkFoundHandler_1: (+1)
   \   00000036   0x78E0             LDRB     R0,[R4, #+3]
   \   00000038   0xB388             CBZ.N    R0,??emberFormAndJoinNetworkFoundHandler_2
   \   0000003A   0x.... 0x....      BL       formAndJoinStackProfile
   \   0000003E   0x7B21             LDRB     R1,[R4, #+12]
   \   00000040   0x4281             CMP      R1,R0
   \   00000042   0xD12C             BNE.N    ??emberFormAndJoinNetworkFoundHandler_2
   \   00000044   0x78A8             LDRB     R0,[R5, #+2]
   \   00000046   0xB930             CBNZ.N   R0,??emberFormAndJoinNetworkFoundHandler_4
   \   00000048   0x2208             MOVS     R2,#+8
   \   0000004A   0x1D21             ADDS     R1,R4,#+4
   \   0000004C   0xF105 0x000C      ADD      R0,R5,#+12
   \   00000050   0x.... 0x....      BL       halCommonMemCompare
   \   00000054   0xBB18             CBNZ.N   R0,??emberFormAndJoinNetworkFoundHandler_2
    378                saveNetwork(networkFound, lqi, rssi);
   \                     ??emberFormAndJoinNetworkFoundHandler_4: (+1)
   \   00000056   0x2700             MOVS     R7,#+0
   \   00000058   0xE009             B.N      ??emberFormAndJoinNetworkFoundHandler_5
   \                     ??emberFormAndJoinNetworkFoundHandler_6: (+1)
   \   0000005A   0x4638             MOV      R0,R7
   \   0000005C   0x.... 0x....      BL       formAndJoinGetNetworkPointer
   \   00000060   0x2208             MOVS     R2,#+8
   \   00000062   0x1D21             ADDS     R1,R4,#+4
   \   00000064   0x1D00             ADDS     R0,R0,#+4
   \   00000066   0x.... 0x....      BL       halCommonMemCompare
   \   0000006A   0xB1C0             CBZ.N    R0,??emberFormAndJoinNetworkFoundHandler_2
   \   0000006C   0x1C7F             ADDS     R7,R7,#+1
   \                     ??emberFormAndJoinNetworkFoundHandler_5: (+1)
   \   0000006E   0x78E8             LDRB     R0,[R5, #+3]
   \   00000070   0xB2FF             UXTB     R7,R7
   \   00000072   0x4287             CMP      R7,R0
   \   00000074   0xD3F1             BCC.N    ??emberFormAndJoinNetworkFoundHandler_6
   \   00000076   0x1C40             ADDS     R0,R0,#+1
   \   00000078   0xB2C0             UXTB     R0,R0
   \   0000007A   0x.... 0x....      BL       formAndJoinSetBufferLength
   \   0000007E   0xB970             CBNZ.N   R0,??emberFormAndJoinNetworkFoundHandler_2
   \   00000080   0x78E8             LDRB     R0,[R5, #+3]
   \   00000082   0x.... 0x....      BL       formAndJoinGetNetworkPointer
   \   00000086   0x4607             MOV      R7,R0
   \   00000088   0x78E8             LDRB     R0,[R5, #+3]
   \   0000008A   0x1C40             ADDS     R0,R0,#+1
   \   0000008C   0x70E8             STRB     R0,[R5, #+3]
   \   0000008E   0x220E             MOVS     R2,#+14
   \   00000090   0x4621             MOV      R1,R4
   \   00000092   0x4638             MOV      R0,R7
   \   00000094   0x.... 0x....      BL       halCommonMemCopy
   \   00000098   0x73BE             STRB     R6,[R7, #+14]
   \   0000009A   0xF887 0x800F      STRB     R8,[R7, #+15]
    379                SCAN_DEBUG(": MATCH\r\n"); 
    380              } else {
    381                SCAN_DEBUG(": NO match\r\n"); 
    382              }
    383              break;
    384          
    385          #if defined(XAP2B) || defined(EZSP_HOST) || defined(EMBER_TEST)
    386            case FORM_AND_JOIN_DUAL_CHANNEL_SCAN: {
    387              NetworkInfo *finger;
    388              for (i = 0; i < networkCount; i++) {
    389                finger = formAndJoinGetNetworkPointer(i);
    390                if (MEMCOMPARE(finger->network.extendedPanId,
    391                               networkFound->extendedPanId,
    392                               EXTENDED_PAN_ID_SIZE) == 0) {
    393                  if (lqi > finger->lqi) {
    394                    finger->network.panId = 0xFFFF;  // Invalid network;
    395                  }
    396                }
    397              }
    398              break;
    399            }
    400          #endif
    401            }
    402            return emberFormAndJoinIsScanning();
   \                     ??emberFormAndJoinNetworkFoundHandler_2: (+1)
   \   0000009E   0xE8BD 0x41F0      POP      {R4-R8,LR}
   \   000000A2   0x....             B.N      emberFormAndJoinIsScanning
    403          }
    404          
    405          // Just remember the result.
    406          

   \                                 In section .text, align 2, keep-with-next
    407          boolean emberFormAndJoinEnergyScanResultHandler(int8u channel, int8s maxRssiValue)
    408          {
   \                     emberFormAndJoinEnergyScanResultHandler: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
    409            if (emberFormAndJoinIsScanning()) {
   \   00000006   0x.... 0x....      BL       emberFormAndJoinIsScanning
   \   0000000A   0xB128             CBZ.N    R0,??emberFormAndJoinEnergyScanResultHandler_0
    410              SCAN_DEBUG_MSG("SCAN: found energy %d dBm on ", maxRssiValue);
    411              SCAN_DEBUG_MSG("channel 0x%x\r\n", channel);
    412              channelEnergies[channel - EMBER_MIN_802_15_4_CHANNEL_NUMBER] = maxRssiValue;
   \   0000000C   0x....             LDR.N    R0,??DataTable10
   \   0000000E   0x6840             LDR      R0,[R0, #+4]
   \   00000010   0x1820             ADDS     R0,R4,R0
   \   00000012   0xF800 0x5C0B      STRB     R5,[R0, #-11]
    413              return TRUE;
   \   00000016   0x2001             MOVS     R0,#+1
    414            }
    415            return FALSE;
   \                     ??emberFormAndJoinEnergyScanResultHandler_0: (+1)
   \   00000018   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    416          }
    417          
    418          //------------------------------------------------------------------------------
    419          // Helper functions
    420          
    421          static void saveNetwork(EmberZigbeeNetwork *network, int8u lqi, int8s rssi)
    422          {
    423            int8u i;
    424            NetworkInfo *finger;
    425          
    426            // See if we already have that network.
    427            for (i = 0; i < networkCount; i++) {
    428              finger = formAndJoinGetNetworkPointer(i);
    429              if (MEMCOMPARE(finger->network.extendedPanId,
    430                             network->extendedPanId,
    431                             EXTENDED_PAN_ID_SIZE) == 0) {
    432                return;
    433              }
    434            }
    435          
    436            if (formAndJoinSetBufferLength(networkCount + 1) != EMBER_SUCCESS) {
    437              return;
    438            }
    439            finger = formAndJoinGetNetworkPointer(networkCount);
    440            networkCount += 1;
    441            MEMCOPY(finger, network, sizeof(EmberZigbeeNetwork));
    442            finger->lqi = lqi;
    443            finger->rssi = rssi;
    444          }
    445          

   \                                 In section .text, align 2, keep-with-next
    446          boolean emberFormAndJoinIsScanning(void)
    447          {
    448            return (formAndJoinScanType > FORM_AND_JOIN_NEXT_NETWORK);
   \                     emberFormAndJoinIsScanning: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable10
   \   00000002   0x7800             LDRB     R0,[R0, #+0]
   \   00000004   0x2802             CMP      R0,#+2
   \   00000006   0xDB01             BLT.N    ??emberFormAndJoinIsScanning_0
   \   00000008   0x2001             MOVS     R0,#+1
   \   0000000A   0x4770             BX       LR
   \                     ??emberFormAndJoinIsScanning_0: (+1)
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x4770             BX       LR               ;; return
    449          }
    450          

   \                                 In section .text, align 2, keep-with-next
    451          boolean emberFormAndJoinCanContinueJoinableNetworkScan(void)
    452          {
    453            return (formAndJoinScanType == FORM_AND_JOIN_NEXT_NETWORK);
   \                     emberFormAndJoinCanContinueJoinableNetworkScan: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable10
   \   00000002   0x7800             LDRB     R0,[R0, #+0]
   \   00000004   0x2801             CMP      R0,#+1
   \   00000006   0xBF18             IT       NE 
   \   00000008   0x2000             MOVNE    R0,#+0
   \   0000000A   0x4770             BX       LR               ;; return
    454          }
    455          

   \                                 In section .text, align 2, keep-with-next
    456          static boolean setup(int8u scanType)
    457          {
   \                     setup: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
    458            if (emberFormAndJoinIsScanning()) {
   \   00000004   0x.... 0x....      BL       emberFormAndJoinIsScanning
   \   00000008   0xB118             CBZ.N    R0,??setup_0
    459              emberScanErrorHandler(EMBER_MAC_SCANNING);
   \   0000000A   0x203D             MOVS     R0,#+61
   \   0000000C   0x.... 0x....      BL       emberScanErrorHandler
    460              return FALSE;
   \   00000010   0xE00F             B.N      ??setup_1
    461            }
    462            
    463            // Case 12903: Need to reset the cleanup timeout when initiating a new scan
    464            // since a previous scan process may have concluded before the cleanup event
    465            // timer ran out, and we don't want it triggering in the middle of our new
    466            // scan and cleaning out legitimate data.  
    467            // This is a special cause because emberFormAndJoinCleanup is occurring 
    468            // directly rather than as a result of the cleanup event firing, so the 
    469            // cleanup event timer isn't being deactivated like it would from the event
    470            // handler.  Since our only interface to manipulate the cleanup event 
    471            // timer is to restart it (rather than deactivate it), we do that here.
    472            formAndJoinSetCleanupTimeout();
   \                     ??setup_0: (+1)
   \   00000012   0x.... 0x....      BL       formAndJoinSetCleanupTimeout
    473            emberFormAndJoinCleanup(EMBER_SUCCESS);  // In case we were in NEXT_NETWORK mode.
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x.... 0x....      BL       emberFormAndJoinCleanup
    474            networkCount = 0;
   \   0000001C   0x....             LDR.N    R5,??DataTable10
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0x70E8             STRB     R0,[R5, #+3]
    475            formAndJoinScanType = scanType;
   \   00000022   0x702C             STRB     R4,[R5, #+0]
    476            dataContents = formAndJoinAllocateBuffer();
   \   00000024   0x.... 0x....      BL       formAndJoinAllocateBuffer
   \   00000028   0x6068             STR      R0,[R5, #+4]
    477            if (dataContents == NULL) {
   \   0000002A   0xB920             CBNZ.N   R0,??setup_2
    478              emberFormAndJoinCleanup(EMBER_NO_BUFFERS);
   \   0000002C   0x2018             MOVS     R0,#+24
   \   0000002E   0x.... 0x....      BL       emberFormAndJoinCleanup
    479              return FALSE;
   \                     ??setup_1: (+1)
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0xBD32             POP      {R1,R4,R5,PC}
    480            }
    481            return TRUE;
   \                     ??setup_2: (+1)
   \   00000036   0x2001             MOVS     R0,#+1
   \   00000038   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    482          }
    483          

   \                                 In section .text, align 2, keep-with-next
    484          void emberFormAndJoinCleanup(EmberStatus status)
    485          {
   \                     emberFormAndJoinCleanup: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    486            formAndJoinScanType = FORM_AND_JOIN_NOT_SCANNING;
   \   00000004   0x....             LDR.N    R1,??DataTable10
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x7008             STRB     R0,[R1, #+0]
    487            SCAN_DEBUG("formAndJoinReleaseBuffer()\n");
    488            formAndJoinReleaseBuffer();
   \   0000000A   0x.... 0x....      BL       formAndJoinReleaseBuffer
    489            if (status != EMBER_SUCCESS) {
   \   0000000E   0xB124             CBZ.N    R4,??emberFormAndJoinCleanup_0
    490              emberScanErrorHandler(status);
   \   00000010   0x4620             MOV      R0,R4
   \   00000012   0xE8BD 0x4010      POP      {R4,LR}
   \   00000016   0x.... 0x....      B.W      emberScanErrorHandler
    491            }
    492          }
   \                     ??emberFormAndJoinCleanup_0: (+1)
   \   0000001A   0xBD10             POP      {R4,PC}          ;; return
    493          

   \                                 In section .text, align 2, keep-with-next
    494          static EmberStatus startScan(EmberNetworkScanType type, int32u mask, int8u duration)
    495          {
   \                     startScan: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    496            EmberStatus status = emberStartScan(type, mask, duration);
   \   00000002   0x.... 0x....      BL       emberStartScan
   \   00000006   0x0004             MOVS     R4,R0
    497            SCAN_DEBUG_MSG("SCAN: start scan, status 0x%x\r\n", status);
    498            if (status != EMBER_SUCCESS) {
   \   00000008   0xBF18             IT       NE 
    499              emberFormAndJoinCleanup(status);
   \   0000000A   0x.... 0x....      BLNE     emberFormAndJoinCleanup
    500            }
    501            return status;
   \   0000000E   0x4620             MOV      R0,R4
   \   00000010   0xBD10             POP      {R4,PC}          ;; return
    502          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10:
   \   00000000   0x........         DC32     formAndJoinScanType
    503          
    504          boolean isArrayZero(int8u* array, int8u size)
    505          {
    506            int8u i;
    507            for (i=0; i<size; i++) {
    508              if (array[i] != 0) {
    509                return FALSE;
    510              }
    511            }
    512            return TRUE;
    513          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   emberFormAndJoinCanContinueJoinableNetworkScan
       8   emberFormAndJoinCleanup
         8   -> formAndJoinReleaseBuffer
      16   emberFormAndJoinEnergyScanResultHandler
        16   -> emberFormAndJoinIsScanning
       0   emberFormAndJoinIsScanning
      24   emberFormAndJoinNetworkFoundHandler
         0   -> emberFormAndJoinIsScanning
        24   -> formAndJoinGetNetworkPointer
        24   -> formAndJoinSetBufferLength
        24   -> formAndJoinStackProfile
        24   -> halCommonMemCompare
        24   -> halCommonMemCopy
       8   emberFormAndJoinScanCompleteHandler
         8   -> emberFormAndJoinCleanup
         8   -> emberFormAndJoinIsScanning
         8   -> emberScanForNextJoinableNetwork
         8   -> emberUnusedPanIdFoundHandler
         8   -> energyScanComplete
         8   -> startPanIdScan
      16   emberScanForJoinableNetwork
        16   -> halCommonMemCopy
        16   -> setup
       8   emberScanForNextJoinableNetwork
         0   -> emberFormAndJoinCleanup
         8   -> emberJoinableNetworkFoundHandler
         8   -> emberScanErrorHandler
         8   -> formAndJoinGetNetworkPointer
         8   -> formAndJoinSetBufferLength
         8   -> formAndJoinSetCleanupTimeout
      16   emberScanForUnusedPanId
        16   -> halCommonMemSet
        16   -> setup
        16   -> startScan
      16   energyScanComplete
        16   -> halCommonGetRandom
         0   -> startPanIdScan
      16   setup
        16   -> emberFormAndJoinCleanup
        16   -> emberFormAndJoinIsScanning
        16   -> emberScanErrorHandler
        16   -> formAndJoinAllocateBuffer
        16   -> formAndJoinSetCleanupTimeout
       8   startPanIdScan
         8   -> halCommonGetRandom
         0   -> startScan
       8   startScan
         8   -> emberFormAndJoinCleanup
         8   -> emberStartScan


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable10
       1  emberEnableDualChannelScan
      12  emberFormAndJoinCanContinueJoinableNetworkScan
      28  emberFormAndJoinCleanup
      26  emberFormAndJoinEnergyScanResultHandler
      16  emberFormAndJoinIsScanning
     164  emberFormAndJoinNetworkFoundHandler
     106  emberFormAndJoinScanCompleteHandler
      68  emberScanForJoinableNetwork
     118  emberScanForNextJoinableNetwork
      44  emberScanForUnusedPanId
     114  energyScanComplete
      20  formAndJoinScanType
          channelCache
          ignoreExtendedPanId
          networkCount
          dataContents
          channelMaskCache
          extendedPanIdCache
      58  setup
      50  startPanIdScan
      18  startScan

 
  20 bytes in section .bss
   1 byte  in section .data
 826 bytes in section .text
 
 826 bytes of CODE memory
  21 bytes of DATA memory

Errors: none
Warnings: none
