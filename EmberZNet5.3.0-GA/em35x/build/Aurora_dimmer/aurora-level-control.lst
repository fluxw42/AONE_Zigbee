###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        15/Dec/2016  11:48:42
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\AONE_Zigbee\EmberZNet5.3.0-GA\em35x\app\framework\plugin\aurora-level-control\aurora-level-control.c
#    Command line =  
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\AONE_Zigbee\EmberZNet5.3.0-GA\em35x\app\framework\plugin\aurora-level-control\aurora-level-control.c"
#        -D
#        "GENERATED_TOKEN_HEADER=\"app/builder/Aurora_dimmer/Aurora_dimmer_tokens.h\""
#        -D "ZA_GENERATED_HEADER=\"app/builder/Aurora_dimmer/Aurora_dimmer.h\""
#        -D APP_BTL -D
#        "BOARD_HEADER=\"../../../AONE_Zigbee/EmberZNet5.3.0-GA/em35x/app/builder/Aurora_dimmer/Aurora_dimmer_board.h\""
#        -D "PLATFORM_HEADER=\"hal/micro/cortexm3/compiler/iar.h\"" -D CORTEXM3
#        -D CORTEXM3_EMBER_MICRO -D CORTEXM3_EM357 -D PHY_EM3XX -D
#        "APPLICATION_TOKEN_HEADER=\"app/framework/util/tokens.h\"" -D
#        "CONFIGURATION_HEADER=\"app/framework/util/config.h\"" -D
#        "ATTRIBUTE_STORAGE_CONFIGURATION=\"app/builder/Aurora_dimmer/Aurora_dimmer_endpoint_config.h\""
#        -D "__SOURCEFILE__=\"aurora-level-control.c\"" -lC
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\AONE_Zigbee\EmberZNet5.3.0-GA\em35x\build\Aurora_dimmer\"
#        --diag_suppress Pa050 -o
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\AONE_Zigbee\EmberZNet5.3.0-GA\em35x\build\Aurora_dimmer\"
#        --debug --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\AONE_Zigbee\EmberZNet5.3.0-GA\em35x\app\framework\plugin\aurora-level-control\"
#        -I "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\AONE_Zigbee\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\"
#        -I "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\AONE_Zigbee\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\"
#        -I "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\AONE_Zigbee\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\app\framework\include\"
#        -I "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\AONE_Zigbee\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\..\..\..\16.09.23
#        Fixedonoff\EmberZNet5.3.0-GA\em35x\" -I
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\AONE_Zigbee\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\..\..\..\16.09.23
#        Fixedonoff\EmberZNet5.3.0-GA\em35x\stack\" -I
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\AONE_Zigbee\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\..\..\..\16.09.23
#        Fixedonoff\EmberZNet5.3.0-GA\em35x\hal\" -I
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\AONE_Zigbee\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\..\..\..\16.09.23
#        Fixedonoff\EmberZNet5.3.0-GA\em35x\hal\..\" -Ohz --use_c++_inline
#    List file    =  
#        C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\AONE_Zigbee\EmberZNet5.3.0-GA\em35x\build\Aurora_dimmer\aurora-level-control.lst
#    Object file  =  
#        C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\AONE_Zigbee\EmberZNet5.3.0-GA\em35x\build\Aurora_dimmer\aurora-level-control.o
#
###############################################################################

C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH ETRX357\AONE_Zigbee\EmberZNet5.3.0-GA\em35x\app\framework\plugin\aurora-level-control\aurora-level-control.c
      1          // *******************************************************************
      2          // * level-control.c
      3          // *
      4          // *
      5          // * Copyright 2012 by Ember Corporation. All rights reserved.              *80*
      6          // *******************************************************************
      7          
      8          // this file contains all the common includes for clusters in the util
      9          #include <string.h>
     10          #include "app/framework/include/af.h"
     11          #include "app/framework/util/attribute-storage.h"
     12          
     13          // clusters specific header
     14          #include "aurora-level-control.h"
     15          
     16          #ifdef EMBER_AF_PLUGIN_SCENES
     17            #include "app/framework/plugin/scenes/scenes.h"
     18          #endif //EMBER_AF_PLUGIN_SCENES
     19          
     20          #ifdef EMBER_AF_PLUGIN_ON_OFF
     21            #include "app/framework/plugin/on-off/on-off.h"
     22          #endif //EMBER_AF_PLUGIN_ON_OFF
     23          
     24          #ifdef EMBER_AF_PLUGIN_ZLL_LEVEL_CONTROL_SERVER
     25            #include "app/framework/plugin/zll-level-control-server/zll-level-control-server.h"
     26          #endif //EMBER_AF_PLUGIN_ZLL_LEVEL_CONTROL_SERVER
     27          
     28          #if (EMBER_AF_PLUGIN_LEVEL_CONTROL_RATE == 0)
     29            #define FASTEST_TRANSITION_TIME 0
     30          #else
     31            #define FASTEST_TRANSITION_TIME (MILLISECOND_TICKS_PER_SECOND / EMBER_AF_PLUGIN_LEVEL_CONTROL_RATE)
     32          #endif
     33          
     34          #include "aurora-level-control-hal.h"
     35          #include "../aurora-host-protocol/aurora-host-protocol.h"
     36          #include "../aurora-colour-control/aurora-colour-control.h"
     37          
     38          extern void calculateEventDuration_and_stepSize(int16u transitionTimeMs, int16u amount, int32u* eventDurationMs, int16u* stepSize);
     39          
     40          typedef struct {
     41            boolean active;
     42            int8u commandId;
     43            int8u moveToLevel;
     44            int8u moveMode;
     45            int16u stepSize;
     46            boolean moveToLevelUp; // TRUE for up, FALSE for down
     47            boolean useOnLevel;
     48            int8u onLevel;
     49            int32u eventDuration;
     50            int32u transitionTime;
     51            int32u elapsedTime;
     52          } EmberAfLevelControlState;
     53          

   \                                 In section .bss, align 1
     54          static int8u minLevel;
   \                     minLevel:
   \   00000000                      DS8 1
   \   00000001                      DS8 1
     55          static int8u maxLevel;
     56          

   \                                 In section .bss, align 4
     57          static EmberAfLevelControlState stateTable[EMBER_AF_LEVEL_CONTROL_CLUSTER_SERVER_ENDPOINT_COUNT];
   \                     stateTable:
   \   00000000                      DS8 24
     58          
     59          static EmberAfLevelControlState *emAfGetLevelControlState(int8u endpoint);
     60          static EmberAfStatus emAfLevelControlClusterMoveToLevelHandler(int8u commandId, int8u level, int16u transitionTime);
     61          static EmberAfStatus emAfLevelControlClusterMoveHandler(int8u commandId, int8u moveMode, int8u rate);
     62          static EmberAfStatus emAfLevelControlClusterStepHandler(int8u commandId, int8u stepMode, int8u stepSize, int16u transitionTime);
     63          static EmberAfStatus emAfLevelControlClusterStopHandler(int8u commandId);
     64          
     65          static void setOnOffValue(int8u endpoint, boolean onOff);
     66          

   \                                 In section .text, align 2, keep-with-next
     67          static void emAfActivateLevelControl(EmberAfLevelControlState *state,
     68                                               int8u endpoint) 
     69          {
   \                     emAfActivateLevelControl: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x4602             MOV      R2,R0
   \   00000004   0x4608             MOV      R0,R1
     70            state->active = TRUE;
   \   00000006   0x2101             MOVS     R1,#+1
   \   00000008   0x7011             STRB     R1,[R2, #+0]
     71            // schedule the first tick
     72            emberAfScheduleServerTickExtended(endpoint,
     73                                              ZCL_LEVEL_CONTROL_CLUSTER_ID,
     74                                              0,
     75                                              EMBER_AF_LONG_POLL,
     76                                              EMBER_AF_STAY_AWAKE);
   \   0000000A   0x2300             MOVS     R3,#+0
   \   0000000C   0x2102             MOVS     R1,#+2
   \   0000000E   0x9100             STR      R1,[SP, #+0]
   \   00000010   0x2200             MOVS     R2,#+0
   \   00000012   0x2108             MOVS     R1,#+8
   \   00000014   0x.... 0x....      BL       emberAfScheduleServerTickExtended
     77          }
   \   00000018   0xBD01             POP      {R0,PC}          ;; return
     78          
     79          static void emAfDeactivateLevelControl(EmberAfLevelControlState *state) 
     80          {
     81            state->active = FALSE;
     82          }
     83          

   \                                 In section .text, align 2, keep-with-next
     84          static EmberAfLevelControlState *emAfGetLevelControlState(int8u endpoint)
     85          {
   \                     emAfGetLevelControlState: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     86            int8u ep = emberAfFindClusterServerEndpointIndex(endpoint, ZCL_LEVEL_CONTROL_CLUSTER_ID);
   \   00000002   0x2108             MOVS     R1,#+8
   \   00000004   0x.... 0x....      BL       emberAfFindClusterServerEndpointIndex
     87            return (ep == 0xFF ? NULL : &stateTable[ep]);
   \   00000008   0x28FF             CMP      R0,#+255
   \   0000000A   0xD101             BNE.N    ??emAfGetLevelControlState_0
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0xBD02             POP      {R1,PC}
   \                     ??emAfGetLevelControlState_0: (+1)
   \   00000010   0x.... 0x....      LDR.W    R1,??DataTable45
   \   00000014   0x2218             MOVS     R2,#+24
   \   00000016   0xFB02 0x1000      MLA      R0,R2,R0,R1
   \   0000001A   0xBD02             POP      {R1,PC}          ;; return
     88          }
     89          

   \                                 In section .text, align 2, keep-with-next
     90          void emberAfLevelControlClusterServerInitCallback(int8u endpoint)
     91          {
   \                     emberAfLevelControlClusterServerInitCallback: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     92            EmberAfLevelControlState *state = emAfGetLevelControlState(endpoint);
   \   00000002   0x.... 0x....      BL       emAfGetLevelControlState
     93            if (state != NULL) 
   \   00000006   0xB108             CBZ.N    R0,??emberAfLevelControlClusterServerInitCallback_0
     94            {
     95              emAfDeactivateLevelControl(state);
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x7001             STRB     R1,[R0, #+0]
     96            }
     97          
     98            // Set the min and max levels
     99          #ifdef EMBER_AF_PLUGIN_ZLL_LEVEL_CONTROL_SERVER
    100            minLevel = EMBER_AF_PLUGIN_ZLL_LEVEL_CONTROL_SERVER_MINIMUM_LEVEL;
    101            maxLevel = EMBER_AF_PLUGIN_ZLL_LEVEL_CONTROL_SERVER_MAXIMUM_LEVEL;
    102          #else
    103            minLevel = EMBER_AF_PLUGIN_AURORA_LEVEL_CONTROL_MINIMUM_LEVEL;
   \                     ??emberAfLevelControlClusterServerInitCallback_0: (+1)
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable45_1
   \   00000012   0x7001             STRB     R1,[R0, #+0]
    104            maxLevel = EMBER_AF_PLUGIN_AURORA_LEVEL_CONTROL_MAXIMUM_LEVEL;
   \   00000014   0x21FF             MOVS     R1,#+255
   \   00000016   0x7041             STRB     R1,[R0, #+1]
    105          #endif
    106          }
   \   00000018   0xBD01             POP      {R0,PC}          ;; return
    107          
    108          

   \                                 In section .text, align 4, keep-with-next
    109          void emberAfLevelControlClusterServerTickCallback(int8u endpoint)
    110          {
   \                     emberAfLevelControlClusterServerTickCallback: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0xB083             SUB      SP,SP,#+12
    111            
    112            emberAfLevelControlClusterPrint("GOT TO start of emberAfLevelControlClusterServerTickCallback ln112\n"); //MN
   \   00000006   0x.... 0x....      ADR.W    R1,?_0
   \   0000000A   0x.... 0x....      BL       ?Subroutine10
    113            
    114            EmberAfLevelControlState *state = emAfGetLevelControlState(endpoint);
   \                     ??CrossCallReturnLabel_38: (+1)
   \   0000000E   0x4620             MOV      R0,R4
   \   00000010   0x.... 0x....      BL       emAfGetLevelControlState
   \   00000014   0x4605             MOV      R5,R0
    115            EmberAfStatus status;
    116            int8u currentLevel, setNewLevel;
    117            int16u newLevel;
    118          
    119            emberAfLevelControlClusterPrint("ln119 state is: %d\n", state); //MN
   \   00000016   0x462A             MOV      R2,R5
   \   00000018   0x.... 0x....      ADR.W    R1,?_1
   \   0000001C   0x2020             MOVS     R0,#+32
   \   0000001E   0x.... 0x....      BL       emberAfPrint
    120            
    121            emberAfLevelControlClusterPrint("ln121 Current level is: %d state->moveToLevel is: %d\n", currentLevel, state->moveToLevel); //MN
                                                                                                             ^
Warning[Pe549]: variable "currentLevel" is used before its value is set
   \   00000022   0x78AB             LDRB     R3,[R5, #+2]
   \   00000024   0xF89D 0x2004      LDRB     R2,[SP, #+4]
   \   00000028   0x.... 0x....      ADR.W    R1,?_2
   \   0000002C   0x.... 0x....      BL       ?Subroutine9
    122            
    123            if (state == NULL) 
   \                     ??CrossCallReturnLabel_34: (+1)
   \   00000030   0x2D00             CMP      R5,#+0
   \   00000032   0xD054             BEQ.N    ??CrossCallReturnLabel_13
    124            {
    125              return;
    126            }
    127          
    128            //emberAfDebugPrint("Level control tick\r\n");  
    129              
    130            state->elapsedTime += state->eventDuration;
   \   00000034   0x68EA             LDR      R2,[R5, #+12]
   \   00000036   0x6968             LDR      R0,[R5, #+20]
   \   00000038   0x1810             ADDS     R0,R2,R0
   \   0000003A   0x6168             STR      R0,[R5, #+20]
    131          
    132          #ifdef EMBER_AF_PLUGIN_ZLL_LEVEL_CONTROL_SERVER
    133            if (emberAfPluginZllLevelControlServerIgnoreMoveToLevelMoveStepStop(endpoint,
    134                                                                                state->commandId)) 
    135            {
    136              state->active = FALSE;
    137            }
    138          #endif
    139          
    140            if (!state->active) 
   \   0000003C   0x7828             LDRB     R0,[R5, #+0]
   \   0000003E   0x2800             CMP      R0,#+0
   \   00000040   0xD04D             BEQ.N    ??CrossCallReturnLabel_13
    141            {
    142              return;
    143            } 
    144            else 
    145            {
    146              // Reschedule the tick
    147              emberAfScheduleServerTickExtended(endpoint,
    148                                                ZCL_LEVEL_CONTROL_CLUSTER_ID,
    149                                                state->eventDuration,
    150                                                EMBER_AF_LONG_POLL,
    151                                                EMBER_AF_STAY_AWAKE);
   \   00000042   0x2002             MOVS     R0,#+2
   \   00000044   0x9000             STR      R0,[SP, #+0]
   \   00000046   0x2300             MOVS     R3,#+0
   \   00000048   0x2108             MOVS     R1,#+8
   \   0000004A   0x4620             MOV      R0,R4
   \   0000004C   0x.... 0x....      BL       emberAfScheduleServerTickExtended
    152            }
    153          
    154            // Read the attribute; print error message and return if it can't be read
    155            status = emberAfReadServerAttribute(endpoint,
    156                                                ZCL_LEVEL_CONTROL_CLUSTER_ID,
    157                                                ZCL_CURRENT_LEVEL_ATTRIBUTE_ID,
    158                                                (int8u *)&currentLevel,
    159                                                sizeof(currentLevel));
   \   00000050   0x2001             MOVS     R0,#+1
   \   00000052   0x9000             STR      R0,[SP, #+0]
   \   00000054   0xAB01             ADD      R3,SP,#+4
   \   00000056   0x2200             MOVS     R2,#+0
   \   00000058   0x2108             MOVS     R1,#+8
   \   0000005A   0x4620             MOV      R0,R4
   \   0000005C   0x.... 0x....      BL       emberAfReadServerAttribute
    160            if (status != EMBER_ZCL_STATUS_SUCCESS) 
   \   00000060   0xB118             CBZ.N    R0,??emberAfLevelControlClusterServerTickCallback_1
    161            {
    162              emberAfLevelControlClusterPrintln("ERR: reading current level %x", status);
   \   00000062   0x4602             MOV      R2,R0
   \   00000064   0x.... 0x....      ADR.W    R1,?_3
   \   00000068   0xE037             B.N      ??emberAfLevelControlClusterServerTickCallback_2
    163              return;
    164            }
    165          
    166            // If something goes wrong, we will set the newLevel to the currentLevel
    167            newLevel = currentLevel;
   \                     ??emberAfLevelControlClusterServerTickCallback_1: (+1)
   \   0000006A   0xF89D 0x6004      LDRB     R6,[SP, #+4]
    168          
    169              emberAfLevelControlClusterPrint("ln169 Current level is: %d state->moveToLevel is: %d\n", currentLevel, state->moveToLevel); //MN
   \   0000006E   0x78AB             LDRB     R3,[R5, #+2]
   \   00000070   0x.... 0x....      ADR.W    R1,?_4
   \   00000074   0x4632             MOV      R2,R6
   \   00000076   0x.... 0x....      BL       ?Subroutine9
    170            
    171            // Handle actions: move-to-level, move, or step
    172            switch (state->commandId) {
   \                     ??CrossCallReturnLabel_33: (+1)
   \   0000007A   0x7868             LDRB     R0,[R5, #+1]
   \   0000007C   0x.... 0x....      LDR.W    R7,??DataTable45_1
   \   00000080   0x7839             LDRB     R1,[R7, #+0]
   \   00000082   0x2806             CMP      R0,#+6
   \   00000084   0xF200 0x809B      BHI.W    ??emberAfLevelControlClusterServerTickCallback_3
   \   00000088   0xE8DF 0xF000      TBB      [PC, R0]
   \                     ??emberAfLevelControlClusterServerTickCallback_0:
   \   0000008C   0x04 0x73          DC8      0x4,0x73,0x4,0x99
   \              0x04 0x99    
   \   00000090   0x04 0x73          DC8      0x4,0x73,0x4,0x0
   \              0x04 0x00    
    173          
    174              // Step and move-to-level are treated the same
    175            case ZCL_MOVE_TO_LEVEL_COMMAND_ID:
    176            case ZCL_MOVE_TO_LEVEL_WITH_ON_OFF_COMMAND_ID:
    177            case ZCL_STEP_COMMAND_ID:
    178            case ZCL_STEP_WITH_ON_OFF_COMMAND_ID:
    179              {
    180                // Are we at the requested level?
    181                if (currentLevel == state->moveToLevel) 
   \                     ??emberAfLevelControlClusterServerTickCallback_4: (+1)
   \   00000094   0x78AB             LDRB     R3,[R5, #+2]
   \   00000096   0xF89D 0x2004      LDRB     R2,[SP, #+4]
   \   0000009A   0x429A             CMP      R2,R3
   \   0000009C   0xD120             BNE.N    ??emberAfLevelControlClusterServerTickCallback_5
    182                {
    183                  // Done; stop moving
    184                  state->elapsedTime = state->transitionTime;
   \   0000009E   0x692A             LDR      R2,[R5, #+16]
   \   000000A0   0x616A             STR      R2,[R5, #+20]
    185          #ifdef ZCL_USING_LEVEL_CONTROL_CLUSTER_LEVEL_CONTROL_REMAINING_TIME_ATTRIBUTE
    186                  {
    187                    int16u remainingTime = 0;
    188                    status = emberAfWriteServerAttribute(endpoint,
    189                                                         ZCL_LEVEL_CONTROL_CLUSTER_ID,
    190                                                         ZCL_LEVEL_CONTROL_REMAINING_TIME_ATTRIBUTE_ID,
    191                                                         (int8u *)&remainingTime,
    192                                                         sizeof(remainingTime));
    193                    if (status != EMBER_ZCL_STATUS_SUCCESS) 
    194                    {
    195                      emberAfLevelControlClusterPrintln("ERR: writing remaining time %x", status);
    196                    }
    197                  }
    198          #endif
    199                  emAfDeactivateLevelControl(state);
   \   000000A2   0x2200             MOVS     R2,#+0
   \   000000A4   0x702A             STRB     R2,[R5, #+0]
    200                  if (currentLevel == minLevel) 
   \   000000A6   0xF89D 0x2004      LDRB     R2,[SP, #+4]
   \   000000AA   0x428A             CMP      R2,R1
   \   000000AC   0xD117             BNE.N    ??CrossCallReturnLabel_13
    201                  {
    202                    if (state->commandId == ZCL_MOVE_TO_LEVEL_WITH_ON_OFF_COMMAND_ID
    203                        || state->commandId == ZCL_STEP_WITH_ON_OFF_COMMAND_ID) 
   \   000000AE   0x2804             CMP      R0,#+4
   \   000000B0   0xBF18             IT       NE 
   \   000000B2   0x2806             CMPNE    R0,#+6
   \   000000B4   0xD113             BNE.N    ??CrossCallReturnLabel_13
    204                    {
    205                      setOnOffValue(endpoint, FALSE);
   \   000000B6   0x.... 0x....      BL       ?Subroutine11
    206                      if (state->useOnLevel) 
   \                     ??CrossCallReturnLabel_42: (+1)
   \   000000BA   0x79E8             LDRB     R0,[R5, #+7]
   \   000000BC   0x2800             CMP      R0,#+0
   \   000000BE   0xD00E             BEQ.N    ??CrossCallReturnLabel_13
    207                      {
    208                        currentLevel = state->onLevel;
   \   000000C0   0x7A28             LDRB     R0,[R5, #+8]
   \   000000C2   0xF88D 0x0004      STRB     R0,[SP, #+4]
    209                        status = emberAfWriteServerAttribute(endpoint,
    210                                                             ZCL_LEVEL_CONTROL_CLUSTER_ID,
    211                                                             ZCL_CURRENT_LEVEL_ATTRIBUTE_ID,
    212                                                             (int8u *)&currentLevel,
    213                                                             ZCL_INT8U_ATTRIBUTE_TYPE);
   \   000000C6   0xAB01             ADD      R3,SP,#+4
   \   000000C8   0x2020             MOVS     R0,#+32
   \   000000CA   0x9000             STR      R0,[SP, #+0]
   \   000000CC   0x.... 0x....      BL       ?Subroutine4
    214                        if (status != EMBER_ZCL_STATUS_SUCCESS) 
   \                     ??CrossCallReturnLabel_3: (+1)
   \   000000D0   0x2800             CMP      R0,#+0
   \   000000D2   0xD004             BEQ.N    ??CrossCallReturnLabel_13
    215                        {
    216                          emberAfLevelControlClusterPrintln("ERR: writing current level %x",
    217                                                            status);
   \   000000D4   0x4602             MOV      R2,R0
   \   000000D6   0x.... 0x....      ADR.W    R1,?_5
   \                     ??emberAfLevelControlClusterServerTickCallback_2: (+1)
   \   000000DA   0x.... 0x....      BL       ??Subroutine5_0
    218                          return;
   \                     ??CrossCallReturnLabel_13: (+1)
   \   000000DE   0xBDF7             POP      {R0-R2,R4-R7,PC}
    219                        }
    220                      }
    221                    }
    222                  }
    223                  return;
    224                }
    225                
    226                    emberAfLevelControlClusterPrint("ln226 Current level is: %d state->moveToLevel is: %d\n", currentLevel, state->moveToLevel); //MN
   \                     ??emberAfLevelControlClusterServerTickCallback_5: (+1)
   \   000000E0   0x.... 0x....      ADR.W    R1,?_6
   \   000000E4   0x.... 0x....      BL       ?Subroutine9
    227              emberAfLevelControlClusterPrint("ln227 moveToLevelUp is: %d\n", state->moveToLevelUp); //MN
   \                     ??CrossCallReturnLabel_32: (+1)
   \   000000E8   0x79AA             LDRB     R2,[R5, #+6]
   \   000000EA   0x.... 0x....      ADR.W    R1,?_7
   \   000000EE   0x2020             MOVS     R0,#+32
   \   000000F0   0x.... 0x....      BL       emberAfPrint
    228          
    229                
    230                // adjust by the proper amount, either up or down
    231                if (state->moveToLevelUp) 
   \   000000F4   0x79A8             LDRB     R0,[R5, #+6]
   \   000000F6   0xB1D0             CBZ.N    R0,??emberAfLevelControlClusterServerTickCallback_6
    232                {
    233                        emberAfLevelControlClusterPrint("GOT TO state->moveToLevelUp\n"); //MN
   \   000000F8   0x.... 0x....      ADR.W    R1,?_8
   \   000000FC   0x.... 0x....      BL       ?Subroutine10
    234                  // Changing level up... 
    235                  if (state->commandId == ZCL_MOVE_TO_LEVEL_WITH_ON_OFF_COMMAND_ID
    236                      || state->commandId == ZCL_STEP_WITH_ON_OFF_COMMAND_ID) 
   \                     ??CrossCallReturnLabel_37: (+1)
   \   00000100   0x7868             LDRB     R0,[R5, #+1]
   \   00000102   0x2804             CMP      R0,#+4
   \   00000104   0xBF18             IT       NE 
   \   00000106   0x2806             CMPNE    R0,#+6
   \   00000108   0xD106             BNE.N    ??CrossCallReturnLabel_36
    237                  {
    238                    setOnOffValue(endpoint, TRUE);
   \   0000010A   0x2101             MOVS     R1,#+1
   \   0000010C   0x.... 0x....      BL       ??Subroutine11_0
    239                                 emberAfLevelControlClusterPrint("GOT TO setOnOffValue\n"); //MN
   \                     ??CrossCallReturnLabel_40: (+1)
   \   00000110   0x.... 0x....      ADR.W    R1,?_9
   \   00000114   0x.... 0x....      BL       ?Subroutine10
    240                  }
    241                  if ((state->moveToLevel - currentLevel) < state->stepSize)
   \                     ??CrossCallReturnLabel_36: (+1)
   \   00000118   0x78AE             LDRB     R6,[R5, #+2]
   \   0000011A   0xF89D 0x1004      LDRB     R1,[SP, #+4]
   \   0000011E   0x88A8             LDRH     R0,[R5, #+4]
   \   00000120   0x1A71             SUBS     R1,R6,R1
   \   00000122   0x4281             CMP      R1,R0
   \   00000124   0xDB1C             BLT.N    ??CrossCallReturnLabel_41
    242                  {
    243                      newLevel = state->moveToLevel;  // prevent +ve overflow.
    244                  }
    245                  else
    246                  {
    247                      newLevel = currentLevel + state->stepSize;
   \   00000126   0xF89D 0x1004      LDRB     R1,[SP, #+4]
   \   0000012A   0x1846             ADDS     R6,R0,R1
   \   0000012C   0xE018             B.N      ??CrossCallReturnLabel_41
    248                  }        
    249                } 
    250                else 
    251                {
    252                  // Changing level down...        
    253                        emberAfLevelControlClusterPrint("GOT TO Changing level down"); //MN
   \                     ??emberAfLevelControlClusterServerTickCallback_6: (+1)
   \   0000012E   0x.... 0x....      ADR.W    R1,?_10
   \   00000132   0x.... 0x....      BL       ?Subroutine10
    254                  
    255                  if ((currentLevel - state->moveToLevel) < state->stepSize)
   \                     ??CrossCallReturnLabel_35: (+1)
   \   00000136   0x78AE             LDRB     R6,[R5, #+2]
   \   00000138   0xF89D 0x1004      LDRB     R1,[SP, #+4]
   \   0000013C   0x88A8             LDRH     R0,[R5, #+4]
   \   0000013E   0x1B89             SUBS     R1,R1,R6
   \   00000140   0x4281             CMP      R1,R0
   \   00000142   0xBFA4             ITT      GE 
   \   00000144   0xF89D 0x1004      LDRBGE   R1,[SP, #+4]
   \   00000148   0x1A0E             SUBGE    R6,R1,R0
    256                  {
    257                      newLevel = state->moveToLevel;  // prevent -ve overflow.
    258                  }
    259                  else
    260                  {
    261                      newLevel = currentLevel - state->stepSize;
    262                  }         
    263                  if (newLevel == minLevel) 
   \   0000014A   0x7838             LDRB     R0,[R7, #+0]
   \   0000014C   0xB2B6             UXTH     R6,R6
   \   0000014E   0x4286             CMP      R6,R0
   \   00000150   0xD106             BNE.N    ??CrossCallReturnLabel_41
    264                  {
    265                    if (state->commandId == ZCL_MOVE_TO_LEVEL_WITH_ON_OFF_COMMAND_ID
    266                        || state->commandId == ZCL_STEP_WITH_ON_OFF_COMMAND_ID) 
   \   00000152   0x7868             LDRB     R0,[R5, #+1]
   \   00000154   0x2804             CMP      R0,#+4
   \   00000156   0xBF18             IT       NE 
   \   00000158   0x2806             CMPNE    R0,#+6
   \   0000015A   0xD101             BNE.N    ??CrossCallReturnLabel_41
    267                    {
    268                      setOnOffValue(endpoint, FALSE);
   \   0000015C   0x.... 0x....      BL       ?Subroutine11
    269                    }
    270                  }
    271                }
    272                
    273                emberAfLevelControlClusterPrint("Event: move Level %x->%x ", currentLevel, newLevel);
   \                     ??CrossCallReturnLabel_41: (+1)
   \   00000160   0xB2B6             UXTH     R6,R6
   \   00000162   0xF89D 0x2004      LDRB     R2,[SP, #+4]
   \   00000166   0x.... 0x....      ADR.W    R1,?_11
   \   0000016A   0x4633             MOV      R3,R6
   \   0000016C   0x.... 0x....      BL       ?Subroutine9
    274                //emberAfLevelControlClusterPrintln("(diff %p%x)", state->moveToLevelUp ? "+" : "-",  amountToMove);
    275                
    276          #ifdef ZCL_USING_LEVEL_CONTROL_CLUSTER_LEVEL_CONTROL_REMAINING_TIME_ATTRIBUTE
    277                {
    278                  int16u remainingTime = ((int16u)(state->transitionTime
    279                                                  - state->elapsedTime)) / 100;
    280                  status = emberAfWriteServerAttribute(endpoint,
    281                                                       ZCL_LEVEL_CONTROL_CLUSTER_ID,
    282                                                       ZCL_LEVEL_CONTROL_REMAINING_TIME_ATTRIBUTE_ID,
    283                                                       (int8u *)&remainingTime,
    284                                                       sizeof(remainingTime));
    285                  if(status != EMBER_ZCL_STATUS_SUCCESS) 
    286                  {
    287                    emberAfLevelControlClusterPrintln("ERR: writing remaining time %x", status);
    288                  }
    289                }
    290          #endif
    291              }
    292              break;
   \                     ??CrossCallReturnLabel_31: (+1)
   \   00000170   0xE025             B.N      ??emberAfLevelControlClusterServerTickCallback_3
    293          
    294            case ZCL_MOVE_COMMAND_ID:
    295            case ZCL_MOVE_WITH_ON_OFF_COMMAND_ID:
    296              // adjust either up or down
    297              if (state->moveMode == EMBER_ZCL_MOVE_MODE_UP) 
   \                     ??emberAfLevelControlClusterServerTickCallback_7: (+1)
   \   00000172   0x78EA             LDRB     R2,[R5, #+3]
   \   00000174   0xB96A             CBNZ.N   R2,??emberAfLevelControlClusterServerTickCallback_8
    298              {
    299                newLevel++;
   \   00000176   0x1C76             ADDS     R6,R6,#+1
    300                if (state->commandId == ZCL_MOVE_WITH_ON_OFF_COMMAND_ID) 
   \   00000178   0x2805             CMP      R0,#+5
   \   0000017A   0xD102             BNE.N    ??CrossCallReturnLabel_39
    301                {
    302                  setOnOffValue(endpoint, TRUE);
   \   0000017C   0x2101             MOVS     R1,#+1
   \   0000017E   0x.... 0x....      BL       ??Subroutine11_0
    303                }
   \                     ??CrossCallReturnLabel_39: (+1)
   \   00000182   0x7878             LDRB     R0,[R7, #+1]
   \   00000184   0xB2B6             UXTH     R6,R6
   \   00000186   0x42B0             CMP      R0,R6
   \   00000188   0xD211             BCS.N    ??emberAfLevelControlClusterServerTickCallback_9
    304                // make sure we dont go over the max
    305                if (newLevel > maxLevel) 
    306                {
    307                  newLevel = maxLevel;
   \   0000018A   0x4606             MOV      R6,R0
    308                  emAfDeactivateLevelControl(state);
   \   0000018C   0x2000             MOVS     R0,#+0
   \   0000018E   0x7028             STRB     R0,[R5, #+0]
    309                }
    310              }
   \   00000190   0xE00D             B.N      ??emberAfLevelControlClusterServerTickCallback_9
    311              else if (state->moveMode == EMBER_ZCL_MOVE_MODE_DOWN) 
   \                     ??emberAfLevelControlClusterServerTickCallback_8: (+1)
   \   00000192   0x2A01             CMP      R2,#+1
   \   00000194   0xD10B             BNE.N    ??emberAfLevelControlClusterServerTickCallback_9
    312              {
    313                newLevel--;
   \   00000196   0x1E76             SUBS     R6,R6,#+1
    314                // make sure we dont go under 0
    315                // unsigned, the number wraps which means the high byte gets a value
    316                if (HIGH_BYTE(newLevel) > 0) 
   \   00000198   0xB2B6             UXTH     R6,R6
   \   0000019A   0x0A32             LSRS     R2,R6,#+8
   \   0000019C   0xD007             BEQ.N    ??emberAfLevelControlClusterServerTickCallback_9
    317                {
    318                  newLevel = minLevel;
   \   0000019E   0x460E             MOV      R6,R1
    319                  emAfDeactivateLevelControl(state);
   \   000001A0   0x2100             MOVS     R1,#+0
   \   000001A2   0x7029             STRB     R1,[R5, #+0]
    320                  if (state->commandId == ZCL_MOVE_WITH_ON_OFF_COMMAND_ID) 
   \   000001A4   0x2805             CMP      R0,#+5
   \   000001A6   0xBF04             ITT      EQ 
    321                  {
    322                    setOnOffValue(endpoint, FALSE);
   \   000001A8   0x4620             MOVEQ    R0,R4
   \   000001AA   0x.... 0x....      BLEQ     setOnOffValue
    323                  }
    324                }
    325              }
    326              emberAfLevelControlClusterPrintln("Event: move Level %x->%x", currentLevel, newLevel);
   \                     ??emberAfLevelControlClusterServerTickCallback_9: (+1)
   \   000001AE   0xF89D 0x2004      LDRB     R2,[SP, #+4]
   \   000001B2   0x.... 0x....      ADR.W    R1,?_12
   \   000001B6   0x4633             MOV      R3,R6
   \   000001B8   0x2020             MOVS     R0,#+32
   \   000001BA   0x.... 0x....      BL       emberAfPrintln
    327              break;
    328            }
    329          
    330            // newLevel is 2 bytes to detect rollover in either direction
    331            // need to make it 1 byte to pass to the write attributes call
    332            setNewLevel = LOW_BYTE(newLevel);
    333           
    334            // set the current level, implement a callback if you want
    335            // hardware action at this point.
    336            status = emberAfWriteServerAttribute(endpoint,
    337                                                 ZCL_LEVEL_CONTROL_CLUSTER_ID,
    338                                                 ZCL_CURRENT_LEVEL_ATTRIBUTE_ID,
    339                                                 (int8u *)&setNewLevel,
    340                                                 ZCL_INT8U_ATTRIBUTE_TYPE);
   \                     ??emberAfLevelControlClusterServerTickCallback_3: (+1)
   \   000001BE   0x2020             MOVS     R0,#+32
   \   000001C0   0x9000             STR      R0,[SP, #+0]
   \   000001C2   0xF88D 0x6005      STRB     R6,[SP, #+5]
   \   000001C6   0xF10D 0x0305      ADD      R3,SP,#+5
   \   000001CA   0x.... 0x....      BL       ?Subroutine4
    341            if (status != EMBER_ZCL_STATUS_SUCCESS) 
   \                     ??CrossCallReturnLabel_2: (+1)
   \   000001CE   0xB120             CBZ.N    R0,??CrossCallReturnLabel_12
    342            {
    343              emberAfLevelControlClusterPrintln("Err: writing current level %x", status);
   \   000001D0   0x4602             MOV      R2,R0
   \   000001D2   0x.... 0x....      ADR.W    R1,?_13
   \   000001D6   0x.... 0x....      BL       ??Subroutine5_0
    344            }
    345            
    346            emberAfPluginAuroraLevelControlSetNewLevelCallback(newLevel);
   \                     ??CrossCallReturnLabel_12: (+1)
   \   000001DA   0xB2F0             UXTB     R0,R6
   \   000001DC   0x.... 0x....      BL       emberAfPluginAuroraLevelControlSetNewLevelCallback
    347            
    348            // the scene has been changed (the value of level has changed) so
    349            // the current scene as descibed in the attribute table is invalid,
    350            // so mark it as invalid (just writes the valid/invalid attribute)
    351            if (emberAfContainsServer(endpoint, ZCL_SCENES_CLUSTER_ID)) 
   \   000001E0   0x2105             MOVS     R1,#+5
   \   000001E2   0x4620             MOV      R0,R4
   \   000001E4   0x.... 0x....      BL       emberAfContainsServer
   \   000001E8   0xB110             CBZ.N    R0,??emberAfLevelControlClusterServerTickCallback_10
    352            {
    353              emberAfScenesClusterMakeInvalidCallback(endpoint);
   \   000001EA   0x4620             MOV      R0,R4
   \   000001EC   0x.... 0x....      BL       emberAfScenesClusterMakeInvalidCallback
    354            }
    355          }
   \                     ??emberAfLevelControlClusterServerTickCallback_10: (+1)
   \   000001F0   0xBDF7             POP      {R0-R2,R4-R7,PC}  ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine11: (+1)
   \   00000000   0x2100             MOVS     R1,#+0
   \                     ??Subroutine11_0: (+1)
   \   00000002   0x4620             MOV      R0,R4
   \   00000004   0x....             B.N      setOnOffValue

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine10: (+1)
   \   00000000   0x2020             MOVS     R0,#+32
   \   00000002   0x.... 0x....      B.W      emberAfPrint

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine4: (+1)
   \   00000000   0x2200             MOVS     R2,#+0
   \   00000002   0x2108             MOVS     R1,#+8
   \   00000004   0x4620             MOV      R0,R4
   \   00000006   0x.... 0x....      B.W      emberAfWriteServerAttribute

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine5: (+1)
   \   00000000   0x.... 0x....      ADR.W    R1,?_3
   \                     ??Subroutine5_0: (+1)
   \   00000004   0x2020             MOVS     R0,#+32
   \   00000006   0x.... 0x....      B.W      emberAfPrintln

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine9: (+1)
   \   00000000   0x2020             MOVS     R0,#+32
   \   00000002   0x.... 0x....      B.W      emberAfPrint
    356          

   \                                 In section .text, align 2, keep-with-next
    357          static void setOnOffValue(int8u endpoint, boolean onOff)
    358          {   
   \                     setOnOffValue: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x460D             MOV      R5,R1
   \   00000004   0x4604             MOV      R4,R0
    359            if (emberAfContainsServer(endpoint, ZCL_ON_OFF_CLUSTER_ID)) 
   \   00000006   0x2106             MOVS     R1,#+6
   \   00000008   0x.... 0x....      BL       emberAfContainsServer
   \   0000000C   0xB180             CBZ.N    R0,??setOnOffValue_0
    360            {
    361              emberAfLevelControlClusterPrintln("Setting on/off to %p due to level change",
    362                                                onOff ? "ON" : "OFF");
   \   0000000E   0x2D00             CMP      R5,#+0
   \   00000010   0xBF14             ITE      NE 
   \   00000012   0x....             ADRNE.N  R2,??DataTable42  ;; 0x4F, 0x4E, 0x00, 0x00
   \   00000014   0x....             ADREQ.N  R2,??DataTable42_1  ;; "OFF"
   \   00000016   0x.... 0x....      ADR.W    R1,?_14
   \   0000001A   0x.... 0x....      BL       ??Subroutine5_0
    363              emberAfOnOffClusterSetValueCallback(endpoint,
    364                                   (onOff ? ZCL_ON_COMMAND_ID : ZCL_OFF_COMMAND_ID),
    365                                   TRUE); 
   \                     ??CrossCallReturnLabel_11: (+1)
   \   0000001E   0x4620             MOV      R0,R4
   \   00000020   0x0029             MOVS     R1,R5
   \   00000022   0xE8BD 0x4038      POP      {R3-R5,LR}
   \   00000026   0xBF18             IT       NE 
   \   00000028   0x2101             MOVNE    R1,#+1
   \   0000002A   0x2201             MOVS     R2,#+1
   \   0000002C   0x.... 0x....      B.W      emberAfOnOffClusterSetValueCallback
    366            }       
    367          }
   \                     ??setOnOffValue_0: (+1)
   \   00000030   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    368          

   \                                 In section .text, align 2, keep-with-next
    369          boolean emberAfLevelControlClusterMoveToLevelCallback(int8u level, int16u transitionTime)
    370          {
   \                     emberAfLevelControlClusterMoveToLevelCallback: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x.... 0x....      BL       ?Subroutine6
    371              emberAfLevelControlClusterPrintln("%pMOVE_TO_LEVEL %x %2x", "RX level-control:", level, transitionTime);    
   \                     ??CrossCallReturnLabel_18: (+1)
   \   00000006   0x.... 0x....      ADR.W    R1,?_17
   \   0000000A   0x.... 0x....      BL       ?Subroutine8
    372              EmberAfStatus status = emAfLevelControlClusterMoveToLevelHandler(ZCL_MOVE_TO_LEVEL_COMMAND_ID, level, transitionTime);    
   \                     ??CrossCallReturnLabel_29: (+1)
   \   0000000E   0x462A             MOV      R2,R5
   \   00000010   0x4621             MOV      R1,R4
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x.... 0x....      BL       emAfLevelControlClusterMoveToLevelHandler
   \   00000018   0x4604             MOV      R4,R0
    373              
    374              emberAfLevelControlClusterPrintln("GOT TO ln361. Status is: %d", status);   
   \   0000001A   0x4622             MOV      R2,R4
   \   0000001C   0x.... 0x....      ADR.W    R1,?_19
   \   00000020   0x.... 0x....      BL       ??Subroutine5_0
    375              //MN
    376              emberAfSendImmediateDefaultResponse(status);  // Send ZCl cmd default response.        
   \                     ??CrossCallReturnLabel_10: (+1)
   \   00000024   0x4620             MOV      R0,R4
   \   00000026   0x....             B.N      ??Subroutine15_0
    377              return TRUE;  
    378          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine6: (+1)
   \   00000000   0x4604             MOV      R4,R0
   \   00000002   0x460D             MOV      R5,R1
   \   00000004   0x9500             STR      R5,[SP, #+0]
   \   00000006   0x4623             MOV      R3,R4
   \   00000008   0x.... 0x....      ADR.W    R2,?_18
   \   0000000C   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ??Subroutine15_0: (+1)
   \   00000000   0x.... 0x....      BL       emberAfSendImmediateDefaultResponse
   \   00000004   0x2001             MOVS     R0,#+1
   \   00000006   0xBD32             POP      {R1,R4,R5,PC}    ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine8: (+1)
   \   00000000   0x2020             MOVS     R0,#+32
   \   00000002   0x.... 0x....      B.W      emberAfPrintln
    379          

   \                                 In section .text, align 2, keep-with-next
    380          boolean emberAfLevelControlClusterMoveToLevelWithOnOffCallback(int8u level, int16u transitionTime)
    381          {
   \                     emberAfLevelControlClusterMoveToLevelWithOnOffCallback: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x.... 0x....      BL       ?Subroutine6
    382              emberAfLevelControlClusterPrintln("%pMOVE_TO_LEVEL_WITH_ON_OFF %x %2x", "RX level-control:", level, transitionTime);  
   \                     ??CrossCallReturnLabel_19: (+1)
   \   00000006   0x.... 0x....      ADR.W    R1,?_20
   \   0000000A   0x.... 0x....      BL       ?Subroutine8
    383              EmberAfStatus status = emAfLevelControlClusterMoveToLevelHandler(ZCL_MOVE_TO_LEVEL_WITH_ON_OFF_COMMAND_ID, level, transitionTime);  
   \                     ??CrossCallReturnLabel_28: (+1)
   \   0000000E   0x462A             MOV      R2,R5
   \   00000010   0x4621             MOV      R1,R4
   \   00000012   0x2004             MOVS     R0,#+4
   \   00000014   0x.... 0x....      BL       emAfLevelControlClusterMoveToLevelHandler
   \   00000018   0x4604             MOV      R4,R0
    384              
    385                      emberAfLevelControlClusterPrintln("GOT TO ln372. Status is: %d", status);   
   \   0000001A   0x4622             MOV      R2,R4
   \   0000001C   0x.... 0x....      ADR.W    R1,?_21
   \   00000020   0x.... 0x....      BL       ??Subroutine5_0
    386              //MN
    387              
    388              emberAfSendImmediateDefaultResponse(status);  // Send ZCl cmd default response.        
   \                     ??CrossCallReturnLabel_9: (+1)
   \   00000024   0x4620             MOV      R0,R4
   \   00000026   0x....             B.N      ??Subroutine15_0
    389              return TRUE;  
    390          }
    391          

   \                                 In section .text, align 2, keep-with-next
    392          boolean emberAfLevelControlClusterMoveCallback(int8u moveMode, int8u rate)
    393          {
   \                     emberAfLevelControlClusterMoveCallback: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x.... 0x....      BL       ?Subroutine6
    394              emberAfLevelControlClusterPrintln("%pMOVE %x %x", "RX level-control:", moveMode, rate);
   \                     ??CrossCallReturnLabel_20: (+1)
   \   00000006   0x.... 0x....      ADR.W    R1,?_22
   \   0000000A   0x.... 0x....      BL       ?Subroutine8
    395              EmberAfStatus status = emAfLevelControlClusterMoveHandler(ZCL_MOVE_COMMAND_ID, moveMode, rate);
   \                     ??CrossCallReturnLabel_27: (+1)
   \   0000000E   0x....             B.N      ?Subroutine1
    396              emberAfSendImmediateDefaultResponse(status);  // Send ZCl cmd default response.        
    397              return TRUE;
    398          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1: (+1)
   \   00000000   0x462A             MOV      R2,R5
   \   00000002   0x4621             MOV      R1,R4
   \   00000004   0x2001             MOVS     R0,#+1
   \   00000006   0x.... 0x....      BL       emAfLevelControlClusterMoveHandler
   \   0000000A                      REQUIRE ??Subroutine15_0
   \   0000000A                      ;; // Fall through to label ??Subroutine15_0
    399          

   \                                 In section .text, align 2, keep-with-next
    400          boolean emberAfLevelControlClusterMoveWithOnOffCallback(int8u moveMode, int8u rate)
    401          {
   \                     emberAfLevelControlClusterMoveWithOnOffCallback: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x.... 0x....      BL       ?Subroutine6
    402              emberAfLevelControlClusterPrintln("%pMOVE_WITH_ON_OFF %x %x", "RX level-control:", moveMode, rate);
   \                     ??CrossCallReturnLabel_21: (+1)
   \   00000006   0x.... 0x....      ADR.W    R1,?_23
   \   0000000A   0x.... 0x....      BL       ?Subroutine8
    403              emAfLevelControlClusterMoveHandler(ZCL_MOVE_WITH_ON_OFF_COMMAND_ID, moveMode, rate);
   \                     ??CrossCallReturnLabel_26: (+1)
   \   0000000E   0x462A             MOV      R2,R5
   \   00000010   0x4621             MOV      R1,R4
   \   00000012   0x2005             MOVS     R0,#+5
   \   00000014   0x.... 0x....      BL       emAfLevelControlClusterMoveHandler
    404              EmberAfStatus status = emAfLevelControlClusterMoveHandler(ZCL_MOVE_COMMAND_ID, moveMode, rate);
   \   00000018                      REQUIRE ?Subroutine1
   \   00000018                      ;; // Fall through to label ?Subroutine1
    405              emberAfSendImmediateDefaultResponse(status);  // Send ZCl cmd default response.        
    406              return TRUE;
    407          }
    408          

   \                                 In section .text, align 2, keep-with-next
    409          boolean emberAfLevelControlClusterStepCallback(int8u stepMode, int8u stepSize, int16u transitionTime)
    410          {
   \                     emberAfLevelControlClusterStepCallback: (+1)
   \   00000000   0xB57C             PUSH     {R2-R6,LR}
   \   00000002   0x.... 0x....      BL       ?Subroutine7
    411              emberAfLevelControlClusterPrintln("%pSTEP %x %x %2x", "RX level-control:", stepMode, stepSize, transitionTime);  
   \                     ??CrossCallReturnLabel_22: (+1)
   \   00000006   0x.... 0x....      ADR.W    R1,?_24
   \   0000000A   0x.... 0x....      BL       ?Subroutine8
    412              EmberAfStatus status = emAfLevelControlClusterStepHandler(ZCL_STEP_COMMAND_ID, stepMode, stepSize, transitionTime);
   \                     ??CrossCallReturnLabel_25: (+1)
   \   0000000E   0x4633             MOV      R3,R6
   \   00000010   0x462A             MOV      R2,R5
   \   00000012   0x4621             MOV      R1,R4
   \   00000014   0x2002             MOVS     R0,#+2
   \   00000016   0x....             B.N      ?Subroutine2
    413              emberAfSendImmediateDefaultResponse(status);  // Send ZCl cmd default response.        
    414              return TRUE;  
    415          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2: (+1)
   \   00000000   0x.... 0x....      BL       emAfLevelControlClusterStepHandler
   \   00000004   0x.... 0x....      BL       emberAfSendImmediateDefaultResponse
   \   00000008   0x2001             MOVS     R0,#+1
   \   0000000A   0xBD76             POP      {R1,R2,R4-R6,PC}  ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine7: (+1)
   \   00000000   0x4604             MOV      R4,R0
   \   00000002   0x460D             MOV      R5,R1
   \   00000004   0x4616             MOV      R6,R2
   \   00000006   0x9601             STR      R6,[SP, #+4]
   \   00000008   0x9500             STR      R5,[SP, #+0]
   \   0000000A   0x4623             MOV      R3,R4
   \   0000000C   0x.... 0x....      ADR.W    R2,?_18
   \   00000010   0x4770             BX       LR
    416          

   \                                 In section .text, align 2, keep-with-next
    417          boolean emberAfLevelControlClusterStepWithOnOffCallback(int8u stepMode, int8u stepSize, int16u transitionTime)
    418          {
   \                     emberAfLevelControlClusterStepWithOnOffCallback: (+1)
   \   00000000   0xB57C             PUSH     {R2-R6,LR}
   \   00000002   0x.... 0x....      BL       ?Subroutine7
    419              emberAfLevelControlClusterPrintln("%pSTEP_WITH_ON_OFF %x %x %2x", "RX level-control:", stepMode, stepSize, transitionTime);
   \                     ??CrossCallReturnLabel_23: (+1)
   \   00000006   0x.... 0x....      ADR.W    R1,?_25
   \   0000000A   0x.... 0x....      BL       ?Subroutine8
    420              EmberAfStatus status = emAfLevelControlClusterStepHandler(ZCL_STEP_WITH_ON_OFF_COMMAND_ID, stepMode, stepSize, transitionTime);
   \                     ??CrossCallReturnLabel_24: (+1)
   \   0000000E   0x4633             MOV      R3,R6
   \   00000010   0x462A             MOV      R2,R5
   \   00000012   0x4621             MOV      R1,R4
   \   00000014   0x2006             MOVS     R0,#+6
   \   00000016                      REQUIRE ?Subroutine2
   \   00000016                      ;; // Fall through to label ?Subroutine2
    421              emberAfSendImmediateDefaultResponse(status);  // Send ZCl cmd default response.        
    422              return TRUE;      
    423          }
    424          

   \                                 In section .text, align 2, keep-with-next
    425          boolean emberAfLevelControlClusterStopCallback(void)
    426          {
   \                     emberAfLevelControlClusterStopCallback: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    427              emberAfLevelControlClusterPrintln("%pSTOP", "RX level-control:");
   \   00000002   0x.... 0x....      ADR.W    R2,?_18
   \   00000006   0x.... 0x....      ADR.W    R1,?_26
   \   0000000A   0x.... 0x....      BL       ??Subroutine5_0
    428              EmberAfStatus status = emAfLevelControlClusterStopHandler(ZCL_STOP_COMMAND_ID);
   \                     ??CrossCallReturnLabel_8: (+1)
   \   0000000E   0x2003             MOVS     R0,#+3
   \   00000010   0x....             B.N      ?Subroutine0
    429              emberAfSendImmediateDefaultResponse(status);  // Send ZCl cmd default response.        
    430              return TRUE;      
    431          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \   00000000   0x.... 0x....      BL       emAfLevelControlClusterStopHandler
   \   00000004   0x.... 0x....      BL       emberAfSendImmediateDefaultResponse
   \   00000008   0x2001             MOVS     R0,#+1
   \   0000000A   0xBD02             POP      {R1,PC}          ;; return
    432          

   \                                 In section .text, align 2, keep-with-next
    433          boolean emberAfLevelControlClusterStopWithOnOffCallback(void)
    434          {
   \                     emberAfLevelControlClusterStopWithOnOffCallback: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    435              emberAfLevelControlClusterPrintln("%pSTOP_WITH_ON_OFF", "RX level-control:");
   \   00000002   0x.... 0x....      ADR.W    R2,?_18
   \   00000006   0x.... 0x....      ADR.W    R1,?_27
   \   0000000A   0x.... 0x....      BL       ??Subroutine5_0
    436              EmberAfStatus status = emAfLevelControlClusterStopHandler(ZCL_STOP_WITH_ON_OFF_COMMAND_ID);
   \                     ??CrossCallReturnLabel_7: (+1)
   \   0000000E   0x2007             MOVS     R0,#+7
   \   00000010                      REQUIRE ?Subroutine0
   \   00000010                      ;; // Fall through to label ?Subroutine0
    437              emberAfSendImmediateDefaultResponse(status);  // Send ZCl cmd default response.        
    438              return TRUE;
    439          }
    440          

   \                                 In section .text, align 2, keep-with-next
    441          static EmberAfStatus emAfLevelControlClusterMoveToLevelHandler(int8u commandId, int8u level, int16u transitionTime)
    442          {
   \                     emAfLevelControlClusterMoveToLevelHandler: (+1)
   \   00000000   0xE92D 0x43FE      PUSH     {R1-R9,LR}
    443              EmberAfStatus status;
    444              int8u currentLevel;
    445              int32u transTimeMs;
    446          
    447              EmberAfLevelControlState* state = emAfGetLevelControlState(emberAfCurrentEndpoint());  
   \   00000004   0x.... 0x....      LDR.W    R5,??DataTable45_2
   \   00000008   0x4604             MOV      R4,R0
   \   0000000A   0x6828             LDR      R0,[R5, #+0]
   \   0000000C   0x6800             LDR      R0,[R0, #+0]
   \   0000000E   0x7940             LDRB     R0,[R0, #+5]
   \   00000010   0x4688             MOV      R8,R1
   \   00000012   0x4617             MOV      R7,R2
   \   00000014   0x.... 0x....      BL       emAfGetLevelControlState
   \   00000018   0x0006             MOVS     R6,R0
    448              if (state == NULL) 
   \   0000001A   0xBF08             IT       EQ 
   \   0000001C   0x2001             MOVEQ    R0,#+1
    449              {
    450                  return EMBER_ZCL_STATUS_FAILURE;        
   \   0000001E   0xD050             BEQ.N    ??emAfLevelControlClusterMoveToLevelHandler_0
    451              }
    452          
    453              // Cancel any currently active command before fiddling with the state.
    454              emAfDeactivateLevelControl(state);
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0x7030             STRB     R0,[R6, #+0]
    455          
    456              status = emberAfReadServerAttribute(emberAfCurrentEndpoint(),
    457                                                ZCL_LEVEL_CONTROL_CLUSTER_ID,
    458                                                ZCL_CURRENT_LEVEL_ATTRIBUTE_ID,
    459                                                (int8u *)&currentLevel,
    460                                                sizeof(currentLevel));
   \   00000024   0x.... 0x....      BL       ?Subroutine3
   \                     ??CrossCallReturnLabel_1: (+1)
   \   00000028   0xEA5F 0x0900      MOVS     R9,R0
    461              if (status != EMBER_ZCL_STATUS_SUCCESS) 
   \   0000002C   0xD003             BEQ.N    ??emAfLevelControlClusterMoveToLevelHandler_1
    462              {
    463                  emberAfLevelControlClusterPrintln("ERR: reading current level %x", status);
   \   0000002E   0x464A             MOV      R2,R9
   \   00000030   0x.... 0x....      ADR.W    R1,?_3
   \   00000034   0xE042             B.N      ??emAfLevelControlClusterMoveToLevelHandler_2
    464                  return status;
    465              }
    466          
    467              // Don't want to use the on level here
    468              state->useOnLevel = FALSE;
   \                     ??emAfLevelControlClusterMoveToLevelHandler_1: (+1)
   \   00000036   0x71F0             STRB     R0,[R6, #+7]
    469          
    470          
    471              
    472              // Keep the new level within range.
    473              if (level >= maxLevel) 
   \   00000038   0x.... 0x....      LDR.W    R0,??DataTable45_1
   \   0000003C   0x7841             LDRB     R1,[R0, #+1]
   \   0000003E   0x4588             CMP      R8,R1
   \   00000040   0xBF28             IT       CS 
   \   00000042   0x4688             MOVCS    R8,R1
    474              {
    475                  state->moveToLevel = maxLevel;
   \   00000044   0xD203             BCS.N    ??emAfLevelControlClusterMoveToLevelHandler_3
    476              } 
    477              else if (level <= minLevel) 
   \   00000046   0x7800             LDRB     R0,[R0, #+0]
   \   00000048   0x4540             CMP      R0,R8
   \   0000004A   0xBF28             IT       CS 
   \   0000004C   0x4680             MOVCS    R8,R0
    478              {
    479                  state->moveToLevel = minLevel;
    480              } 
    481              else 
    482              {
    483                  state->moveToLevel = level;
   \                     ??emAfLevelControlClusterMoveToLevelHandler_3: (+1)
   \   0000004E   0xF886 0x8002      STRB     R8,[R6, #+2]
    484              }
    485              
    486                  if (state->moveToLevel == currentLevel) //MN to avoid them being the same, reduce the currentLevel
   \   00000052   0x78B0             LDRB     R0,[R6, #+2]
   \   00000054   0xF89D 0x1004      LDRB     R1,[SP, #+4]
   \   00000058   0x4288             CMP      R0,R1
   \   0000005A   0xD10F             BNE.N    ??emAfLevelControlClusterMoveToLevelHandler_4
    487              {
    488                              emberAfLevelControlClusterPrintln("GOT TO THE HODGE PODGE\n");
   \   0000005C   0x.... 0x....      BL       ?Subroutine14
    489                        
    490                emberAfLevelControlClusterPrintln("state->moveToLevel before %x\n", state->moveToLevel);
   \                     ??CrossCallReturnLabel_50: (+1)
   \   00000060   0x78B2             LDRB     R2,[R6, #+2]
   \   00000062   0x.... 0x....      ADR.W    R1,?_29
   \   00000066   0x.... 0x....      BL       ??Subroutine5_0
    491          
    492                state->moveToLevel++;
   \                     ??CrossCallReturnLabel_6: (+1)
   \   0000006A   0x78B0             LDRB     R0,[R6, #+2]
    493                        emberAfLevelControlClusterPrintln("state->moveToLevel after %x\n", state->moveToLevel);
   \   0000006C   0x.... 0x....      ADR.W    R1,?_30
   \   00000070   0x1C42             ADDS     R2,R0,#+1
   \   00000072   0x70B2             STRB     R2,[R6, #+2]
   \   00000074   0x2020             MOVS     R0,#+32
   \   00000076   0xB2D2             UXTB     R2,R2
   \   00000078   0x.... 0x....      BL       emberAfPrintln
    494          
    495              }
    496          
    497                emberAfLevelControlClusterPrint("ln495 Current level is: %d state->moveToLevel is: %d\n", currentLevel, state->moveToLevel); //MN
   \                     ??emAfLevelControlClusterMoveToLevelHandler_4: (+1)
   \   0000007C   0x78B3             LDRB     R3,[R6, #+2]
   \   0000007E   0xF89D 0x2004      LDRB     R2,[SP, #+4]
   \   00000082   0x.... 0x....      ADR.W    R1,?_31
   \   00000086   0x.... 0x....      BL       ?Subroutine9
    498          
    499                  // Figure out if we're moving up or down.
    500              if (state->moveToLevel > currentLevel)
   \                     ??CrossCallReturnLabel_30: (+1)
   \   0000008A   0x.... 0x....      BL       ?Subroutine12
   \                     ??CrossCallReturnLabel_43: (+1)
   \   0000008E   0xD219             BCS.N    ??emAfLevelControlClusterMoveToLevelHandler_5
    501              {
    502                  state->moveToLevelUp = TRUE;
   \   00000090   0x2001             MOVS     R0,#+1
   \                     ??emAfLevelControlClusterMoveToLevelHandler_6: (+1)
   \   00000092   0x71B0             STRB     R0,[R6, #+6]
    503              } 
    504              else if (state->moveToLevel < currentLevel) 
    505              {
    506                  state->moveToLevelUp = FALSE;
    507              } 
    508              else 
    509              {
    510                  emberAfLevelControlClusterPrintln("RETURNING SUCCESS BECAUSE NO CHANGE IN LEVEL\n");//MN
    511                  // No change in level, so just send default response.
    512                  return EMBER_ZCL_STATUS_SUCCESS;        
    513              }
    514                  
    515              // If the Transition time field takes the value 0xFFFF, then the time taken to
    516              // move to the new level shall instead be determined by the On/Off Transition
    517              // Time attribute.  If On/Off Transition Time, which is an optional attribute,
    518              // is not present, the device shall move to its new level as fast as it is
    519              // able.
    520              if (transitionTime == 0xFFFF) 
   \   00000094   0xF64F 0x70FF      MOVW     R0,#+65535
   \   00000098   0x4287             CMP      R7,R0
   \   0000009A   0xD11A             BNE.N    ??emAfLevelControlClusterMoveToLevelHandler_7
    521              {
    522          #ifdef ZCL_USING_LEVEL_CONTROL_CLUSTER_ON_OFF_TRANSITION_TIME_ATTRIBUTE
    523                  status = emberAfReadServerAttribute(emberAfCurrentEndpoint(),
    524                                                  ZCL_LEVEL_CONTROL_CLUSTER_ID,
    525                                                  ZCL_ON_OFF_TRANSITION_TIME_ATTRIBUTE_ID,
    526                                                  (int8u*)&transTimeMs,
    527                                                  sizeof(transTimeMs));
   \   0000009C   0x2004             MOVS     R0,#+4
   \   0000009E   0x9000             STR      R0,[SP, #+0]
   \   000000A0   0xAB02             ADD      R3,SP,#+8
   \   000000A2   0x6828             LDR      R0,[R5, #+0]
   \   000000A4   0x6800             LDR      R0,[R0, #+0]
   \   000000A6   0x7940             LDRB     R0,[R0, #+5]
   \   000000A8   0x2210             MOVS     R2,#+16
   \   000000AA   0x2108             MOVS     R1,#+8
   \   000000AC   0x.... 0x....      BL       emberAfReadServerAttribute
   \   000000B0   0xEA5F 0x0900      MOVS     R9,R0
    528                  if (status != EMBER_ZCL_STATUS_SUCCESS) 
   \   000000B4   0xD00D             BEQ.N    ??emAfLevelControlClusterMoveToLevelHandler_7
    529                  {
    530                      emberAfLevelControlClusterPrintln("ERR: reading on/off transition time %x",
    531                                                          status);
   \   000000B6   0x464A             MOV      R2,R9
   \   000000B8   0x.... 0x....      ADR.W    R1,?_33
   \                     ??emAfLevelControlClusterMoveToLevelHandler_2: (+1)
   \   000000BC   0x.... 0x....      BL       ??Subroutine5_0
    532                      return status;
   \                     ??CrossCallReturnLabel_5: (+1)
   \   000000C0   0x4648             MOV      R0,R9
   \                     ??emAfLevelControlClusterMoveToLevelHandler_0: (+1)
   \   000000C2   0xE037             B.N      ??emAfLevelControlClusterMoveToLevelHandler_8
    533                  }
    534          
    535                  // Transition time comes in (or is stored, in the case of On/Off Transition
    536                  // Time) as tenths of a second, but we work in milliseconds.
    537                  transTimeMs = transitionTime * MILLISECOND_TICKS_PER_SECOND / 10;
    538          #else //ZCL_USING_LEVEL_CONTROL_CLUSTER_ON_OFF_TRANSITION_TIME_ATTRIBUTE
    539              // If the Transition Time field is 0xFFFF and On/Off Transition Time,
    540              // which is an optional attribute, is not present, the device shall move to
    541              // its new level as fast as it is able.
    542                  transTimeMs = FASTEST_TRANSITION_TIME;
    543          #endif //ZCL_USING_LEVEL_CONTROL_CLUSTER_ON_OFF_TRANSITION_TIME_ATTRIBUTE
    544              } 
   \                     ??emAfLevelControlClusterMoveToLevelHandler_5: (+1)
   \   000000C4   0x4288             CMP      R0,R1
   \   000000C6   0xBF38             IT       CC 
   \   000000C8   0x2000             MOVCC    R0,#+0
   \   000000CA   0xD3E2             BCC.N    ??emAfLevelControlClusterMoveToLevelHandler_6
   \   000000CC   0x.... 0x....      ADR.W    R1,?_32
   \   000000D0   0xE02C             B.N      ??emAfLevelControlClusterMoveToLevelHandler_9
    545              else 
    546              {
    547                  // Transition time comes in (or is stored, in the case of On/Off Transition
    548                  // Time) as tenths of a second, but we work in milliseconds.
    549                  transTimeMs = transitionTime * MILLISECOND_TICKS_PER_SECOND / 10;
   \                     ??emAfLevelControlClusterMoveToLevelHandler_7: (+1)
   \   000000D2   0x02B8             LSLS     R0,R7,#+10
   \   000000D4   0x210A             MOVS     R1,#+10
   \   000000D6   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   000000DA   0x9002             STR      R0,[SP, #+8]
    550              }
    551              
    552                  emberAfLevelControlClusterPrint("ln537 moveToLevelUp is: %d\n", state->moveToLevelUp); //MN
   \   000000DC   0x2020             MOVS     R0,#+32
   \   000000DE   0x79B2             LDRB     R2,[R6, #+6]
   \   000000E0   0x.... 0x....      ADR.W    R1,?_34
   \   000000E4   0x.... 0x....      BL       emberAfPrint
    553              
    554              int8u amount;
    555              if (state->moveToLevel > currentLevel)
   \   000000E8   0x.... 0x....      BL       ?Subroutine12
   \                     ??CrossCallReturnLabel_44: (+1)
   \   000000EC   0xBF39             ITTEE    CC 
   \   000000EE   0x1A47             SUBCC    R7,R0,R1
   \   000000F0   0x2001             MOVCC    R0,#+1
   \   000000F2   0x1A0F             SUBCS    R7,R1,R0
   \   000000F4   0x2000             MOVCS    R0,#+0
    556              {      
    557                  amount = state->moveToLevel - currentLevel;    
    558                  state->moveToLevelUp = TRUE;
    559              }
    560              else
    561              {      
    562                  amount = currentLevel - state->moveToLevel;    
    563                  state->moveToLevelUp = FALSE;
   \   000000F6   0x71B0             STRB     R0,[R6, #+6]
    564              }
    565              
    566              /*if (amount == 0) //MN if you are wanting to dim to the current level, it will instead increase it by 1%
    567              {
    568                amount = 1;
    569              }
    570              */
    571              
    572                  emberAfLevelControlClusterPrint("ln556 moveToLevelUp is: %d\n", state->moveToLevelUp); //MN
   \   000000F8   0x2020             MOVS     R0,#+32
   \   000000FA   0x79B2             LDRB     R2,[R6, #+6]
   \   000000FC   0x.... 0x....      ADR.W    R1,?_35
   \   00000100   0x.... 0x....      BL       emberAfPrint
    573          
    574              state->transitionTime = transTimeMs;
   \   00000104   0x9802             LDR      R0,[SP, #+8]
   \   00000106   0x6130             STR      R0,[R6, #+16]
    575              calculateEventDuration_and_stepSize(state->transitionTime, amount, &state->eventDuration, &state->stepSize);     
   \   00000108   0x1D33             ADDS     R3,R6,#+4
   \   0000010A   0xF106 0x020C      ADD      R2,R6,#+12
   \   0000010E   0xB2F9             UXTB     R1,R7
   \   00000110   0xB280             UXTH     R0,R0
   \   00000112   0x.... 0x....      BL       calculateEventDuration_and_stepSize
    576              
    577              // The setup was successful, so mark the new state as active and return.
    578              emAfActivateLevelControl(state, emberAfCurrentEndpoint());
   \   00000116   0x6828             LDR      R0,[R5, #+0]
   \   00000118   0x6800             LDR      R0,[R0, #+0]
   \   0000011A   0x7941             LDRB     R1,[R0, #+5]
   \   0000011C   0x4630             MOV      R0,R6
   \   0000011E   0x.... 0x....      BL       emAfActivateLevelControl
    579          
    580              state->elapsedTime = 0;
   \   00000122   0x2000             MOVS     R0,#+0
   \   00000124   0x6170             STR      R0,[R6, #+20]
    581              state->commandId = commandId;
   \   00000126   0x7074             STRB     R4,[R6, #+1]
    582          
    583          #ifdef EMBER_AF_PLUGIN_ZLL_LEVEL_CONTROL_SERVER
    584              if (commandId == ZCL_MOVE_TO_LEVEL_WITH_ON_OFF_COMMAND_ID) 
    585              {
    586                  emberAfPluginZllLevelControlServerMoveToLevelWithOnOffZllExtensions(emberAfCurrentCommand());
    587              }
    588          #endif
    589            emberAfLevelControlClusterPrintln("GOT TO END OF emAfLevelControlClusterMoveToLevelHandler\n"); 
   \   00000128   0x.... 0x....      ADR.W    R1,?_36
   \                     ??emAfLevelControlClusterMoveToLevelHandler_9: (+1)
   \   0000012C   0x2020             MOVS     R0,#+32
   \   0000012E   0x.... 0x....      BL       emberAfPrintln
    590                                              //MN
    591              return EMBER_ZCL_STATUS_SUCCESS;    
   \   00000132   0x2000             MOVS     R0,#+0
   \                     ??emAfLevelControlClusterMoveToLevelHandler_8: (+1)
   \   00000134   0xE8BD 0x83FE      POP      {R1-R9,PC}       ;; return
    592          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine12: (+1)
   \   00000000   0x78B0             LDRB     R0,[R6, #+2]
   \                     ??Subroutine12_0: (+1)
   \   00000002   0xF89D 0x1004      LDRB     R1,[SP, #+4]
   \   00000006   0x4281             CMP      R1,R0
   \   00000008   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine3: (+1)
   \   00000000   0xAB01             ADD      R3,SP,#+4
   \   00000002   0x2001             MOVS     R0,#+1
   \   00000004   0x9000             STR      R0,[SP, #+0]
   \   00000006   0x2200             MOVS     R2,#+0
   \   00000008   0x6828             LDR      R0,[R5, #+0]
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0x7940             LDRB     R0,[R0, #+5]
   \   0000000E   0x2108             MOVS     R1,#+8
   \   00000010   0x.... 0x....      B.W      emberAfReadServerAttribute

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine14: (+1)
   \   00000000   0x.... 0x....      ADR.W    R1,?_28
   \   00000004   0x2020             MOVS     R0,#+32
   \   00000006   0x.... 0x....      B.W      emberAfPrintln
    593          

   \                                 In section .text, align 2, keep-with-next
    594          static EmberAfStatus emAfLevelControlClusterMoveHandler(int8u commandId, int8u moveMode, int8u rate)
    595          {
   \                     emAfLevelControlClusterMoveHandler: (+1)
   \   00000000   0xE92D 0x43F0      PUSH     {R4-R9,LR}
    596              EmberAfLevelControlState *state = emAfGetLevelControlState(emberAfCurrentEndpoint());
   \   00000004   0x....             LDR.N    R5,??DataTable45_2
   \   00000006   0x4604             MOV      R4,R0
   \   00000008   0x6828             LDR      R0,[R5, #+0]
   \   0000000A   0xB083             SUB      SP,SP,#+12
   \   0000000C   0x6800             LDR      R0,[R0, #+0]
   \   0000000E   0x7940             LDRB     R0,[R0, #+5]
   \   00000010   0x460E             MOV      R6,R1
   \   00000012   0x4690             MOV      R8,R2
   \   00000014   0x.... 0x....      BL       emAfGetLevelControlState
   \   00000018   0x0007             MOVS     R7,R0
    597              EmberAfStatus status;
    598              int8u currentLevel;
    599          
    600              if (state == NULL) 
   \   0000001A   0xD102             BNE.N    ??emAfLevelControlClusterMoveHandler_0
    601              {
    602                  return EMBER_ZCL_STATUS_FAILURE;    
   \   0000001C   0x2001             MOVS     R0,#+1
   \                     ??emAfLevelControlClusterMoveHandler_1: (+1)
   \   0000001E   0xE8BD 0x83FE      POP      {R1-R9,PC}       ;; return
    603              }
    604          
    605              // Cancel any currently active command before fiddling with the state.
    606              emAfDeactivateLevelControl(state);
   \                     ??emAfLevelControlClusterMoveHandler_0: (+1)
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0x7038             STRB     R0,[R7, #+0]
    607          
    608              status = emberAfReadServerAttribute(emberAfCurrentEndpoint(),
    609                                                ZCL_LEVEL_CONTROL_CLUSTER_ID,
    610                                                ZCL_CURRENT_LEVEL_ATTRIBUTE_ID,
    611                                                (int8u *)&currentLevel,
    612                                                sizeof(currentLevel));
   \   00000026   0x.... 0x....      BL       ?Subroutine3
   \                     ??CrossCallReturnLabel_0: (+1)
   \   0000002A   0xEA5F 0x0900      MOVS     R9,R0
    613              if (status != EMBER_ZCL_STATUS_SUCCESS) 
   \   0000002E   0xD004             BEQ.N    ??emAfLevelControlClusterMoveHandler_2
    614              {
    615                  emberAfLevelControlClusterPrintln("ERR: reading current level %x", status);
   \   00000030   0x464A             MOV      R2,R9
   \   00000032   0x.... 0x....      BL       ?Subroutine5
    616                  return status;
   \                     ??CrossCallReturnLabel_17: (+1)
   \   00000036   0x4648             MOV      R0,R9
   \   00000038   0xE7F1             B.N      ??emAfLevelControlClusterMoveHandler_1
    617              }
    618          
    619              // Don't want to use the on level here
    620              state->useOnLevel = FALSE;
   \                     ??emAfLevelControlClusterMoveHandler_2: (+1)
   \   0000003A   0x71F8             STRB     R0,[R7, #+7]
    621          
    622              // Start the level calculation (initialization)
    623              state->moveMode = moveMode;
   \   0000003C   0x70FE             STRB     R6,[R7, #+3]
    624              switch (moveMode) 
   \   0000003E   0x....             LDR.N    R0,??DataTable45_1
   \   00000040   0xB116             CBZ.N    R6,??emAfLevelControlClusterMoveHandler_3
   \   00000042   0x2E01             CMP      R6,#+1
   \   00000044   0xD010             BEQ.N    ??emAfLevelControlClusterMoveHandler_4
   \   00000046   0xE018             B.N      ??emAfLevelControlClusterMoveHandler_5
    625              {
    626                  case EMBER_ZCL_MOVE_MODE_UP:
    627                      if (currentLevel == maxLevel) 
   \                     ??emAfLevelControlClusterMoveHandler_3: (+1)
   \   00000048   0xF89D 0x1004      LDRB     R1,[SP, #+4]
   \   0000004C   0x7840             LDRB     R0,[R0, #+1]
   \   0000004E   0x4281             CMP      R1,R0
   \   00000050   0xD00F             BEQ.N    ??emAfLevelControlClusterMoveHandler_6
    628                      {
    629                          return EMBER_ZCL_STATUS_SUCCESS;      
    630                      }
    631                      state->moveToLevelUp = TRUE;
   \   00000052   0x2001             MOVS     R0,#+1
   \                     ??emAfLevelControlClusterMoveHandler_7: (+1)
   \   00000054   0x71B8             STRB     R0,[R7, #+6]
    632                      break;
    633              
    634                  case EMBER_ZCL_MOVE_MODE_DOWN:
    635                      if (currentLevel == minLevel) 
    636                      {
    637                          return EMBER_ZCL_STATUS_SUCCESS;              
    638                      }
    639                      state->moveToLevelUp = FALSE;
    640                      break;
    641                      
    642                  default:
    643                      return EMBER_ZCL_STATUS_INVALID_FIELD;
    644                      
    645              }
    646          
    647              // If the Rate field is 0xFF, the device should move as fast as it is able.
    648              if (rate == 0xff) 
   \   00000056   0xF1B8 0x0FFF      CMP      R8,#+255
   \   0000005A   0xBF0E             ITEE     EQ 
   \   0000005C   0x2000             MOVEQ    R0,#+0
   \   0000005E   0xF44F 0x6080      MOVNE    R0,#+1024
   \   00000062   0xFBB0 0xF0F8      UDIVNE   R0,R0,R8
    649              {
    650                  state->eventDuration = 0;
    651              } 
    652              else 
    653              {
    654                  state->eventDuration = MILLISECOND_TICKS_PER_SECOND / rate;
   \   00000066   0xE00A             B.N      ??emAfLevelControlClusterMoveHandler_8
    655              }
   \                     ??emAfLevelControlClusterMoveHandler_4: (+1)
   \   00000068   0xF89D 0x1004      LDRB     R1,[SP, #+4]
   \   0000006C   0x7800             LDRB     R0,[R0, #+0]
   \   0000006E   0x4281             CMP      R1,R0
   \   00000070   0xD101             BNE.N    ??emAfLevelControlClusterMoveHandler_9
   \                     ??emAfLevelControlClusterMoveHandler_6: (+1)
   \   00000072   0x2000             MOVS     R0,#+0
   \   00000074   0xE7D3             B.N      ??emAfLevelControlClusterMoveHandler_1
   \                     ??emAfLevelControlClusterMoveHandler_9: (+1)
   \   00000076   0x2000             MOVS     R0,#+0
   \   00000078   0xE7EC             B.N      ??emAfLevelControlClusterMoveHandler_7
   \                     ??emAfLevelControlClusterMoveHandler_5: (+1)
   \   0000007A   0x2085             MOVS     R0,#+133
   \   0000007C   0xE7CF             B.N      ??emAfLevelControlClusterMoveHandler_1
   \                     ??emAfLevelControlClusterMoveHandler_8: (+1)
   \   0000007E   0x60F8             STR      R0,[R7, #+12]
    656          
    657              // The setup was successful, so mark the new state as active and return.
    658              emAfActivateLevelControl(state, emberAfCurrentEndpoint());
   \   00000080   0x6828             LDR      R0,[R5, #+0]
   \   00000082   0x.... 0x....      BL       ?Subroutine13
    659              state->commandId = commandId;
   \                     ??CrossCallReturnLabel_48: (+1)
   \   00000086   0x707C             STRB     R4,[R7, #+1]
   \   00000088   0xE7F3             B.N      ??emAfLevelControlClusterMoveHandler_6
    660          
    661              return EMBER_ZCL_STATUS_SUCCESS;  
    662          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine13: (+1)
   \   00000000   0x6800             LDR      R0,[R0, #+0]
   \   00000002   0x7941             LDRB     R1,[R0, #+5]
   \   00000004   0x4638             MOV      R0,R7
   \   00000006   0x....             B.N      emAfActivateLevelControl
    663          

   \                                 In section .text, align 2, keep-with-next
    664          static EmberAfStatus emAfLevelControlClusterStepHandler(int8u commandId, int8u stepMode, int8u stepSize, int16u transitionTime)
    665          {
   \                     emAfLevelControlClusterStepHandler: (+1)
   \   00000000   0xE92D 0x4FF2      PUSH     {R1,R4-R11,LR}
    666              EmberAfLevelControlState *state = emAfGetLevelControlState(emberAfCurrentEndpoint());
   \   00000004   0x....             LDR.N    R6,??DataTable45_2
   \   00000006   0x4681             MOV      R9,R0
   \   00000008   0x6830             LDR      R0,[R6, #+0]
   \   0000000A   0xB082             SUB      SP,SP,#+8
   \   0000000C   0x6800             LDR      R0,[R0, #+0]
   \   0000000E   0x7940             LDRB     R0,[R0, #+5]
   \   00000010   0x4692             MOV      R10,R2
   \   00000012   0x461D             MOV      R5,R3
   \   00000014   0x.... 0x....      BL       emAfGetLevelControlState
   \   00000018   0x4607             MOV      R7,R0
    667              EmberAfStatus status;
    668              int8u currentLevel;
    669              int32u transTime;
    670              boolean overUnder = FALSE;
   \   0000001A   0x2400             MOVS     R4,#+0
    671          
    672              if (state == NULL) 
   \   0000001C   0xB917             CBNZ.N   R7,??emAfLevelControlClusterStepHandler_0
    673              {
    674                  return EMBER_ZCL_STATUS_FAILURE;    
   \   0000001E   0x2001             MOVS     R0,#+1
   \                     ??emAfLevelControlClusterStepHandler_1: (+1)
   \   00000020   0xE8BD 0x8FFE      POP      {R1-R11,PC}      ;; return
    675              }
    676          
    677              // Cancel any currently active command before fiddling with the state.
    678              emAfDeactivateLevelControl(state);
   \                     ??emAfLevelControlClusterStepHandler_0: (+1)
   \   00000024   0x703C             STRB     R4,[R7, #+0]
    679          
    680              status = emberAfReadServerAttribute(emberAfCurrentEndpoint(),
    681                                                  ZCL_LEVEL_CONTROL_CLUSTER_ID,
    682                                                  ZCL_CURRENT_LEVEL_ATTRIBUTE_ID,
    683                                                  (int8u *)&currentLevel,
    684                                                  sizeof(currentLevel));
   \   00000026   0x2001             MOVS     R0,#+1
   \   00000028   0x9000             STR      R0,[SP, #+0]
   \   0000002A   0xAB01             ADD      R3,SP,#+4
   \   0000002C   0x6830             LDR      R0,[R6, #+0]
   \   0000002E   0x6800             LDR      R0,[R0, #+0]
   \   00000030   0x7940             LDRB     R0,[R0, #+5]
   \   00000032   0x2200             MOVS     R2,#+0
   \   00000034   0x2108             MOVS     R1,#+8
   \   00000036   0x.... 0x....      BL       emberAfReadServerAttribute
   \   0000003A   0xEA5F 0x0B00      MOVS     R11,R0
    685              if (status != EMBER_ZCL_STATUS_SUCCESS) 
   \   0000003E   0xD004             BEQ.N    ??emAfLevelControlClusterStepHandler_2
    686              {
    687                  emberAfLevelControlClusterPrintln("ERR: reading current level %x", status);
   \   00000040   0x465A             MOV      R2,R11
   \   00000042   0x.... 0x....      BL       ?Subroutine5
    688                  return status;
   \                     ??CrossCallReturnLabel_16: (+1)
   \   00000046   0x4658             MOV      R0,R11
   \   00000048   0xE7EA             B.N      ??emAfLevelControlClusterStepHandler_1
    689              }
    690          
    691              // Don't want to use the on level here
    692              state->useOnLevel = FALSE;
   \                     ??emAfLevelControlClusterStepHandler_2: (+1)
   \   0000004A   0x71F8             STRB     R0,[R7, #+7]
    693          
    694              state->moveMode = stepMode;
    695              switch (stepMode) 
   \   0000004C   0x....             LDR.N    R2,??DataTable45_1
   \   0000004E   0xF89D 0x0008      LDRB     R0,[SP, #+8]
   \   00000052   0x70F8             STRB     R0,[R7, #+3]
   \   00000054   0xF89D 0x3008      LDRB     R3,[SP, #+8]
   \   00000058   0xB113             CBZ.N    R3,??emAfLevelControlClusterStepHandler_3
   \   0000005A   0x2B01             CMP      R3,#+1
   \   0000005C   0xD01B             BEQ.N    ??emAfLevelControlClusterStepHandler_4
   \   0000005E   0xE02E             B.N      ??emAfLevelControlClusterStepHandler_5
    696              {
    697                  case EMBER_ZCL_STEP_MODE_UP:
    698                      if (currentLevel == maxLevel) 
   \                     ??emAfLevelControlClusterStepHandler_3: (+1)
   \   00000060   0x7852             LDRB     R2,[R2, #+1]
   \   00000062   0xF89D 0x3004      LDRB     R3,[SP, #+4]
   \   00000066   0x4293             CMP      R3,R2
   \   00000068   0xD013             BEQ.N    ??emAfLevelControlClusterStepHandler_6
    699                      {
    700                          return EMBER_ZCL_STATUS_SUCCESS;              
    701                      } 
    702                      else if (maxLevel - currentLevel > stepSize) 
   \   0000006A   0x1AD3             SUBS     R3,R2,R3
   \   0000006C   0x459A             CMP      R10,R3
   \   0000006E   0xDA04             BGE.N    ??emAfLevelControlClusterStepHandler_7
    703                      {
    704                          state->moveToLevel = currentLevel + stepSize;
   \   00000070   0xF89D 0x1004      LDRB     R1,[SP, #+4]
   \   00000074   0xEB0A 0x0201      ADD      R2,R10,R1
   \   00000078   0xE003             B.N      ??emAfLevelControlClusterStepHandler_8
    705                      } 
    706                      else 
    707                      {
    708                          // If the new level was pegged at the maximum level, the transition
    709                          // time shall be proportionally reduced.
    710                          overUnder = TRUE;
    711                          transTime = (transitionTime * (maxLevel - currentLevel)) / stepSize;
   \                     ??emAfLevelControlClusterStepHandler_7: (+1)
   \   0000007A   0x436B             MULS     R3,R3,R5
   \   0000007C   0x2401             MOVS     R4,#+1
   \   0000007E   0xFB93 0xF8FA      SDIV     R8,R3,R10
    712                          state->moveToLevel = maxLevel;
   \                     ??emAfLevelControlClusterStepHandler_8: (+1)
   \   00000082   0x70BA             STRB     R2,[R7, #+2]
    713                      }
    714                      state->moveToLevelUp = TRUE;
   \   00000084   0x2101             MOVS     R1,#+1
   \                     ??emAfLevelControlClusterStepHandler_9: (+1)
   \   00000086   0x71B9             STRB     R1,[R7, #+6]
    715                      break;
    716                      
    717                  case EMBER_ZCL_STEP_MODE_DOWN:
    718                      if (currentLevel == minLevel) 
    719                      {
    720                          return EMBER_ZCL_STATUS_SUCCESS;              
    721                      } 
    722                      else if (currentLevel - minLevel > stepSize) 
    723                      {
    724                          state->moveToLevel = currentLevel - stepSize;
    725                      } 
    726                      else 
    727                      {
    728                          // If the new level was pegged at the minimum level, the transition
    729                          // time shall be proportionally reduced.
    730                          overUnder = TRUE;
    731                          transTime = (transitionTime * (currentLevel - minLevel)) / stepSize;
    732                          state->moveToLevel = minLevel;
    733                      }
    734                      state->moveToLevelUp = FALSE;
    735                      break;
    736                      
    737                  default:
    738                      return EMBER_ZCL_STATUS_INVALID_FIELD;            
    739              }
    740          
    741              if (state->moveToLevel == currentLevel) 
   \   00000088   0xF89D 0x2004      LDRB     R2,[SP, #+4]
   \   0000008C   0x78B9             LDRB     R1,[R7, #+2]
   \   0000008E   0x4291             CMP      R1,R2
   \   00000090   0xD117             BNE.N    ??emAfLevelControlClusterStepHandler_10
    742              {
    743                  return EMBER_ZCL_STATUS_SUCCESS;        
   \                     ??emAfLevelControlClusterStepHandler_6: (+1)
   \   00000092   0x2000             MOVS     R0,#+0
   \   00000094   0xE7C4             B.N      ??emAfLevelControlClusterStepHandler_1
    744              }
   \                     ??emAfLevelControlClusterStepHandler_4: (+1)
   \   00000096   0x7812             LDRB     R2,[R2, #+0]
   \   00000098   0xF89D 0x3004      LDRB     R3,[SP, #+4]
   \   0000009C   0x4293             CMP      R3,R2
   \   0000009E   0xD0F8             BEQ.N    ??emAfLevelControlClusterStepHandler_6
   \   000000A0   0x1A9B             SUBS     R3,R3,R2
   \   000000A2   0x459A             CMP      R10,R3
   \   000000A4   0xDA04             BGE.N    ??emAfLevelControlClusterStepHandler_11
   \   000000A6   0xF89D 0x1004      LDRB     R1,[SP, #+4]
   \   000000AA   0xEBA1 0x020A      SUB      R2,R1,R10
   \   000000AE   0xE003             B.N      ??emAfLevelControlClusterStepHandler_12
   \                     ??emAfLevelControlClusterStepHandler_11: (+1)
   \   000000B0   0x436B             MULS     R3,R3,R5
   \   000000B2   0x2401             MOVS     R4,#+1
   \   000000B4   0xFB93 0xF8FA      SDIV     R8,R3,R10
   \                     ??emAfLevelControlClusterStepHandler_12: (+1)
   \   000000B8   0x70BA             STRB     R2,[R7, #+2]
   \   000000BA   0x2100             MOVS     R1,#+0
   \   000000BC   0xE7E3             B.N      ??emAfLevelControlClusterStepHandler_9
   \                     ??emAfLevelControlClusterStepHandler_5: (+1)
   \   000000BE   0x2085             MOVS     R0,#+133
   \   000000C0   0xE7AE             B.N      ??emAfLevelControlClusterStepHandler_1
    745              
    746              // If the Transition Time field is 0xFFFF, the device should move as
    747              // fast as it is able.
    748              if (transitionTime == 0xFFFF) 
   \                     ??emAfLevelControlClusterStepHandler_10: (+1)
   \   000000C2   0xF64F 0x71FF      MOVW     R1,#+65535
   \   000000C6   0x428D             CMP      R5,R1
   \   000000C8   0xBF08             IT       EQ 
   \   000000CA   0xF04F 0x0800      MOVEQ    R8,#+0
    749              {
    750                  transTime = FASTEST_TRANSITION_TIME;
   \   000000CE   0xD007             BEQ.N    ??emAfLevelControlClusterStepHandler_13
    751              } 
    752              else if (!overUnder) 
   \   000000D0   0x2C00             CMP      R4,#+0
   \   000000D2   0xBF0C             ITE      EQ 
   \   000000D4   0x02A8             LSLEQ    R0,R5,#+10
   \   000000D6   0xEA4F 0x2088      LSLNE    R0,R8,#+10
    753              {
    754                  // Transition time comes in as tenths of a second, but we work in milliseconds.
    755                  transTime = transitionTime * MILLISECOND_TICKS_PER_SECOND / 10;
    756              } 
    757              else 
    758              {
    759                  transTime = transTime * MILLISECOND_TICKS_PER_SECOND / 10;
   \   000000DA   0x210A             MOVS     R1,#+10
   \   000000DC   0xFBB0 0xF8F1      UDIV     R8,R0,R1
    760              }
    761              
    762              // The duration between events will be the transition time divided by
    763              // the distance we must move.
    764              state->eventDuration = transTime / stepSize;    
   \                     ??emAfLevelControlClusterStepHandler_13: (+1)
   \   000000E0   0xFBB8 0xF0FA      UDIV     R0,R8,R10
   \   000000E4   0x60F8             STR      R0,[R7, #+12]
    765              state->transitionTime = transTime;
   \   000000E6   0xF8C7 0x8010      STR      R8,[R7, #+16]
    766              
    767              // The setup was successful, so mark the new state as active and return.
    768              emAfActivateLevelControl(state, emberAfCurrentEndpoint());
   \   000000EA   0x6830             LDR      R0,[R6, #+0]
   \   000000EC   0x.... 0x....      BL       ?Subroutine13
    769              state->commandId = commandId;
    770              state->elapsedTime = 0;
   \                     ??CrossCallReturnLabel_47: (+1)
   \   000000F0   0x2000             MOVS     R0,#+0
   \   000000F2   0xF887 0x9001      STRB     R9,[R7, #+1]
   \   000000F6   0x6178             STR      R0,[R7, #+20]
   \   000000F8   0xE7CB             B.N      ??emAfLevelControlClusterStepHandler_6
    771          
    772              return EMBER_ZCL_STATUS_SUCCESS;  
    773          }
    774          

   \                                 In section .text, align 2, keep-with-next
    775          static EmberAfStatus  emAfLevelControlClusterStopHandler(int8u commandId)
    776          {
   \                     emAfLevelControlClusterStopHandler: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    777              EmberAfLevelControlState *state = emAfGetLevelControlState(emberAfCurrentEndpoint());
   \   00000004   0x....             LDR.N    R0,??DataTable45_2
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0x7940             LDRB     R0,[R0, #+5]
   \   0000000C   0x.... 0x....      BL       emAfGetLevelControlState
    778              EmberAfStatus status;
                                   ^
Warning[Pe177]: variable "status" was declared but never referenced
    779          
    780              if (state == NULL) 
   \   00000010   0xB908             CBNZ.N   R0,??emAfLevelControlClusterStopHandler_0
    781              {
    782                  return EMBER_ZCL_STATUS_FAILURE;    
   \   00000012   0x2001             MOVS     R0,#+1
   \   00000014   0xBD10             POP      {R4,PC}
    783              }
    784          
    785              // Cancel any currently active command.
    786              emAfDeactivateLevelControl(state);
   \                     ??emAfLevelControlClusterStopHandler_0: (+1)
   \   00000016   0x2100             MOVS     R1,#+0
   \   00000018   0x7001             STRB     R1,[R0, #+0]
    787              state->commandId = commandId;
   \   0000001A   0x7044             STRB     R4,[R0, #+1]
    788              return EMBER_ZCL_STATUS_SUCCESS;  
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0xBD10             POP      {R4,PC}          ;; return
    789          }
    790          

   \                                 In section .text, align 2, keep-with-next
    791          void emAfPluginLevelControlClusterOnOffEffectHandler(int8u commandId,
    792                                                               int8u level,
    793                                                               boolean onLevel,
    794                                                               int16u transitionTime)
    795          {
   \                     emAfPluginLevelControlClusterOnOffEffectHandler: (+1)
   \   00000000   0xE92D 0x43F0      PUSH     {R4-R9,LR}
    796            EmberAfLevelControlState *state = emAfGetLevelControlState(emberAfCurrentEndpoint());
   \   00000004   0x....             LDR.N    R7,??DataTable45_2
   \   00000006   0x4680             MOV      R8,R0
   \   00000008   0x6838             LDR      R0,[R7, #+0]
   \   0000000A   0xB083             SUB      SP,SP,#+12
   \   0000000C   0x6800             LDR      R0,[R0, #+0]
   \   0000000E   0x7940             LDRB     R0,[R0, #+5]
   \   00000010   0x460C             MOV      R4,R1
   \   00000012   0x4616             MOV      R6,R2
   \   00000014   0x4699             MOV      R9,R3
   \   00000016   0x.... 0x....      BL       emAfGetLevelControlState
   \   0000001A   0x0005             MOVS     R5,R0
    797            EmberAfStatus status;
    798            int8u currentLevel;
    799            int32u transTimeMs;
    800          
    801            if (state == NULL) 
   \   0000001C   0xD064             BEQ.N    ??emAfPluginLevelControlClusterOnOffEffectHandl_0
    802            {
    803              status = EMBER_ZCL_STATUS_FAILURE;
    804              return;
    805            }
    806          
    807            // Cancel any currently active command before fiddling with the state.
    808            emAfDeactivateLevelControl(state);
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0x7028             STRB     R0,[R5, #+0]
    809          
    810            status = emberAfReadServerAttribute(emberAfCurrentEndpoint(),
    811                                                ZCL_LEVEL_CONTROL_CLUSTER_ID,
    812                                                ZCL_CURRENT_LEVEL_ATTRIBUTE_ID,
    813                                                (int8u *)&currentLevel,
    814                                                sizeof(currentLevel));
   \   00000022   0xAB01             ADD      R3,SP,#+4
   \   00000024   0x2001             MOVS     R0,#+1
   \   00000026   0x9000             STR      R0,[SP, #+0]
   \   00000028   0x2200             MOVS     R2,#+0
   \   0000002A   0x6838             LDR      R0,[R7, #+0]
   \   0000002C   0x6800             LDR      R0,[R0, #+0]
   \   0000002E   0x7940             LDRB     R0,[R0, #+5]
   \   00000030   0x2108             MOVS     R1,#+8
   \   00000032   0x.... 0x....      BL       emberAfReadServerAttribute
    815            if (status != EMBER_ZCL_STATUS_SUCCESS) {
   \   00000036   0xB118             CBZ.N    R0,??emAfPluginLevelControlClusterOnOffEffectHandl_1
    816              emberAfLevelControlClusterPrintln("ERR: reading current level %x", status);
   \   00000038   0x4602             MOV      R2,R0
   \   0000003A   0x.... 0x....      BL       ?Subroutine5
    817              return;
   \                     ??CrossCallReturnLabel_15: (+1)
   \   0000003E   0xE053             B.N      ??emAfPluginLevelControlClusterOnOffEffectHandl_0
    818            }
    819          
    820            // Is the level the ad hoc on level?
    821            state->useOnLevel = onLevel;
    822            state->onLevel = minLevel;
   \                     ??emAfPluginLevelControlClusterOnOffEffectHandl_1: (+1)
   \   00000040   0x....             LDR.N    R0,??DataTable45_1
   \   00000042   0x71EE             STRB     R6,[R5, #+7]
   \   00000044   0x7801             LDRB     R1,[R0, #+0]
   \   00000046   0x7229             STRB     R1,[R5, #+8]
    823          
    824            // Keep the new level within range.
    825            if (onLevel) 
   \   00000048   0xB10E             CBZ.N    R6,??emAfPluginLevelControlClusterOnOffEffectHandl_2
    826            {
    827              state->onLevel = level;
   \   0000004A   0x722C             STRB     R4,[R5, #+8]
    828              state->moveToLevel = minLevel;
   \   0000004C   0xE007             B.N      ??emAfPluginLevelControlClusterOnOffEffectHandl_3
    829            } 
    830            else if (level >= maxLevel) 
   \                     ??emAfPluginLevelControlClusterOnOffEffectHandl_2: (+1)
   \   0000004E   0x7840             LDRB     R0,[R0, #+1]
   \   00000050   0x4284             CMP      R4,R0
   \   00000052   0xBF28             IT       CS 
   \   00000054   0x4601             MOVCS    R1,R0
    831            {
    832              state->moveToLevel = maxLevel;
   \   00000056   0xD202             BCS.N    ??emAfPluginLevelControlClusterOnOffEffectHandl_3
    833            } 
    834            else if (level <= minLevel) 
   \   00000058   0x42A1             CMP      R1,R4
   \   0000005A   0xBF38             IT       CC 
   \   0000005C   0x4621             MOVCC    R1,R4
    835            {
    836              state->moveToLevel = minLevel;
    837            } 
    838            else 
    839            {
    840              state->moveToLevel = level;
   \                     ??emAfPluginLevelControlClusterOnOffEffectHandl_3: (+1)
   \   0000005E   0x70A9             STRB     R1,[R5, #+2]
    841            }
    842            
    843                  if (state->moveToLevel == currentLevel) //MN to avoid them being the same, reduce the currentLevel
   \   00000060   0x78A8             LDRB     R0,[R5, #+2]
   \   00000062   0xF89D 0x1004      LDRB     R1,[SP, #+4]
   \   00000066   0x4288             CMP      R0,R1
   \   00000068   0xD10F             BNE.N    ??emAfPluginLevelControlClusterOnOffEffectHandl_4
    844              {
    845                              emberAfLevelControlClusterPrintln("GOT TO THE HODGE PODGE\n");
   \   0000006A   0x.... 0x....      BL       ?Subroutine14
    846                        
    847                emberAfLevelControlClusterPrintln("state->moveToLevel before %x\n", state->moveToLevel);
   \                     ??CrossCallReturnLabel_49: (+1)
   \   0000006E   0x78AA             LDRB     R2,[R5, #+2]
   \   00000070   0x.... 0x....      ADR.W    R1,?_29
   \   00000074   0x.... 0x....      BL       ??Subroutine5_0
    848          
    849                state->moveToLevel++;
   \                     ??CrossCallReturnLabel_4: (+1)
   \   00000078   0x78A8             LDRB     R0,[R5, #+2]
    850                        emberAfLevelControlClusterPrintln("state->moveToLevel after %x\n", state->moveToLevel);
   \   0000007A   0x.... 0x....      ADR.W    R1,?_30
   \   0000007E   0x1C42             ADDS     R2,R0,#+1
   \   00000080   0x70AA             STRB     R2,[R5, #+2]
   \   00000082   0x2020             MOVS     R0,#+32
   \   00000084   0xB2D2             UXTB     R2,R2
   \   00000086   0x.... 0x....      BL       emberAfPrintln
    851          
    852              }
    853          
    854          
    855            // Figure out if we're moving up or down and by how much.
    856            if (state->moveToLevel > currentLevel) 
   \                     ??emAfPluginLevelControlClusterOnOffEffectHandl_4: (+1)
   \   0000008A   0x78A8             LDRB     R0,[R5, #+2]
   \   0000008C   0x.... 0x....      BL       ??Subroutine12_0
   \                     ??CrossCallReturnLabel_45: (+1)
   \   00000090   0xBF38             IT       CC 
   \   00000092   0x2101             MOVCC    R1,#+1
    857            {
    858              state->moveToLevelUp = TRUE;
   \   00000094   0xD302             BCC.N    ??emAfPluginLevelControlClusterOnOffEffectHandl_5
    859            } 
    860            else if (state->moveToLevel < currentLevel) 
   \   00000096   0x4288             CMP      R0,R1
   \   00000098   0xD201             BCS.N    ??emAfPluginLevelControlClusterOnOffEffectHandl_6
    861            {
    862              state->moveToLevelUp = FALSE;
   \   0000009A   0x2100             MOVS     R1,#+0
   \                     ??emAfPluginLevelControlClusterOnOffEffectHandl_5: (+1)
   \   0000009C   0x71A9             STRB     R1,[R5, #+6]
    863            } 
    864           /* else 
    865            {
    866              return;
    867            }*/
    868            
    869            // If the Transition time field takes the value 0xFFFF, then the time taken to
    870            // move to the new level shall instead be determined by the On/Off Transition
    871            // Time attribute.  If On/Off Transition Time, which is an optional attribute,
    872            // is not present, the device shall move to its new level as fast as it is
    873            // able.
    874            if (transitionTime == 0xFFFF) 
   \                     ??emAfPluginLevelControlClusterOnOffEffectHandl_6: (+1)
   \   0000009E   0xF64F 0x71FF      MOVW     R1,#+65535
   \   000000A2   0x4589             CMP      R9,R1
   \   000000A4   0xBF0F             ITEEE    EQ 
   \   000000A6   0x2200             MOVEQ    R2,#+0
   \   000000A8   0xEA4F 0x2189      LSLNE    R1,R9,#+10
   \   000000AC   0x220A             MOVNE    R2,#+10
   \   000000AE   0xFBB1 0xF2F2      UDIVNE   R2,R1,R2
    875            {
    876              transTimeMs = FASTEST_TRANSITION_TIME;
    877            } 
    878            else 
    879            {
    880              // Transition time comes in (or is stored, in the case of On/Off Transition
    881              // Time) as tenths of a second, but we work in milliseconds.
    882              transTimeMs = transitionTime * MILLISECOND_TICKS_PER_SECOND / 10;
    883            }
    884            
    885            int8u amount;
    886            if (state->moveToLevel > currentLevel)
   \   000000B2   0x.... 0x....      BL       ??Subroutine12_0
   \                     ??CrossCallReturnLabel_46: (+1)
   \   000000B6   0xBF39             ITTEE    CC 
   \   000000B8   0x1A41             SUBCC    R1,R0,R1
   \   000000BA   0x2001             MOVCC    R0,#+1
   \   000000BC   0x1A09             SUBCS    R1,R1,R0
   \   000000BE   0x2000             MOVCS    R0,#+0
    887            {      
    888                amount = state->moveToLevel - currentLevel;    
    889                state->moveToLevelUp = TRUE;
    890            }
    891            else
    892            {      
    893                amount = currentLevel - state->moveToLevel;    
    894                state->moveToLevelUp = FALSE;
   \   000000C0   0x71A8             STRB     R0,[R5, #+6]
    895            }            
    896            state->transitionTime = transTimeMs;
   \   000000C2   0x612A             STR      R2,[R5, #+16]
    897            calculateEventDuration_and_stepSize(state->transitionTime, amount, &state->eventDuration, &state->stepSize);   
   \   000000C4   0x1D2B             ADDS     R3,R5,#+4
   \   000000C6   0x6928             LDR      R0,[R5, #+16]
   \   000000C8   0xF105 0x020C      ADD      R2,R5,#+12
   \   000000CC   0xB2C9             UXTB     R1,R1
   \   000000CE   0xB280             UXTH     R0,R0
   \   000000D0   0x.... 0x....      BL       calculateEventDuration_and_stepSize
    898              
    899            state->elapsedTime = 0;
   \   000000D4   0x2000             MOVS     R0,#+0
   \   000000D6   0x6168             STR      R0,[R5, #+20]
    900            state->commandId = commandId;
   \   000000D8   0xF885 0x8001      STRB     R8,[R5, #+1]
    901          
    902            // The setup was successful, so mark the new state as active and return.
    903            emAfActivateLevelControl(state, emberAfCurrentEndpoint());
   \   000000DC   0x6838             LDR      R0,[R7, #+0]
   \   000000DE   0x6800             LDR      R0,[R0, #+0]
   \   000000E0   0x7941             LDRB     R1,[R0, #+5]
   \   000000E2   0x4628             MOV      R0,R5
   \   000000E4   0x.... 0x....      BL       emAfActivateLevelControl
    904          }
   \                     ??emAfPluginLevelControlClusterOnOffEffectHandl_0: (+1)
   \   000000E8   0xE8BD 0x83F7      POP      {R0-R2,R4-R9,PC}  ;; return
    905          

   \                                 In section .text, align 2, keep-with-next
    906          EmberAfStatus emAfPluginLevelControlClusterGetCurrentLevel(int8u* currentLevel)
    907          {
   \                     emAfPluginLevelControlClusterGetCurrentLevel: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
    908              EmberAfStatus status;
    909          
    910              status = emberAfReadServerAttribute(1,
    911                                                  ZCL_LEVEL_CONTROL_CLUSTER_ID,
    912                                                  ZCL_CURRENT_LEVEL_ATTRIBUTE_ID,
    913                                                  currentLevel,
    914                                                  1);
   \   00000004   0x2101             MOVS     R1,#+1
   \   00000006   0x9100             STR      R1,[SP, #+0]
   \   00000008   0x4603             MOV      R3,R0
   \   0000000A   0x2200             MOVS     R2,#+0
   \   0000000C   0x2108             MOVS     R1,#+8
   \   0000000E   0x2001             MOVS     R0,#+1
   \   00000010   0x.... 0x....      BL       emberAfReadServerAttribute
   \   00000014   0x0004             MOVS     R4,R0
    915              
    916              if (status != EMBER_ZCL_STATUS_SUCCESS) 
   \   00000016   0xD002             BEQ.N    ??CrossCallReturnLabel_14
    917              {
    918                  emberAfLevelControlClusterPrintln("ERR: reading current level %x", status);                                        
   \   00000018   0x4622             MOV      R2,R4
   \   0000001A   0x.... 0x....      BL       ?Subroutine5
    919              } 
    920              else 
    921              {
    922                  //GB emberAfLevelControlClusterPrintln("Current level %d", *currentLevel);
    923              }
    924              
    925              return status;
   \                     ??CrossCallReturnLabel_14: (+1)
   \   0000001E   0x4620             MOV      R0,R4
   \   00000020   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    926          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable42:
   \   00000000   0x4F 0x4E          DC8      0x4F, 0x4E, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable42_1:
   \   00000000   0x4F 0x46          DC8      "OFF"
   \              0x46 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable45:
   \   00000000   0x........         DC32     stateTable

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable45_1:
   \   00000000   0x........         DC32     minLevel

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable45_2:
   \   00000000   0x........         DC32     emAfCurrentCommand

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x47 0x4F          DC8 47H, 4FH, 54H, 20H, 54H, 4FH, 20H, 73H
   \              0x54 0x20    
   \              0x54 0x4F    
   \              0x20 0x73    
   \   00000008   0x74 0x61          DC8 74H, 61H, 72H, 74H, 20H, 6FH, 66H, 20H
   \              0x72 0x74    
   \              0x20 0x6F    
   \              0x66 0x20    
   \   00000010   0x65 0x6D          DC8 65H, 6DH, 62H, 65H, 72H, 41H, 66H, 4CH
   \              0x62 0x65    
   \              0x72 0x41    
   \              0x66 0x4C    
   \   00000018   0x65 0x76          DC8 65H, 76H, 65H, 6CH, 43H, 6FH, 6EH, 74H
   \              0x65 0x6C    
   \              0x43 0x6F    
   \              0x6E 0x74    
   \   00000020   0x72 0x6F          DC8 72H, 6FH, 6CH, 43H, 6CH, 75H, 73H, 74H
   \              0x6C 0x43    
   \              0x6C 0x75    
   \              0x73 0x74    
   \   00000028   0x65 0x72          DC8 65H, 72H, 53H, 65H, 72H, 76H, 65H, 72H
   \              0x53 0x65    
   \              0x72 0x76    
   \              0x65 0x72    
   \   00000030   0x54 0x69          DC8 54H, 69H, 63H, 6BH, 43H, 61H, 6CH, 6CH
   \              0x63 0x6B    
   \              0x43 0x61    
   \              0x6C 0x6C    
   \   00000038   0x62 0x61          DC8 62H, 61H, 63H, 6BH, 20H, 6CH, 6EH, 31H
   \              0x63 0x6B    
   \              0x20 0x6C    
   \              0x6E 0x31    
   \   00000040   0x31 0x32          DC8 31H, 32H, 0AH, 0
   \              0x0A 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_15:
   \   00000000   0x4F 0x4E          DC8 "ON"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_16:
   \   00000000   0x4F 0x46          DC8 "OFF"
   \              0x46 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_1:
   \   00000000   0x6C 0x6E          DC8 "ln119 state is: %d\012"
   \              0x31 0x31    
   \              0x39 0x20    
   \              0x73 0x74    
   \              0x61 0x74    
   \              0x65 0x20    
   \              0x69 0x73    
   \              0x3A 0x20    
   \              0x25 0x64    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_2:
   \   00000000   0x6C 0x6E          DC8 6CH, 6EH, 31H, 32H, 31H, 20H, 43H, 75H
   \              0x31 0x32    
   \              0x31 0x20    
   \              0x43 0x75    
   \   00000008   0x72 0x72          DC8 72H, 72H, 65H, 6EH, 74H, 20H, 6CH, 65H
   \              0x65 0x6E    
   \              0x74 0x20    
   \              0x6C 0x65    
   \   00000010   0x76 0x65          DC8 76H, 65H, 6CH, 20H, 69H, 73H, 3AH, 20H
   \              0x6C 0x20    
   \              0x69 0x73    
   \              0x3A 0x20    
   \   00000018   0x25 0x64          DC8 25H, 64H, 20H, 73H, 74H, 61H, 74H, 65H
   \              0x20 0x73    
   \              0x74 0x61    
   \              0x74 0x65    
   \   00000020   0x2D 0x3E          DC8 2DH, 3EH, 6DH, 6FH, 76H, 65H, 54H, 6FH
   \              0x6D 0x6F    
   \              0x76 0x65    
   \              0x54 0x6F    
   \   00000028   0x4C 0x65          DC8 4CH, 65H, 76H, 65H, 6CH, 20H, 69H, 73H
   \              0x76 0x65    
   \              0x6C 0x20    
   \              0x69 0x73    
   \   00000030   0x3A 0x20          DC8 3AH, 20H, 25H, 64H, 0AH, 0
   \              0x25 0x64    
   \              0x0A 0x00    
   \   00000036   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_3:
   \   00000000   0x45 0x52          DC8 "ERR: reading current level %x"
   \              0x52 0x3A    
   \              0x20 0x72    
   \              0x65 0x61    
   \              0x64 0x69    
   \              0x6E 0x67    
   \              0x20 0x63    
   \              0x75 0x72    
   \              0x72 0x65    
   \              0x6E 0x74    
   \              0x20 0x6C    
   \              0x65 0x76    
   \              0x65 0x6C    
   \              0x20 0x25    
   \              0x78 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_4:
   \   00000000   0x6C 0x6E          DC8 6CH, 6EH, 31H, 36H, 39H, 20H, 43H, 75H
   \              0x31 0x36    
   \              0x39 0x20    
   \              0x43 0x75    
   \   00000008   0x72 0x72          DC8 72H, 72H, 65H, 6EH, 74H, 20H, 6CH, 65H
   \              0x65 0x6E    
   \              0x74 0x20    
   \              0x6C 0x65    
   \   00000010   0x76 0x65          DC8 76H, 65H, 6CH, 20H, 69H, 73H, 3AH, 20H
   \              0x6C 0x20    
   \              0x69 0x73    
   \              0x3A 0x20    
   \   00000018   0x25 0x64          DC8 25H, 64H, 20H, 73H, 74H, 61H, 74H, 65H
   \              0x20 0x73    
   \              0x74 0x61    
   \              0x74 0x65    
   \   00000020   0x2D 0x3E          DC8 2DH, 3EH, 6DH, 6FH, 76H, 65H, 54H, 6FH
   \              0x6D 0x6F    
   \              0x76 0x65    
   \              0x54 0x6F    
   \   00000028   0x4C 0x65          DC8 4CH, 65H, 76H, 65H, 6CH, 20H, 69H, 73H
   \              0x76 0x65    
   \              0x6C 0x20    
   \              0x69 0x73    
   \   00000030   0x3A 0x20          DC8 3AH, 20H, 25H, 64H, 0AH, 0
   \              0x25 0x64    
   \              0x0A 0x00    
   \   00000036   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_5:
   \   00000000   0x45 0x52          DC8 "ERR: writing current level %x"
   \              0x52 0x3A    
   \              0x20 0x77    
   \              0x72 0x69    
   \              0x74 0x69    
   \              0x6E 0x67    
   \              0x20 0x63    
   \              0x75 0x72    
   \              0x72 0x65    
   \              0x6E 0x74    
   \              0x20 0x6C    
   \              0x65 0x76    
   \              0x65 0x6C    
   \              0x20 0x25    
   \              0x78 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_6:
   \   00000000   0x6C 0x6E          DC8 6CH, 6EH, 32H, 32H, 36H, 20H, 43H, 75H
   \              0x32 0x32    
   \              0x36 0x20    
   \              0x43 0x75    
   \   00000008   0x72 0x72          DC8 72H, 72H, 65H, 6EH, 74H, 20H, 6CH, 65H
   \              0x65 0x6E    
   \              0x74 0x20    
   \              0x6C 0x65    
   \   00000010   0x76 0x65          DC8 76H, 65H, 6CH, 20H, 69H, 73H, 3AH, 20H
   \              0x6C 0x20    
   \              0x69 0x73    
   \              0x3A 0x20    
   \   00000018   0x25 0x64          DC8 25H, 64H, 20H, 73H, 74H, 61H, 74H, 65H
   \              0x20 0x73    
   \              0x74 0x61    
   \              0x74 0x65    
   \   00000020   0x2D 0x3E          DC8 2DH, 3EH, 6DH, 6FH, 76H, 65H, 54H, 6FH
   \              0x6D 0x6F    
   \              0x76 0x65    
   \              0x54 0x6F    
   \   00000028   0x4C 0x65          DC8 4CH, 65H, 76H, 65H, 6CH, 20H, 69H, 73H
   \              0x76 0x65    
   \              0x6C 0x20    
   \              0x69 0x73    
   \   00000030   0x3A 0x20          DC8 3AH, 20H, 25H, 64H, 0AH, 0
   \              0x25 0x64    
   \              0x0A 0x00    
   \   00000036   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_7:
   \   00000000   0x6C 0x6E          DC8 "ln227 moveToLevelUp is: %d\012"
   \              0x32 0x32    
   \              0x37 0x20    
   \              0x6D 0x6F    
   \              0x76 0x65    
   \              0x54 0x6F    
   \              0x4C 0x65    
   \              0x76 0x65    
   \              0x6C 0x55    
   \              0x70 0x20    
   \              0x69 0x73    
   \              0x3A 0x20    
   \              0x25 0x64    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_8:
   \   00000000   0x47 0x4F          DC8 "GOT TO state->moveToLevelUp\012"
   \              0x54 0x20    
   \              0x54 0x4F    
   \              0x20 0x73    
   \              0x74 0x61    
   \              0x74 0x65    
   \              0x2D 0x3E    
   \              0x6D 0x6F    
   \              0x76 0x65    
   \              0x54 0x6F    
   \              0x4C 0x65    
   \              0x76 0x65    
   \              0x6C 0x55    
   \              0x70 0x0A    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_9:
   \   00000000   0x47 0x4F          DC8 "GOT TO setOnOffValue\012"
   \              0x54 0x20    
   \              0x54 0x4F    
   \              0x20 0x73    
   \              0x65 0x74    
   \              0x4F 0x6E    
   \              0x4F 0x66    
   \              0x66 0x56    
   \              0x61 0x6C    
   \              0x75 0x65    
   \              0x0A 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_10:
   \   00000000   0x47 0x4F          DC8 "GOT TO Changing level down"
   \              0x54 0x20    
   \              0x54 0x4F    
   \              0x20 0x43    
   \              0x68 0x61    
   \              0x6E 0x67    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x6C 0x65    
   \              0x76 0x65    
   \              0x6C 0x20    
   \              0x64 0x6F    
   \              0x77 0x6E    
   \              0x00         
   \   0000001B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_11:
   \   00000000   0x45 0x76          DC8 "Event: move Level %x->%x "
   \              0x65 0x6E    
   \              0x74 0x3A    
   \              0x20 0x6D    
   \              0x6F 0x76    
   \              0x65 0x20    
   \              0x4C 0x65    
   \              0x76 0x65    
   \              0x6C 0x20    
   \              0x25 0x78    
   \              0x2D 0x3E    
   \              0x25 0x78    
   \              0x20 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_12:
   \   00000000   0x45 0x76          DC8 "Event: move Level %x->%x"
   \              0x65 0x6E    
   \              0x74 0x3A    
   \              0x20 0x6D    
   \              0x6F 0x76    
   \              0x65 0x20    
   \              0x4C 0x65    
   \              0x76 0x65    
   \              0x6C 0x20    
   \              0x25 0x78    
   \              0x2D 0x3E    
   \              0x25 0x78    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_13:
   \   00000000   0x45 0x72          DC8 "Err: writing current level %x"
   \              0x72 0x3A    
   \              0x20 0x77    
   \              0x72 0x69    
   \              0x74 0x69    
   \              0x6E 0x67    
   \              0x20 0x63    
   \              0x75 0x72    
   \              0x72 0x65    
   \              0x6E 0x74    
   \              0x20 0x6C    
   \              0x65 0x76    
   \              0x65 0x6C    
   \              0x20 0x25    
   \              0x78 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_14:
   \   00000000   0x53 0x65          DC8 "Setting on/off to %p due to level change"
   \              0x74 0x74    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x6F 0x6E    
   \              0x2F 0x6F    
   \              0x66 0x66    
   \              0x20 0x74    
   \              0x6F 0x20    
   \              0x25 0x70    
   \              0x20 0x64    
   \              0x75 0x65    
   \              0x20 0x74    
   \              0x6F 0x20    
   \              0x6C 0x65    
   \              0x76 0x65    
   \              0x6C 0x20    
   \              0x63 0x68    
   \              0x61 0x6E    
   \              0x67 0x65    
   \              0x00         
   \   00000029   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_17:
   \   00000000   0x25 0x70          DC8 "%pMOVE_TO_LEVEL %x %2x"
   \              0x4D 0x4F    
   \              0x56 0x45    
   \              0x5F 0x54    
   \              0x4F 0x5F    
   \              0x4C 0x45    
   \              0x56 0x45    
   \              0x4C 0x20    
   \              0x25 0x78    
   \              0x20 0x25    
   \              0x32 0x78    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_18:
   \   00000000   0x52 0x58          DC8 "RX level-control:"
   \              0x20 0x6C    
   \              0x65 0x76    
   \              0x65 0x6C    
   \              0x2D 0x63    
   \              0x6F 0x6E    
   \              0x74 0x72    
   \              0x6F 0x6C    
   \              0x3A 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_19:
   \   00000000   0x47 0x4F          DC8 "GOT TO ln361. Status is: %d"
   \              0x54 0x20    
   \              0x54 0x4F    
   \              0x20 0x6C    
   \              0x6E 0x33    
   \              0x36 0x31    
   \              0x2E 0x20    
   \              0x53 0x74    
   \              0x61 0x74    
   \              0x75 0x73    
   \              0x20 0x69    
   \              0x73 0x3A    
   \              0x20 0x25    
   \              0x64 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_20:
   \   00000000   0x25 0x70          DC8 "%pMOVE_TO_LEVEL_WITH_ON_OFF %x %2x"
   \              0x4D 0x4F    
   \              0x56 0x45    
   \              0x5F 0x54    
   \              0x4F 0x5F    
   \              0x4C 0x45    
   \              0x56 0x45    
   \              0x4C 0x5F    
   \              0x57 0x49    
   \              0x54 0x48    
   \              0x5F 0x4F    
   \              0x4E 0x5F    
   \              0x4F 0x46    
   \              0x46 0x20    
   \              0x25 0x78    
   \              0x20 0x25    
   \              0x32 0x78    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_21:
   \   00000000   0x47 0x4F          DC8 "GOT TO ln372. Status is: %d"
   \              0x54 0x20    
   \              0x54 0x4F    
   \              0x20 0x6C    
   \              0x6E 0x33    
   \              0x37 0x32    
   \              0x2E 0x20    
   \              0x53 0x74    
   \              0x61 0x74    
   \              0x75 0x73    
   \              0x20 0x69    
   \              0x73 0x3A    
   \              0x20 0x25    
   \              0x64 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_22:
   \   00000000   0x25 0x70          DC8 "%pMOVE %x %x"
   \              0x4D 0x4F    
   \              0x56 0x45    
   \              0x20 0x25    
   \              0x78 0x20    
   \              0x25 0x78    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_23:
   \   00000000   0x25 0x70          DC8 "%pMOVE_WITH_ON_OFF %x %x"
   \              0x4D 0x4F    
   \              0x56 0x45    
   \              0x5F 0x57    
   \              0x49 0x54    
   \              0x48 0x5F    
   \              0x4F 0x4E    
   \              0x5F 0x4F    
   \              0x46 0x46    
   \              0x20 0x25    
   \              0x78 0x20    
   \              0x25 0x78    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_24:
   \   00000000   0x25 0x70          DC8 "%pSTEP %x %x %2x"
   \              0x53 0x54    
   \              0x45 0x50    
   \              0x20 0x25    
   \              0x78 0x20    
   \              0x25 0x78    
   \              0x20 0x25    
   \              0x32 0x78    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_25:
   \   00000000   0x25 0x70          DC8 "%pSTEP_WITH_ON_OFF %x %x %2x"
   \              0x53 0x54    
   \              0x45 0x50    
   \              0x5F 0x57    
   \              0x49 0x54    
   \              0x48 0x5F    
   \              0x4F 0x4E    
   \              0x5F 0x4F    
   \              0x46 0x46    
   \              0x20 0x25    
   \              0x78 0x20    
   \              0x25 0x78    
   \              0x20 0x25    
   \              0x32 0x78    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_26:
   \   00000000   0x25 0x70          DC8 "%pSTOP"
   \              0x53 0x54    
   \              0x4F 0x50    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_27:
   \   00000000   0x25 0x70          DC8 "%pSTOP_WITH_ON_OFF"
   \              0x53 0x54    
   \              0x4F 0x50    
   \              0x5F 0x57    
   \              0x49 0x54    
   \              0x48 0x5F    
   \              0x4F 0x4E    
   \              0x5F 0x4F    
   \              0x46 0x46    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_28:
   \   00000000   0x47 0x4F          DC8 "GOT TO THE HODGE PODGE\012"
   \              0x54 0x20    
   \              0x54 0x4F    
   \              0x20 0x54    
   \              0x48 0x45    
   \              0x20 0x48    
   \              0x4F 0x44    
   \              0x47 0x45    
   \              0x20 0x50    
   \              0x4F 0x44    
   \              0x47 0x45    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_29:
   \   00000000   0x73 0x74          DC8 "state->moveToLevel before %x\012"
   \              0x61 0x74    
   \              0x65 0x2D    
   \              0x3E 0x6D    
   \              0x6F 0x76    
   \              0x65 0x54    
   \              0x6F 0x4C    
   \              0x65 0x76    
   \              0x65 0x6C    
   \              0x20 0x62    
   \              0x65 0x66    
   \              0x6F 0x72    
   \              0x65 0x20    
   \              0x25 0x78    
   \              0x0A 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_30:
   \   00000000   0x73 0x74          DC8 "state->moveToLevel after %x\012"
   \              0x61 0x74    
   \              0x65 0x2D    
   \              0x3E 0x6D    
   \              0x6F 0x76    
   \              0x65 0x54    
   \              0x6F 0x4C    
   \              0x65 0x76    
   \              0x65 0x6C    
   \              0x20 0x61    
   \              0x66 0x74    
   \              0x65 0x72    
   \              0x20 0x25    
   \              0x78 0x0A    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_31:
   \   00000000   0x6C 0x6E          DC8 6CH, 6EH, 34H, 39H, 35H, 20H, 43H, 75H
   \              0x34 0x39    
   \              0x35 0x20    
   \              0x43 0x75    
   \   00000008   0x72 0x72          DC8 72H, 72H, 65H, 6EH, 74H, 20H, 6CH, 65H
   \              0x65 0x6E    
   \              0x74 0x20    
   \              0x6C 0x65    
   \   00000010   0x76 0x65          DC8 76H, 65H, 6CH, 20H, 69H, 73H, 3AH, 20H
   \              0x6C 0x20    
   \              0x69 0x73    
   \              0x3A 0x20    
   \   00000018   0x25 0x64          DC8 25H, 64H, 20H, 73H, 74H, 61H, 74H, 65H
   \              0x20 0x73    
   \              0x74 0x61    
   \              0x74 0x65    
   \   00000020   0x2D 0x3E          DC8 2DH, 3EH, 6DH, 6FH, 76H, 65H, 54H, 6FH
   \              0x6D 0x6F    
   \              0x76 0x65    
   \              0x54 0x6F    
   \   00000028   0x4C 0x65          DC8 4CH, 65H, 76H, 65H, 6CH, 20H, 69H, 73H
   \              0x76 0x65    
   \              0x6C 0x20    
   \              0x69 0x73    
   \   00000030   0x3A 0x20          DC8 3AH, 20H, 25H, 64H, 0AH, 0
   \              0x25 0x64    
   \              0x0A 0x00    
   \   00000036   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_32:
   \   00000000   0x52 0x45          DC8 "RETURNING SUCCESS BECAUSE NO CHANGE IN LEVEL\012"
   \              0x54 0x55    
   \              0x52 0x4E    
   \              0x49 0x4E    
   \              0x47 0x20    
   \              0x53 0x55    
   \              0x43 0x43    
   \              0x45 0x53    
   \              0x53 0x20    
   \              0x42 0x45    
   \              0x43 0x41    
   \              0x55 0x53    
   \              0x45 0x20    
   \              0x4E 0x4F    
   \              0x20 0x43    
   \              0x48 0x41    
   \              0x4E 0x47    
   \              0x45 0x20    
   \              0x49 0x4E    
   \              0x20 0x4C    
   \              0x45 0x56    
   \              0x45 0x4C    
   \              0x0A 0x00    
   \   0000002E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_33:
   \   00000000   0x45 0x52          DC8 "ERR: reading on/off transition time %x"
   \              0x52 0x3A    
   \              0x20 0x72    
   \              0x65 0x61    
   \              0x64 0x69    
   \              0x6E 0x67    
   \              0x20 0x6F    
   \              0x6E 0x2F    
   \              0x6F 0x66    
   \              0x66 0x20    
   \              0x74 0x72    
   \              0x61 0x6E    
   \              0x73 0x69    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x20 0x74    
   \              0x69 0x6D    
   \              0x65 0x20    
   \              0x25 0x78    
   \              0x00         
   \   00000027   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_34:
   \   00000000   0x6C 0x6E          DC8 "ln537 moveToLevelUp is: %d\012"
   \              0x35 0x33    
   \              0x37 0x20    
   \              0x6D 0x6F    
   \              0x76 0x65    
   \              0x54 0x6F    
   \              0x4C 0x65    
   \              0x76 0x65    
   \              0x6C 0x55    
   \              0x70 0x20    
   \              0x69 0x73    
   \              0x3A 0x20    
   \              0x25 0x64    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_35:
   \   00000000   0x6C 0x6E          DC8 "ln556 moveToLevelUp is: %d\012"
   \              0x35 0x35    
   \              0x36 0x20    
   \              0x6D 0x6F    
   \              0x76 0x65    
   \              0x54 0x6F    
   \              0x4C 0x65    
   \              0x76 0x65    
   \              0x6C 0x55    
   \              0x70 0x20    
   \              0x69 0x73    
   \              0x3A 0x20    
   \              0x25 0x64    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_36:
   \   00000000   0x47 0x4F          DC8 47H, 4FH, 54H, 20H, 54H, 4FH, 20H, 45H
   \              0x54 0x20    
   \              0x54 0x4F    
   \              0x20 0x45    
   \   00000008   0x4E 0x44          DC8 4EH, 44H, 20H, 4FH, 46H, 20H, 65H, 6DH
   \              0x20 0x4F    
   \              0x46 0x20    
   \              0x65 0x6D    
   \   00000010   0x41 0x66          DC8 41H, 66H, 4CH, 65H, 76H, 65H, 6CH, 43H
   \              0x4C 0x65    
   \              0x76 0x65    
   \              0x6C 0x43    
   \   00000018   0x6F 0x6E          DC8 6FH, 6EH, 74H, 72H, 6FH, 6CH, 43H, 6CH
   \              0x74 0x72    
   \              0x6F 0x6C    
   \              0x43 0x6C    
   \   00000020   0x75 0x73          DC8 75H, 73H, 74H, 65H, 72H, 4DH, 6FH, 76H
   \              0x74 0x65    
   \              0x72 0x4D    
   \              0x6F 0x76    
   \   00000028   0x65 0x54          DC8 65H, 54H, 6FH, 4CH, 65H, 76H, 65H, 6CH
   \              0x6F 0x4C    
   \              0x65 0x76    
   \              0x65 0x6C    
   \   00000030   0x48 0x61          DC8 48H, 61H, 6EH, 64H, 6CH, 65H, 72H, 0AH
   \              0x6E 0x64    
   \              0x6C 0x65    
   \              0x72 0x0A    
   \   00000038   0x00               DC8 0
   \   00000039   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   emAfActivateLevelControl
         8   -> emberAfScheduleServerTickExtended
       8   emAfGetLevelControlState
         8   -> emberAfFindClusterServerEndpointIndex
      40   emAfLevelControlClusterMoveHandler
        40   -> emAfActivateLevelControl
        40   -> emAfGetLevelControlState
        40   -> emberAfPrintln
        40   -> emberAfReadServerAttribute
      40   emAfLevelControlClusterMoveToLevelHandler
        40   -> calculateEventDuration_and_stepSize
        40   -> emAfActivateLevelControl
        40   -> emAfGetLevelControlState
        40   -> emberAfPrint
        40   -> emberAfPrintln
        40   -> emberAfReadServerAttribute
      48   emAfLevelControlClusterStepHandler
        48   -> emAfActivateLevelControl
        48   -> emAfGetLevelControlState
        48   -> emberAfPrintln
        48   -> emberAfReadServerAttribute
       8   emAfLevelControlClusterStopHandler
         8   -> emAfGetLevelControlState
      16   emAfPluginLevelControlClusterGetCurrentLevel
        16   -> emberAfPrintln
        16   -> emberAfReadServerAttribute
      40   emAfPluginLevelControlClusterOnOffEffectHandler
        40   -> calculateEventDuration_and_stepSize
        40   -> emAfActivateLevelControl
        40   -> emAfGetLevelControlState
        40   -> emberAfPrintln
        40   -> emberAfReadServerAttribute
      16   emberAfLevelControlClusterMoveCallback
        16   -> emAfLevelControlClusterMoveHandler
        16   -> emberAfPrintln
        16   -> emberAfSendImmediateDefaultResponse
      16   emberAfLevelControlClusterMoveToLevelCallback
        16   -> emAfLevelControlClusterMoveToLevelHandler
        16   -> emberAfPrintln
        16   -> emberAfSendImmediateDefaultResponse
      16   emberAfLevelControlClusterMoveToLevelWithOnOffCallback
        16   -> emAfLevelControlClusterMoveToLevelHandler
        16   -> emberAfPrintln
        16   -> emberAfSendImmediateDefaultResponse
      16   emberAfLevelControlClusterMoveWithOnOffCallback
        16   -> emAfLevelControlClusterMoveHandler
        16   -> emberAfPrintln
        16   -> emberAfSendImmediateDefaultResponse
       8   emberAfLevelControlClusterServerInitCallback
         8   -> emAfGetLevelControlState
      32   emberAfLevelControlClusterServerTickCallback
        32   -> emAfGetLevelControlState
        32   -> emberAfContainsServer
        32   -> emberAfPluginAuroraLevelControlSetNewLevelCallback
        32   -> emberAfPrint
        32   -> emberAfPrintln
        32   -> emberAfReadServerAttribute
        32   -> emberAfScenesClusterMakeInvalidCallback
        32   -> emberAfScheduleServerTickExtended
        32   -> emberAfWriteServerAttribute
        32   -> setOnOffValue
      24   emberAfLevelControlClusterStepCallback
        24   -> emAfLevelControlClusterStepHandler
        24   -> emberAfPrintln
        24   -> emberAfSendImmediateDefaultResponse
      24   emberAfLevelControlClusterStepWithOnOffCallback
        24   -> emAfLevelControlClusterStepHandler
        24   -> emberAfPrintln
        24   -> emberAfSendImmediateDefaultResponse
       8   emberAfLevelControlClusterStopCallback
         8   -> emAfLevelControlClusterStopHandler
         8   -> emberAfPrintln
         8   -> emberAfSendImmediateDefaultResponse
       8   emberAfLevelControlClusterStopWithOnOffCallback
         8   -> emAfLevelControlClusterStopHandler
         8   -> emberAfPrintln
         8   -> emberAfSendImmediateDefaultResponse
      16   setOnOffValue
        16   -> emberAfContainsServer
        16   -> emberAfPrintln


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable42
       4  ??DataTable42_1
       4  ??DataTable45
       4  ??DataTable45_1
       4  ??DataTable45_2
       8  ??Subroutine15_0
      12  ?Subroutine0
      10  ?Subroutine1
       6  ?Subroutine10
       6  ?Subroutine11
      10  ?Subroutine12
       8  ?Subroutine13
      10  ?Subroutine14
      12  ?Subroutine2
      20  ?Subroutine3
      10  ?Subroutine4
      10  ?Subroutine5
      14  ?Subroutine6
      18  ?Subroutine7
       6  ?Subroutine8
       6  ?Subroutine9
      68  ?_0
      20  ?_1
      28  ?_10
      28  ?_11
      28  ?_12
      32  ?_13
      44  ?_14
       4  ?_15
       4  ?_16
      24  ?_17
      20  ?_18
      28  ?_19
      56  ?_2
      36  ?_20
      28  ?_21
      16  ?_22
      28  ?_23
      20  ?_24
      32  ?_25
       8  ?_26
      20  ?_27
      24  ?_28
      32  ?_29
      32  ?_3
      32  ?_30
      56  ?_31
      48  ?_32
      40  ?_33
      28  ?_34
      28  ?_35
      60  ?_36
      56  ?_4
      32  ?_5
      56  ?_6
      28  ?_7
      32  ?_8
      24  ?_9
      26  emAfActivateLevelControl
      28  emAfGetLevelControlState
     138  emAfLevelControlClusterMoveHandler
     312  emAfLevelControlClusterMoveToLevelHandler
     250  emAfLevelControlClusterStepHandler
      32  emAfLevelControlClusterStopHandler
      34  emAfPluginLevelControlClusterGetCurrentLevel
     236  emAfPluginLevelControlClusterOnOffEffectHandler
      16  emberAfLevelControlClusterMoveCallback
      40  emberAfLevelControlClusterMoveToLevelCallback
      40  emberAfLevelControlClusterMoveToLevelWithOnOffCallback
      24  emberAfLevelControlClusterMoveWithOnOffCallback
      26  emberAfLevelControlClusterServerInitCallback
     498  emberAfLevelControlClusterServerTickCallback
      24  emberAfLevelControlClusterStepCallback
      22  emberAfLevelControlClusterStepWithOnOffCallback
      18  emberAfLevelControlClusterStopCallback
      16  emberAfLevelControlClusterStopWithOnOffCallback
       2  minLevel
          maxLevel
      50  setOnOffValue
      24  stateTable

 
    26 bytes in section .bss
     8 bytes in section .rodata
 3 188 bytes in section .text
 
 3 188 bytes of CODE  memory
     8 bytes of CONST memory
    26 bytes of DATA  memory

Errors: none
Warnings: 2
