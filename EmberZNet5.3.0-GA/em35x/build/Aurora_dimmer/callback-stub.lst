###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        01/Dec/2016  11:42:16
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\AONE_Zigbee\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\callback-stub.c
#    Command line =  
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\AONE_Zigbee\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\callback-stub.c"
#        -D
#        "GENERATED_TOKEN_HEADER=\"app/builder/Aurora_dimmer/Aurora_dimmer_tokens.h\""
#        -D "ZA_GENERATED_HEADER=\"app/builder/Aurora_dimmer/Aurora_dimmer.h\""
#        -D APP_BTL -D
#        "BOARD_HEADER=\"../../../AONE_Zigbee/EmberZNet5.3.0-GA/em35x/app/builder/Aurora_dimmer/Aurora_dimmer_board.h\""
#        -D "PLATFORM_HEADER=\"hal/micro/cortexm3/compiler/iar.h\"" -D CORTEXM3
#        -D CORTEXM3_EMBER_MICRO -D CORTEXM3_EM357 -D PHY_EM3XX -D
#        "APPLICATION_TOKEN_HEADER=\"app/framework/util/tokens.h\"" -D
#        "CONFIGURATION_HEADER=\"app/framework/util/config.h\"" -D
#        "ATTRIBUTE_STORAGE_CONFIGURATION=\"app/builder/Aurora_dimmer/Aurora_dimmer_endpoint_config.h\""
#        -D "__SOURCEFILE__=\"callback-stub.c\"" -lC
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\AONE_Zigbee\EmberZNet5.3.0-GA\em35x\build\Aurora_dimmer\"
#        --diag_suppress Pa050 -o
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\AONE_Zigbee\EmberZNet5.3.0-GA\em35x\build\Aurora_dimmer\"
#        --debug --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\AONE_Zigbee\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\"
#        -I "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\AONE_Zigbee\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\"
#        -I "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\AONE_Zigbee\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\"
#        -I "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\AONE_Zigbee\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\app\framework\include\"
#        -I "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\AONE_Zigbee\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\..\..\..\16.09.23
#        Fixedonoff\EmberZNet5.3.0-GA\em35x\" -I
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\AONE_Zigbee\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\..\..\..\16.09.23
#        Fixedonoff\EmberZNet5.3.0-GA\em35x\stack\" -I
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\AONE_Zigbee\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\..\..\..\16.09.23
#        Fixedonoff\EmberZNet5.3.0-GA\em35x\hal\" -I
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\AONE_Zigbee\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\..\..\..\16.09.23
#        Fixedonoff\EmberZNet5.3.0-GA\em35x\hal\..\" -Ohz --use_c++_inline
#    List file    =  
#        C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\AONE_Zigbee\EmberZNet5.3.0-GA\em35x\build\Aurora_dimmer\callback-stub.lst
#    Object file  =  
#        C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\AONE_Zigbee\EmberZNet5.3.0-GA\em35x\build\Aurora_dimmer\callback-stub.o
#
###############################################################################

C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH ETRX357\AONE_Zigbee\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\callback-stub.c
      1          // This file is generated by Ember Desktop.  Please do not edit manually.
      2          //
      3          //
      4          
      5          // This c file provides stubs for all callbacks. These stubs
      6          // will be used in the case where user defined implementations
      7          // of the callbacks have not been provided.
      8          #include "app/framework/include/af.h"
      9          
     10          /** @brief Add To Current App Tasks
     11           *
     12           * This function is only useful to sleepy end devices.  This function will note
     13           * the passed item as part of a set of tasks the application has outstanding
     14           * (e.g. message sent requiring APS acknwoledgement).  This will affect how the
     15           * application behaves with regard to sleeping and polling.  Until the
     16           * outstanding task is completed, the device may poll more frequently and sleep
     17           * less often.
     18           *
     19           * @param tasks   Ver.: always
     20           */

   \                                 In section .text, align 2, keep-with-next
     21          void emberAfAddToCurrentAppTasksCallback(EmberAfApplicationTask tasks)
     22          {
     23          }
   \                     emberAfAddToCurrentAppTasksCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
     24          
     25          /** @brief Allow Network Write Attribute
     26           *
     27           * This function is called by the application framework before it writes an
     28           * attribute in response to a write attribute request from an external device.
     29           * The value passed into this callback is the value to which the attribute is to
     30           * be set by the framework.
     31                  Example:	In mirroring simple metering data
     32           * on an Energy Services Interface (ESI) (formerly called Energy Service Portal
     33           * (ESP) in SE 1.0).), a mirrored simple meter needs to write read-only
     34           * attributes on its mirror. The-meter-mirror sample application, located in
     35           * app/framework/sample-apps, uses this callback to allow the mirrored device to
     36           * write simple metering attributes on the mirror regardless of the fact that
     37           * most simple metering attributes are defined as read-only by the ZigBee
     38           * specification.
     39                  Note:	The ZCL specification does not (as of this
     40           * writing) specify any permission-level security for writing writeable
     41           * attributes. As far as the ZCL specification is concerned, if an attribute is
     42           * writeable, any device that has a link key for the device should be able to
     43           * write that attribute. Furthermore if an attribute is read only, it should not
     44           * be written over the air. Thus, if you implement permissions for writing
     45           * attributes as a feature, you MAY be operating outside the specification. This
     46           * is unlikely to be a problem for writing read-only attributes, but it may be a
     47           * problem for attributes that are writeable according to the specification but
     48           * restricted by the application implementing this callback.
     49           *
     50           * @param endpoint   Ver.: always
     51           * @param clusterId   Ver.: always
     52           * @param attributeId   Ver.: always
     53           * @param mask   Ver.: always
     54           * @param manufacturerCode   Ver.: always
     55           * @param value   Ver.: always
     56           * @param type   Ver.: always
     57           */

   \                                 In section .text, align 2, keep-with-next
     58          EmberAfAttributeWritePermission emberAfAllowNetworkWriteAttributeCallback(int8u endpoint,
     59                                                                                    EmberAfClusterId clusterId,
     60                                                                                    EmberAfAttributeId attributeId,
     61                                                                                    int8u mask,
     62                                                                                    int16u manufacturerCode,
     63                                                                                    int8u* value,
     64                                                                                    int8u type)
     65          {
     66            return EMBER_ZCL_ATTRIBUTE_WRITE_PERMISSION_ALLOW_WRITE_NORMAL; // Default
   \                     emberAfAllowNetworkWriteAttributeCallback: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x4770             BX       LR               ;; return
     67          }
     68          
     69          /** @brief Key establishment Cluster Client Command Received
     70           *
     71           * This function is called by the application framework when a server-to-client
     72           * key establishment command is received but has yet to be handled by the
     73           * framework code.  This function should return a boolean value indicating
     74           * whether the command has been handled by the application code and should not
     75           * be further processed by the framework.
     76           *
     77           * @param cmd   Ver.: always
     78           */

   \                                 In section .text, align 2, keep-with-next
     79          boolean emberAfKeyEstablishmentClusterClientCommandReceivedCallback(EmberAfClusterCommand *cmd)
     80          {
     81            return FALSE;
   \                     emberAfKeyEstablishmentClusterClientCommandReceivedCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
     82          }
     83          
     84          /** @brief Cluster Init
     85           *
     86           * This function is called when a specific cluster is initialized. It gives the
     87           * application an opportunity to take care of cluster initialization procedures.
     88           * It is called exactly once for each endpoint where cluster is present.
     89           *
     90           * @param endpoint   Ver.: always
     91           * @param clusterId   Ver.: always
     92           */

   \                                 In section .text, align 2, keep-with-next
     93          void emberAfClusterInitCallback(int8u endpoint,
     94                                          EmberAfClusterId clusterId)
     95          {
     96          }
   \                     emberAfClusterInitCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
     97          
     98          /** @brief Cluster Security Custom
     99           *
    100           * This callback is fired when determining if APS encryption is required for a
    101           * cluster outside of the specification's required clusters.  In other words,
    102           * for the Smart Energy profile this would be a cluster beyond the list that
    103           * normally requires APS encryption.
    104           *
    105           * @param profileId The profile ID  Ver.: always
    106           * @param clusterId The cluster ID  Ver.: always
    107           * @param incoming Whether this is an incoming or outgoing message.  Ver.:
    108           * always
    109           * @param commandId The ZCL command ID being sent/received.  Ver.: always
    110           */

   \                                 In section .text, align 2, keep-with-next
    111          boolean emberAfClusterSecurityCustomCallback(EmberAfProfileId profileId,
    112                                                       EmberAfClusterId clusterId,
    113                                                       boolean incoming,
    114                                                       int8u commandId)
    115          {
    116            // By default, assume APS encryption is not required.
    117            return FALSE;
   \                     emberAfClusterSecurityCustomCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    118          }
    119          
    120          /** @brief Configure Reporting Response
    121           *
    122           * This function is called by the application framework when a Configure
    123           * Reporting Response command is received from an external device.  The
    124           * application should return TRUE if the message was processed or FALSE if it
    125           * was not.
    126           *
    127           * @param clusterId The cluster identifier of this response.  Ver.: always
    128           * @param buffer Buffer containing the list of attribute status records.  Ver.:
    129           * always
    130           * @param bufLen The length in bytes of the list.  Ver.: always
    131           */

   \                                 In section .text, align 2, keep-with-next
    132          boolean emberAfConfigureReportingResponseCallback(EmberAfClusterId clusterId,
    133                                                            int8u *buffer,
    134                                                            int16u bufLen)
    135          {
    136            return FALSE;
   \                     emberAfConfigureReportingResponseCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    137          }
    138          
    139          /** @brief Default Response
    140           *
    141           * This function is called by the application framework when a Default Response
    142           * command is received from an external device.  The application should return
    143           * TRUE if the message was processed or FALSE if it was not.
    144           *
    145           * @param clusterId The cluster identifier of this response.  Ver.: always
    146           * @param commandId The command identifier to which this is a response.  Ver.:
    147           * always
    148           * @param status Specifies either SUCCESS or the nature of the error that was
    149           * detected in the received command.  Ver.: always
    150           */

   \                                 In section .text, align 2, keep-with-next
    151          boolean emberAfDefaultResponseCallback(EmberAfClusterId clusterId,
    152                                                 int8u commandId,
    153                                                 EmberAfStatus status)
    154          {
    155            return FALSE;
   \                     emberAfDefaultResponseCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    156          }
    157          
    158          /** @brief Delivery Status
    159           *
    160           * @deprecated This callback has been deprecated and will be removed in a future
    161           * release. In lieu, the plugin-specific MessageSent callback or the main
    162           * MessageSent callback should be utilized.
    163           *
    164           * @param type   Ver.: always
    165           * @param status   Ver.: always
    166           */

   \                                 In section .text, align 2, keep-with-next
    167          void emberAfDeliveryStatusCallback(EmberOutgoingMessageType type,
    168                                             EmberStatus status)
    169          {
    170          }
   \                     emberAfDeliveryStatusCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    171          
    172          /** @brief Discover Attributes Response
    173           *
    174           * This function is called by the application framework when a Discover
    175           * Attributes Response or Discover Attributes Extended Response command is
    176           * received from an external device.  The Discover Attributes Response command
    177           * contains a boolean indicating if discovery is complete and a list of zero or
    178           * more attribute identifier/type records. The final argument indicates whether
    179           * the response is in the extended format or not.  The application should return
    180           * TRUE if the message was processed or FALSE if it was not.
    181           *
    182           * @param clusterId The cluster identifier of this response.  Ver.: always
    183           * @param discoveryComplete Indicates whether there are more attributes to be
    184           * discovered.  TRUE if there are no more attributes to be discovered.  Ver.:
    185           * always
    186           * @param buffer Buffer containing the list of attribute identifier/type
    187           * records.  Ver.: always
    188           * @param bufLen The length in bytes of the list.  Ver.: always
    189           * @param extended Indicates whether the response is in the extended format or
    190           * not.  Ver.: always
    191           */

   \                                 In section .text, align 2, keep-with-next
    192          boolean emberAfDiscoverAttributesResponseCallback(EmberAfClusterId clusterId,
    193                                                            boolean discoveryComplete,
    194                                                            int8u *buffer,
    195                                                            int16u bufLen,
    196                                                            boolean extended)
    197          {
    198            return FALSE;
   \                     emberAfDiscoverAttributesResponseCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    199          }
    200          
    201          /** @brief Discover Commands Generated Response
    202           *
    203           * This function is called by the framework when Discover Commands Generated
    204           * Response is received.
    205           *
    206           * @param clusterId The cluster identifier of this response.  Ver.: always
    207           * @param manufacturerCode Manufacturer code  Ver.: always
    208           * @param discoveryComplete Indicates whether there are more commands to be
    209           * discovered.  Ver.: always
    210           * @param commandIds Buffer containing the list of command identifiers.  Ver.:
    211           * always
    212           * @param commandIdCount The length of bytes of the list, whish is the same as
    213           * the number of identifiers.  Ver.: always
    214           */

   \                                 In section .text, align 2, keep-with-next
    215          boolean emberAfDiscoverCommandsGeneratedResponseCallback(EmberAfClusterId clusterId,
    216                                                                   int16u manufacturerCode,
    217                                                                   boolean discoveryComplete,
    218                                                                   int8u *commandIds,
    219                                                                   int16u commandIdCount)
    220          {
    221            return FALSE;
   \                     emberAfDiscoverCommandsGeneratedResponseCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    222          }
    223          
    224          /** @brief Discover Commands Received Response
    225           *
    226           * This function is called by the framework when Discover Commands Received
    227           * Response is received.
    228           *
    229           * @param clusterId The cluster identifier of this response.  Ver.: always
    230           * @param manufacturerCode Manufacturer code  Ver.: always
    231           * @param discoveryComplete Indicates whether there are more commands to be
    232           * discovered.  Ver.: always
    233           * @param commandIds Buffer containing the list of command identifiers.  Ver.:
    234           * always
    235           * @param commandIdCount The length of bytes of the list, whish is the same as
    236           * the number of identifiers.  Ver.: always
    237           */

   \                                 In section .text, align 2, keep-with-next
    238          boolean emberAfDiscoverCommandsReceivedResponseCallback(EmberAfClusterId clusterId,
    239                                                                  int16u manufacturerCode,
    240                                                                  boolean discoveryComplete,
    241                                                                  int8u *commandIds,
    242                                                                  int16u commandIdCount)
    243          {
    244            return FALSE;
   \                     emberAfDiscoverCommandsReceivedResponseCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    245          }
    246          
    247          /** @brief External Attribute Read
    248           *
    249           * Like emberAfExternalAttributeWriteCallback above, this function is called
    250           * when the framework needs to read an attribute that is not stored within the
    251           * Application Framework's data structures.
    252                  All of the important
    253           * information about the attribute itself is passed as a pointer to an
    254           * EmberAfAttributeMetadata struct, which is stored within the application and
    255           * used to manage the attribute. A complete description of the
    256           * EmberAfAttributeMetadata struct is provided in
    257           * app/framework/include/af-types.h
    258                  This function assumes that the
    259           * application is able to read the attribute, write it into the passed buffer,
    260           * and return immediately. Any attributes that require a state machine for
    261           * reading and writing are not really candidates for externalization at the
    262           * present time. The Application Framework does not currently include a state
    263           * machine for reading or writing attributes that must take place across a
    264           * series of application ticks. Attributes that cannot be read in a timely
    265           * manner should be stored within the Application Framework and updated
    266           * occasionally by the application code from within the
    267           * emberAfMainTickCallback.
    268                  If the application was successfully able to
    269           * read the attribute and write it into the passed buffer, it should return a
    270           * value of EMBER_ZCL_STATUS_SUCCESS. Any other return value indicates the
    271           * application was not able to read the attribute.
    272           *
    273           * @param endpoint   Ver.: always
    274           * @param clusterId   Ver.: always
    275           * @param attributeMetadata   Ver.: always
    276           * @param manufacturerCode   Ver.: always
    277           * @param buffer   Ver.: always
    278           */

   \                                 In section .text, align 2, keep-with-next
    279          EmberAfStatus emberAfExternalAttributeReadCallback(int8u endpoint,
    280                                                             EmberAfClusterId clusterId,
    281                                                             EmberAfAttributeMetadata *attributeMetadata,
    282                                                             int16u manufacturerCode,
    283                                                             int8u *buffer)
    284          {
    285            return EMBER_ZCL_STATUS_FAILURE;
   \                     emberAfExternalAttributeReadCallback: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x4770             BX       LR               ;; return
    286          }
    287          
    288          /** @brief External Attribute Write
    289           *
    290           * This function is called whenever the Application Framework needs to write an
    291           * attribute which is not stored within the data structures of the Application
    292           * Framework itself. One of the new features in Version 2 is the ability to
    293           * store attributes outside the Framework. This is particularly useful for
    294           * attributes that do not need to be stored because they can be read off the
    295           * hardware when they are needed, or are stored in some central location used by
    296           * many modules within the system. In this case, you can indicate that the
    297           * attribute is stored externally. When the framework needs to write an external
    298           * attribute, it makes a call to this callback.
    299                  This callback is very
    300           * useful for host micros which need to store attributes in persistent memory.
    301           * Because each host micro (used with an Ember NCP) has its own type of
    302           * persistent memory storage, the Application Framework does not include the
    303           * ability to mark attributes as stored in flash the way that it does for Ember
    304           * SoCs like the EM35x. On a host micro, any attributes that need to be stored
    305           * in persistent memory should be marked as external and accessed through the
    306           * external read and write callbacks. Any host code associated with the
    307           * persistent storage should be implemented within this callback.
    308                  All of
    309           * the important information about the attribute itself is passed as a pointer
    310           * to an EmberAfAttributeMetadata struct, which is stored within the application
    311           * and used to manage the attribute. A complete description of the
    312           * EmberAfAttributeMetadata struct is provided in
    313           * app/framework/include/af-types.h.
    314                  This function assumes that the
    315           * application is able to write the attribute and return immediately. Any
    316           * attributes that require a state machine for reading and writing are not
    317           * candidates for externalization at the present time. The Application Framework
    318           * does not currently include a state machine for reading or writing attributes
    319           * that must take place across a series of application ticks. Attributes that
    320           * cannot be written immediately should be stored within the Application
    321           * Framework and updated occasionally by the application code from within the
    322           * emberAfMainTickCallback.
    323                  If the application was successfully able to
    324           * write the attribute, it returns a value of EMBER_ZCL_STATUS_SUCCESS. Any
    325           * other return value indicates the application was not able to write the
    326           * attribute.
    327           *
    328           * @param endpoint   Ver.: always
    329           * @param clusterId   Ver.: always
    330           * @param attributeMetadata   Ver.: always
    331           * @param manufacturerCode   Ver.: always
    332           * @param buffer   Ver.: always
    333           */

   \                                 In section .text, align 2, keep-with-next
    334          EmberAfStatus emberAfExternalAttributeWriteCallback(int8u endpoint,
    335                                                              EmberAfClusterId clusterId,
    336                                                              EmberAfAttributeMetadata *attributeMetadata,
    337                                                              int16u manufacturerCode,
    338                                                              int8u *buffer)
    339          {
    340            return EMBER_ZCL_STATUS_FAILURE;
   \                     emberAfExternalAttributeWriteCallback: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x4770             BX       LR               ;; return
    341          }
    342          
    343          /** @brief Get Current App Tasks
    344           *
    345           * This function is only useful to sleepy end devices.  This function will
    346           * return the set of tasks the application has outstanding.  These tasks affect
    347           * how the application behaves with regard to sleeping and polling.
    348           *
    349           */

   \                                 In section .text, align 2, keep-with-next
    350          EmberAfApplicationTask emberAfGetCurrentAppTasksCallback(void)
    351          {
    352            return 0;
   \                     emberAfGetCurrentAppTasksCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    353          }
    354          
    355          /** @brief Get Current Poll Control
    356           *
    357           * This function will retrieve the current poll control that the system is using
    358           * for the current network.  This is determined by examining all the scheduled
    359           * events and obtaining the most restrictive poll control context across all
    360           * events.  The most restrictive poll control is EMBER_AF_SHORT_POLL followed by
    361           * EMBER_AF_LONG_POLL.
    362           *
    363           */

   \                                 In section .text, align 2, keep-with-next
    364          EmberAfEventPollControl emberAfGetCurrentPollControlCallback(void)
    365          {
    366            return EMBER_AF_LONG_POLL;
   \                     emberAfGetCurrentPollControlCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    367          }
    368          
    369          /** @brief Get Current Poll Interval Ms
    370           *
    371           * This function is only useful to end devices.  This function will return the
    372           * current poll interval (in milliseconds) for the current network.  This
    373           * interval is the maximum amount of time a child is currently waiting between
    374           * polls of its parent.
    375           *
    376           */

   \                                 In section .text, align 2, keep-with-next
    377          int32u emberAfGetCurrentPollIntervalMsCallback(void)
    378          {
    379            return 0;
   \                     emberAfGetCurrentPollIntervalMsCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    380          }
    381          
    382          /** @brief Get Current Poll Interval Qs
    383           *
    384           * This function is only useful to end devices.  This function will return the
    385           * current poll interval (in quarter seconds) for the current network.  This
    386           * interval is the maximum amount of time a child is currently waiting between
    387           * polls of its parent.
    388           *
    389           */

   \                                 In section .text, align 2, keep-with-next
    390          int32u emberAfGetCurrentPollIntervalQsCallback(void)
    391          {
    392            return 0;
   \                     emberAfGetCurrentPollIntervalQsCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    393          }
    394          
    395          /** @brief Get Current Time
    396           *
    397           * This callback is called when device attempts to get current time from the
    398           * hardware. If this device has means to retrieve exact time, then this method
    399           * should implement it. If the callback can't provide the exact time it should
    400           * return 0 to indicate failure. Default action is to return 0, which indicates
    401           * that device does not have access to real time.
    402           *
    403           */

   \                                 In section .text, align 2, keep-with-next
    404          int32u emberAfGetCurrentTimeCallback(void)
    405          {
    406            return 0;
   \                     emberAfGetCurrentTimeCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    407          }
    408          
    409          /** @brief Get Default Poll Control
    410           *
    411           * This function will retrieve the default poll control for the current network
    412           * as previously set by emberAfSetDefaultPollControlCallback().  The default
    413           * poll control will limit whether the network can long poll.
    414           *
    415           */

   \                                 In section .text, align 2, keep-with-next
    416          EmberAfEventPollControl emberAfGetDefaultPollControlCallback(void)
    417          {
    418            return EMBER_AF_LONG_POLL;
   \                     emberAfGetDefaultPollControlCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    419          }
    420          
    421          /** @brief Get Long Poll Interval Ms
    422           *
    423           * This function is only useful to end devices.  This function will return the
    424           * long poll interval (in milliseconds) for the current network.  This interval
    425           * is the maximum amount of time a child will wait between polls of its parent
    426           * when it is not expecting data.
    427           *
    428           */

   \                                 In section .text, align 2, keep-with-next
    429          int32u emberAfGetLongPollIntervalMsCallback(void)
    430          {
    431            return 0;
   \                     emberAfGetLongPollIntervalMsCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    432          }
    433          
    434          /** @brief Get Long Poll Interval Qs
    435           *
    436           * This function is only useful to end devices.  This function will return the
    437           * long poll interval (in quarter seconds) for the current network.  This
    438           * interval is the maximum amount of time a child will wait between polls of its
    439           * parent when it is not expecting data.
    440           *
    441           */

   \                                 In section .text, align 2, keep-with-next
    442          int32u emberAfGetLongPollIntervalQsCallback(void)
    443          {
    444            return 0;
   \                     emberAfGetLongPollIntervalQsCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    445          }
    446          
    447          /** @brief Get Short Poll Interval Ms
    448           *
    449           * This function is only useful to sleepy end devices.  This function will
    450           * return the short poll interval (in milliseconds) for the current network. 
    451           * This interval is the maximum amount of time a child will wait between polls
    452           * of its parent when it is expecting data.
    453           *
    454           */

   \                                 In section .text, align 2, keep-with-next
    455          int16u emberAfGetShortPollIntervalMsCallback(void)
    456          {
    457            return 0;
   \                     emberAfGetShortPollIntervalMsCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    458          }
    459          
    460          /** @brief Get Short Poll Interval Qs
    461           *
    462           * This function is only useful to sleepy end devices.  This function will
    463           * return the short poll interval (in quarter seconds) for the current network. 
    464           * This interval is the maximum amount of time a child will wait between polls
    465           * of its parent when it is expecting data.
    466           *
    467           */

   \                                 In section .text, align 2, keep-with-next
    468          int16u emberAfGetShortPollIntervalQsCallback(void)
    469          {
    470            return 0;
   \                     emberAfGetShortPollIntervalQsCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    471          }
    472          
    473          /** @brief Get Wake Timeout Bitmask
    474           *
    475           * This function is only useful to sleepy end devices.  This function will
    476           * return the wake timeout bitmask for the current network.  The bitmask
    477           * determines which tasks will timeout automatically and which tasks require
    478           * manual removal from the task list.
    479           *
    480           */

   \                                 In section .text, align 2, keep-with-next
    481          EmberAfApplicationTask emberAfGetWakeTimeoutBitmaskCallback(void)
    482          {
    483            return 0;
   \                     emberAfGetWakeTimeoutBitmaskCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    484          }
    485          
    486          /** @brief Get Wake Timeout Ms
    487           *
    488           * This function is only useful to sleepy end devices.  This function will
    489           * return the wake timeout (in milliseconds) for the current network.  This
    490           * timeout is the maximum amount of time a child will wait for a task in the
    491           * wake bitmask to finish.  While waiting, the device will short poll.
    492           *
    493           */

   \                                 In section .text, align 2, keep-with-next
    494          int16u emberAfGetWakeTimeoutMsCallback(void)
    495          {
    496            return 0;
   \                     emberAfGetWakeTimeoutMsCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    497          }
    498          
    499          /** @brief Get Wake Timeout Qs
    500           *
    501           * This function is only useful to sleepy end devices.  This function will
    502           * return the wake timeout (in quarter seconds) for the current network.  This
    503           * timeout is the maximum amount of time a child will wait for a task in the
    504           * wake bitmask to finish.  While waiting, the device will short poll.
    505           *
    506           */

   \                                 In section .text, align 2, keep-with-next
    507          int16u emberAfGetWakeTimeoutQsCallback(void)
    508          {
    509            return 0;
   \                     emberAfGetWakeTimeoutQsCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    510          }
    511          
    512          /** @brief Initiate Inter Pan Key Establishment
    513           *
    514           * This function is called by the framework to initiate key establishment with a
    515           * remote device on a different PAN.  The application should return
    516           * EMBER_SUCCESS if key establishment was initiated successfully.  The
    517           * application should call ::emberAfInterPanKeyEstablishmentCallback as events
    518           * occur.
    519           *
    520           * @param panId The PAN id of the remote device.  Ver.: always
    521           * @param eui64 The EUI64 of the remote device.  Ver.: always
    522           */

   \                                 In section .text, align 2, keep-with-next
    523          EmberStatus emberAfInitiateInterPanKeyEstablishmentCallback(EmberPanId panId,
    524                                                                      const EmberEUI64 eui64)
    525          {
    526            return EMBER_LIBRARY_NOT_PRESENT;
   \                     emberAfInitiateInterPanKeyEstablishmentCallback: (+1)
   \   00000000   0x20B5             MOVS     R0,#+181
   \   00000002   0x4770             BX       LR               ;; return
    527          }
    528          
    529          /** @brief Initiate Key Establishment
    530           *
    531           * This function is called by the framework to initiate key establishment with a
    532           * remote device.  The application should return EMBER_SUCCESS if key
    533           * establishment was initiated successfully.  The application should call
    534           * ::emberAfKeyEstablishmentCallback as events occur.
    535           *
    536           * @param nodeId The node id of the remote device.  Ver.: always
    537           * @param endpoint The endpoint on the remote device.  Ver.: always
    538           */

   \                                 In section .text, align 2, keep-with-next
    539          EmberStatus emberAfInitiateKeyEstablishmentCallback(EmberNodeId nodeId,
    540                                                              int8u endpoint)
    541          {
    542            return EMBER_LIBRARY_NOT_PRESENT;
   \                     emberAfInitiateKeyEstablishmentCallback: (+1)
   \   00000000   0x20B5             MOVS     R0,#+181
   \   00000002   0x4770             BX       LR               ;; return
    543          }
    544          
    545          /** @brief Initiate Partner Link Key Exchange
    546           *
    547           * This function is called by the framework to initiate a partner link key
    548           * exchange with a remote device.  The application should return EMBER_SUCCESS
    549           * if the partner link key exchange was initiated successfully.  When the
    550           * partner link key exchange completes, the application should call the given
    551           * callback.
    552           *
    553           * @param target The node id of the remote device.  Ver.: always
    554           * @param endpoint The key establishment endpoint of the remote device.  Ver.:
    555           * always
    556           * @param callback The callback that should be called when the partner link key
    557           * exchange completse.  Ver.: always
    558           */

   \                                 In section .text, align 2, keep-with-next
    559          EmberStatus emberAfInitiatePartnerLinkKeyExchangeCallback(EmberNodeId target,
    560                                                                    int8u endpoint,
    561                                                                    EmberAfPartnerLinkKeyExchangeCallback *callback)
    562          {
    563            return EMBER_LIBRARY_NOT_PRESENT;
   \                     emberAfInitiatePartnerLinkKeyExchangeCallback: (+1)
   \   00000000   0x20B5             MOVS     R0,#+181
   \   00000002   0x4770             BX       LR               ;; return
    564          }
    565          
    566          /** @brief Inter Pan Key Establishment
    567           *
    568           * A callback by the key-establishment code to indicate an event has occurred. 
    569           * For error codes this is purely a notification.  For non-error status codes
    570           * (besides LINK_KEY_ESTABLISHED), it is the application's chance to allow or
    571           * disallow the operation.  If the application returns TRUE then the key
    572           * establishment is allowed to proceed.  If it returns FALSE, then key
    573           * establishment is aborted.  LINK_KEY_ESTABLISHED is a notification of success.
    574           *
    575           * @param status   Ver.: always
    576           * @param amInitiator   Ver.: always
    577           * @param panId   Ver.: always
    578           * @param eui64   Ver.: always
    579           * @param delayInSeconds   Ver.: always
    580           */

   \                                 In section .text, align 2, keep-with-next
    581          boolean emberAfInterPanKeyEstablishmentCallback(EmberAfKeyEstablishmentNotifyMessage status,
    582                                                          boolean amInitiator,
    583                                                          EmberPanId panId,
    584                                                          const EmberEUI64 eui64,
    585                                                          int8u delayInSeconds)
    586          {
    587            return TRUE;
   \                     emberAfInterPanKeyEstablishmentCallback: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x4770             BX       LR               ;; return
    588          }
    589          
    590          /** @brief Interpan Send Message
    591           *
    592           * This function will send a raw MAC message with interpan frame format using
    593           * the passed parameters.
    594           *
    595           * @param header Interpan header info  Ver.: always
    596           * @param messageLength The length of the message received or to send  Ver.:
    597           * always
    598           * @param message The message data received or to send.  Ver.: always
    599           */

   \                                 In section .text, align 2, keep-with-next
    600          EmberStatus emberAfInterpanSendMessageCallback(EmberAfInterpanHeader* header,
    601                                                         int16u messageLength,
    602                                                         int8u* message)
    603          {
    604            return EMBER_LIBRARY_NOT_PRESENT;
   \                     emberAfInterpanSendMessageCallback: (+1)
   \   00000000   0x20B5             MOVS     R0,#+181
   \   00000002   0x4770             BX       LR               ;; return
    605          }
    606          
    607          /** @brief Key Establishment
    608           *
    609           * A callback by the key-establishment code to indicate an event has occurred. 
    610           * For error codes this is purely a notification.  For non-error status codes
    611           * (besides LINK_KEY_ESTABLISHED), it is the application's chance to allow or
    612           * disallow the operation.  If the application returns TRUE then the key
    613           * establishment is allowed to proceed.  If it returns FALSE, then key
    614           * establishment is aborted.  LINK_KEY_ESTABLISHED is a notification of success.
    615           *
    616           * @param status   Ver.: always
    617           * @param amInitiator   Ver.: always
    618           * @param partnerShortId   Ver.: always
    619           * @param delayInSeconds   Ver.: always
    620           */

   \                                 In section .text, align 2, keep-with-next
    621          boolean emberAfKeyEstablishmentCallback(EmberAfKeyEstablishmentNotifyMessage status,
    622                                                  boolean amInitiator,
    623                                                  EmberNodeId partnerShortId,
    624                                                  int8u delayInSeconds)
    625          {
    626            return TRUE;
   \                     emberAfKeyEstablishmentCallback: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x4770             BX       LR               ;; return
    627          }
    628          
    629          /** @brief Message Sent
    630           *
    631           * This function is called by the application framework from the message sent
    632           * handler, when it is informed by the stack regarding the message sent status.
    633           * All of the values passed to the emberMessageSentHandler are passed on to this
    634           * callback. This provides an opportunity for the application to verify that its
    635           * message has been sent successfully and take the appropriate action. This
    636           * callback should return a boolean value of TRUE or FALSE. A value of TRUE
    637           * indicates that the message sent notification has been handled and should not
    638           * be handled by the application framework.
    639           *
    640           * @param type   Ver.: always
    641           * @param indexOrDestination   Ver.: always
    642           * @param apsFrame   Ver.: always
    643           * @param msgLen   Ver.: always
    644           * @param message   Ver.: always
    645           * @param status   Ver.: always
    646           */

   \                                 In section .text, align 2, keep-with-next
    647          boolean emberAfMessageSentCallback(EmberOutgoingMessageType type,
    648                                             int16u indexOrDestination,
    649                                             EmberApsFrame* apsFrame,
    650                                             int16u msgLen,
    651                                             int8u* message,
    652                                             EmberStatus status)
    653          {
    654            return FALSE;
   \                     emberAfMessageSentCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    655          }
    656          
    657          /** @brief Ncp Init
    658           *
    659           * This callback is used for initializing the network coprocessor either at
    660           * startup, or upon reset. It is should be used to perform any kind of EZSP
    661           * initialization and is called twice every time when NCP is reset. In the first
    662           * invocation, memoryAllocation will be TRUE and the application should only
    663           * issue EZSP commands that affect memory allocation on the NCP.  In the second
    664           * invocation, memoryAllocation will be FALSE and the application should only
    665           * issue EZSP commands that do not affect memory allocation on the NCP.  In an
    666           * SOC environment, this callbacks is not used.
    667           *
    668           * @param memoryAllocation   Ver.: always
    669           */

   \                                 In section .text, align 2, keep-with-next
    670          void emberAfNcpInitCallback(boolean memoryAllocation)
    671          {
    672          }
   \                     emberAfNcpInitCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    673          
    674          /** @brief Network Key Update Complete
    675           *
    676           * This is called by the framework when a network key update operation started
    677           * by the trust center is complete.
    678           *
    679           * @param status   Ver.: always
    680           */

   \                                 In section .text, align 2, keep-with-next
    681          void emberAfNetworkKeyUpdateCompleteCallback(EmberStatus status)
    682          {
    683          }
   \                     emberAfNetworkKeyUpdateCompleteCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    684          
    685          /** @brief Ota Page Request Server Policy
    686           *
    687           * This callback is called by the OTA server page request code when it wants to
    688           * determine if it is allowed for an OTA client to make a page request.  It is
    689           * only called if page request support has been enabled on the server.  It
    690           * should return EMBER_ZCL_STATUS_SUCCESS if it allows the page request, and
    691           * EMBER_ZCL_STATUS_UNSUP_CLUSTER_COMMAND if it does not want to allow it.
    692           *
    693           */

   \                                 In section .text, align 2, keep-with-next
    694          int8u emberAfOtaPageRequestServerPolicyCallback(void)
    695          {
    696            return EMBER_ZCL_STATUS_SUCCESS;
   \                     emberAfOtaPageRequestServerPolicyCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    697          }
    698          
    699          /** @brief Ota Server Block Size
    700           *
    701           * This function provides a way for the server to adjust the block size of its
    702           * response to an Image block request by a client.
    703           *
    704           * @param clientNodeId The node Id of OTA client making an image block request. 
    705           * Ver.: always
    706           */

   \                                 In section .text, align 2, keep-with-next
    707          int8u emberAfOtaServerBlockSizeCallback(EmberNodeId clientNodeId)
    708          {
   \                     emberAfOtaServerBlockSizeCallback: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
   \   00000004   0x4604             MOV      R4,R0
    709            // This function provides a way for the server to potentially
    710            // adjust the block size based on the client who is requesting.
    711            // In other words if we are using source routing we will limit
    712            // data returned by enough to put a source route into the message.
    713          
    714            // Image Block Response Message Format
    715            // Status Code: 1-byte
    716            // Manuf Code:  2-bytes
    717            // Image Type:  2-bytes
    718            // File Ver:    4-bytes
    719            // File Offset: 4-bytes
    720            // Data Size:   1-byte
    721            // Data:        variable
    722            const int8u IMAGE_BLOCK_RESPONSE_OVERHEAD = (EMBER_AF_ZCL_OVERHEAD + 14);
    723          
    724            EmberApsFrame apsFrame;
    725            int8u maxSize;
    726            apsFrame.options = EMBER_APS_OPTION_NONE;
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    727          
    728            if (emberAfIsCurrentSecurityProfileSmartEnergy()) {
   \   0000000C   0x.... 0x....      BL       emberAfIsCurrentSecurityProfileSmartEnergy
   \   00000010   0xB128             CBZ.N    R0,??emberAfOtaServerBlockSizeCallback_0
    729              apsFrame.options |= EMBER_APS_OPTION_ENCRYPTION;
   \   00000012   0xF8BD 0x0006      LDRH     R0,[SP, #+6]
   \   00000016   0xF040 0x0020      ORR      R0,R0,#0x20
   \   0000001A   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    730            }
    731          
    732            maxSize = emberAfMaximumApsPayloadLength(EMBER_OUTGOING_DIRECT,
    733                                                     clientNodeId,
    734                                                     &apsFrame);
    735            maxSize -= IMAGE_BLOCK_RESPONSE_OVERHEAD;
    736            return maxSize;
   \                     ??emberAfOtaServerBlockSizeCallback_0: (+1)
   \   0000001E   0xAA00             ADD      R2,SP,#+0
   \   00000020   0x4621             MOV      R1,R4
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0x.... 0x....      BL       emberAfMaximumApsPayloadLength
   \   00000028   0x3811             SUBS     R0,R0,#+17
   \   0000002A   0xB2C0             UXTB     R0,R0
   \   0000002C   0xB004             ADD      SP,SP,#+16
   \   0000002E   0xBD10             POP      {R4,PC}          ;; return
    737          }
    738          
    739          /** @brief Ota Server Image Block Request
    740           *
    741           * This function is called when the server application receives an image block
    742           * request by a client.
    743           *
    744           * @param data A struct containing the details of the image block response and
    745           * values that can be returned by the application to effect the behavior of the
    746           * server's response.  Ver.: always
    747           */

   \                                 In section .text, align 2, keep-with-next
    748          int8u emberAfOtaServerImageBlockRequestCallback(EmberAfImageBlockRequestCallbackStruct* data)
    749          {
    750            // This function should return one of the following:
    751            //   EMBER_ZCL_STATUS_SUCCESS - This indicates that the OTA server code should
    752            //     respond to the image block request normally.
    753            //   EMBER_ZCL_STATUS_ABORT - This indicates to the OTA server that it should
    754            //     tell the client to abort the download and make no more image block requests.
    755            //   EMBER_ZCL_STATUS_WAIT_FOR_DATA - This indicates to the OTA server to tell
    756            //     the client it should delay before asking for that data block again.
    757            //     The 'waitTimeInMinutesResponse' value should be filled in with the delay value.
    758            return EMBER_ZCL_STATUS_SUCCESS;
   \                     emberAfOtaServerImageBlockRequestCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    759          }
    760          
    761          /** @brief Ota Server Incoming Message Raw
    762           *
    763           * This callback is for processing incoming messages for the Over-the-air
    764           * bootload cluster server.  ZCL will not process the message and instead hand
    765           * the raw over the air data to the callback for its own processing.
    766           *
    767           * @param message A pointer to the structure containing the message buffer and
    768           * other information about it.  Ver.: always
    769           */

   \                                 In section .text, align 2, keep-with-next
    770          boolean emberAfOtaServerIncomingMessageRawCallback(EmberAfClusterCommand *message)
    771          {
    772            return FALSE;
   \                     emberAfOtaServerIncomingMessageRawCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    773          }
    774          
    775          /** @brief Ota Server Query
    776           *
    777           * This callback is fired when the OTA server receives a query request by the
    778           * client.  The callback lets the server application indicate to the client what
    779           * the 'next' version of software is for the device, or if there is not one
    780           * available.
    781           *
    782           * @param currentImageId This is the current software image that the client
    783           * hase.  Ver.: always
    784           * @param hardwareVersion If this value is non-NULL, it indicates the hardware
    785           * version of the client device.  If NULL, the client did not specify a hardware
    786           * version.  Ver.: always
    787           * @param nextUpgradeImageId This is a pointer to a data structure containing
    788           * the 'next' software version for the client to download.  Ver.: always
    789           */

   \                                 In section .text, align 2, keep-with-next
    790          int8u emberAfOtaServerQueryCallback(const EmberAfOtaImageId* currentImageId,
    791                                              int16u* hardwareVersion,
    792                                              EmberAfOtaImageId* nextUpgradeImageId)
    793          {
    794            // If a new software image is available, this function should return EMBER_ZCL_STATUS_SUCCESS
    795            // and populate the 'nextUpgradeImageId' structure with the appropriate values.
    796            // If no new software image is available (i.e. the client should not download a firmware image)
    797            // then the server should return EMBER_ZCL_STATUS_NO_IMAGE_AVAILABLE.
    798            return EMBER_ZCL_STATUS_NO_IMAGE_AVAILABLE;
   \                     emberAfOtaServerQueryCallback: (+1)
   \   00000000   0x2098             MOVS     R0,#+152
   \   00000002   0x4770             BX       LR               ;; return
    799          }
    800          
    801          /** @brief Ota Server Send Image Notify
    802           *
    803           * This callback is an indication to the OTA server that it should send out
    804           * notification about an OTA file that is available for download.
    805           *
    806           * @param dest The destination of the image notify message.  May be a broadcast
    807           * address.  Ver.: always
    808           * @param endpoint The destination endpoint of the image notify message.  May be
    809           * a broadcast endpoint.  Ver.: always
    810           * @param payloadType The type of data the image notify message will contain.  0
    811           * = no data.  1 = Manufacturer ID.  2 = Manufacturer ID and the image type ID. 
    812           * 3 = Manufacturer ID, image type ID, and firmware version.  Ver.: always
    813           * @param queryJitter The percentage of nodes that should respond to this
    814           * message, from 1-100.  On receipt of this message, each recipient will
    815           * randomly choose a percentage and only query the server if their percentage is
    816           * below this value.  Ver.: always
    817           * @param id The image information that will be put in the message.  The data
    818           * within this struct that will be appended to the message is determined by the
    819           * previous 'payloadType' argument.  Ver.: always
    820           */

   \                                 In section .text, align 2, keep-with-next
    821          boolean emberAfOtaServerSendImageNotifyCallback(EmberNodeId dest,
    822                                                          int8u endpoint,
    823                                                          int8u payloadType,
    824                                                          int8u queryJitter,
    825                                                          const EmberAfOtaImageId* id)
    826          {
    827            return FALSE;
   \                     emberAfOtaServerSendImageNotifyCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    828          }
    829          
    830          /** @brief Ota Server Upgrade End Request
    831           *
    832           * This function is called when the OTA server receives a request an upgrade end
    833           * request.  If the request indicated a successful download by the client, the
    834           * server must tell the client when and if to upgrade to the downloaded image.
    835           *
    836           * @param source The node ID of the device that sent the upgrade end request. 
    837           * Ver.: always
    838           * @param status This is the ZCL status sent by the client indicating the result
    839           * of its attempt to download the new upgrade image.  If the status is not
    840           * EMBER_ZCL_STATUS_SUCCESS then this callback is merely informative and no
    841           * response mesasge will be generated by the server.  Ver.: always
    842           * @param returnValue If the server returns TRUE indicating that the client
    843           * should apply the upgrade, this time value indicates when in the future the
    844           * client should apply the upgrade.  Ver.: always
    845           * @param imageId This variable indicates the software version that the client
    846           * successfully downloaded and is asking to upgrade to.  Ver.: always
    847           */

   \                                 In section .text, align 2, keep-with-next
    848          boolean emberAfOtaServerUpgradeEndRequestCallback(EmberNodeId source,
    849                                                            int8u status,
    850                                                            int32u* returnValue,
    851                                                            const EmberAfOtaImageId* imageId)
    852          {
    853            // If the status value is not EMBER_ZCL_STATUS_SUCCESS, then this callback is
    854            // merely informative and no response message will be generated by the server.
    855            // If the server wants the client to NOT apply the upgrade, then it should
    856            // return FALSE.
    857            // If the server wants the client to apply the upgrade, it should return TRUE
    858            // and set the 'returnValue' parameter to when it wants the client to
    859            // apply the upgrade.  There are three possible values:
    860            //   0               =  Apply the upgrade now
    861            //   0xFFFFFFFF      =  Don't apply yet, ask again later.
    862            //   (anything-else) =  Apply the upgrade X minutes from now.
    863            *returnValue = 0;
   \                     emberAfOtaServerUpgradeEndRequestCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x6010             STR      R0,[R2, #+0]
    864            return TRUE;
   \   00000004   0x2001             MOVS     R0,#+1
   \   00000006   0x4770             BX       LR               ;; return
    865          }
    866          
    867          /** @brief Ota Storage Close
    868           *
    869           * This callback shuts down the ZigBee Over-the-air storage module.
    870           *
    871           */

   \                                 In section .text, align 2, keep-with-next
    872          void emberAfOtaStorageCloseCallback(void)
    873          {
    874            // Please implement me.
    875            assert(FALSE);
   \                     emberAfOtaStorageCloseCallback: (+1)
   \   00000000   0xF240 0x316B      MOVW     R1,#+875
   \   00000004   0x.... 0x....      ADR.W    R0,?_0
   \   00000008   0x.... 0x....      B.W      halInternalAssertFailed
    876          }
    877          
    878          /** @brief Partner Link Key Exchange Request
    879           *
    880           * This function is called by the framework on SOC platforms when a remote node
    881           * requests a partner link key exchange.  The application should return
    882           * EMBER_SUCCESS to accept the request or any other status to reject it.  On
    883           * network coprocessor platforms, this function will not be called because the
    884           * NCP handles partner link key exchange requests based on the binding policy.
    885           *
    886           * @param partner The EUI of the remote node.  Ver.: always
    887           */

   \                                 In section .text, align 2, keep-with-next
    888          EmberStatus emberAfPartnerLinkKeyExchangeRequestCallback(EmberEUI64 partner)
    889          {
    890            return EMBER_LIBRARY_NOT_PRESENT;
   \                     emberAfPartnerLinkKeyExchangeRequestCallback: (+1)
   \   00000000   0x20B5             MOVS     R0,#+181
   \   00000002   0x4770             BX       LR               ;; return
    891          }
    892          
    893          /** @brief Partner Link Key Exchange Response
    894           *
    895           * This function is called by the framework when a remote node requests a
    896           * partner link key exchange.  The application should return TRUE to accept the
    897           * request or FALSE to reject it.  On network coprocessor platforms, this
    898           * function will not be called because the NCP handles partner link key exchange
    899           * requests based on the binding policy.
    900           *
    901           * @param sender The EUI of the remote node.  Ver.: always
    902           * @param status The ZDO response status.  Ver.: always
    903           */

   \                                 In section .text, align 2, keep-with-next
    904          void emberAfPartnerLinkKeyExchangeResponseCallback(EmberNodeId sender,
    905                                                             EmberZdoStatus status)
    906          {
    907          }
   \                     emberAfPartnerLinkKeyExchangeResponseCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    908          
    909          /** @brief Performing Key Establishment
    910           *
    911           * This function is called by the framework to determine if the device is
    912           * performing key establishment.  The application should return TRUE if key
    913           * establishment is in progress.
    914           *
    915           */

   \                                 In section .text, align 2, keep-with-next
    916          boolean emberAfPerformingKeyEstablishmentCallback(void)
    917          {
    918            return FALSE;
   \                     emberAfPerformingKeyEstablishmentCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    919          }
    920          
    921          /** @brief Data Error
    922           *
    923           * This function is called by the Tunneling server plugin whenever a data error
    924           * occurs on a tunnel.  Errors occur if a device attempts to send data on tunnel
    925           * that is no longer active or if the tunneling does not belong to the device.
    926           *
    927           * @param tunnelId The identifier of the tunnel on which this data error
    928           * occurred.  Ver.: always
    929           * @param transferDataStatus The error that occurred.  Ver.: always
    930           */

   \                                 In section .text, align 2, keep-with-next
    931          void emberAfPluginAuroraTunnelingServerDataErrorCallback(int16u tunnelId,
    932                                                                   EmberAfTunnelingTransferDataStatus transferDataStatus)
    933          {
    934          }
   \                     emberAfPluginAuroraTunnelingServerDataErrorCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    935          
    936          /** @brief Broadcast Sent
    937           *
    938           * This function is called when a new MTORR broadcast has been successfully sent
    939           * by the concentrator plugin.
    940           *
    941           */

   \                                 In section .text, align 2, keep-with-next
    942          void emberAfPluginConcentratorBroadcastSentCallback(void)
    943          {
    944          }
   \                     emberAfPluginConcentratorBroadcastSentCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    945          
    946          /** @brief Rollover
    947           *
    948           * This function is called every time a counter exceeds its threshold.
    949           *
    950           * @param type The counter that rolled over  Ver.: always
    951           */

   \                                 In section .text, align 2, keep-with-next
    952          void emberAfPluginCountersRolloverCallback(EmberCounterType type)
    953          {
    954          }
   \                     emberAfPluginCountersRolloverCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    955          
    956          /** @brief Client Complete
    957           *
    958           * This function is called by the EZ-Mode Commissioning plugin when client
    959           * commissioning completes.
    960           *
    961           * @param bindingIndex The binding index that was created or
    962           * ::EMBER_NULL_BINDING if an error occurred.  Ver.: always
    963           */

   \                                 In section .text, align 2, keep-with-next
    964          void emberAfPluginEzmodeCommissioningClientCompleteCallback(int8u bindingIndex)
    965          {
    966          }
   \                     emberAfPluginEzmodeCommissioningClientCompleteCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    967          
    968          /** @brief Get Group Name
    969           *
    970           * This function returns the name of a group with the provided group ID, should
    971           * it exist.
    972           *
    973           * @param endpoint Endpoint  Ver.: always
    974           * @param groupId Group ID  Ver.: always
    975           * @param groupName Group Name  Ver.: always
    976           */

   \                                 In section .text, align 2, keep-with-next
    977          void emberAfPluginGroupsServerGetGroupNameCallback(int8u endpoint,
    978                                                             int16u groupId,
    979                                                             int8u *groupName)
    980          {
    981          }
   \                     emberAfPluginGroupsServerGetGroupNameCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    982          
    983          /** @brief Group Names Supported
    984           *
    985           * This function returns whether or not group names are supported.
    986           *
    987           * @param endpoint Endpoint  Ver.: always
    988           */

   \                                 In section .text, align 2, keep-with-next
    989          boolean emberAfPluginGroupsServerGroupNamesSupportedCallback(int8u endpoint)
    990          {
    991            return FALSE;
   \                     emberAfPluginGroupsServerGroupNamesSupportedCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    992          }
    993          
    994          /** @brief Set Group Name
    995           *
    996           * This function sets the name of a group with the provided group ID.
    997           *
    998           * @param endpoint Endpoint  Ver.: always
    999           * @param groupId Group ID  Ver.: always
   1000           * @param groupName Group Name  Ver.: always
   1001           */

   \                                 In section .text, align 2, keep-with-next
   1002          void emberAfPluginGroupsServerSetGroupNameCallback(int8u endpoint,
   1003                                                             int16u groupId,
   1004                                                             int8u *groupName)
   1005          {
   1006          }
   \                     emberAfPluginGroupsServerSetGroupNameCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1007          
   1008          /** @brief Start Feedback
   1009           *
   1010           * This function is called by the Identify plugin when identification begins. It
   1011           * informs the Identify Feedback plugin that it should begin providing its
   1012           * implemented feedback functionality (e.g. LED blinking, buzzer sounding, etc.)
   1013           * until the Identify plugin tells it to stop. The identify time is purely a
   1014           * matter of informational convenience; this plugin does not need to know how
   1015           * long it will identify (the Identify plugin will perform the necessary
   1016           * timekeeping.)
   1017           *
   1018           * @param endpoint The identifying endpoint  Ver.: always
   1019           * @param identifyTime The identify time  Ver.: always
   1020           */

   \                                 In section .text, align 2, keep-with-next
   1021          void emberAfPluginIdentifyStartFeedbackCallback(int8u endpoint,
   1022                                                          int16u identifyTime)
   1023          {
   1024          }
   \                     emberAfPluginIdentifyStartFeedbackCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1025          
   1026          /** @brief Stop Feedback
   1027           *
   1028           * This function is called by the Identify plugin when identification is
   1029           * finished. It tells the Identify Feedback plugin to stop providing its
   1030           * implemented feedback functionality.
   1031           *
   1032           * @param endpoint The identifying endpoint  Ver.: always
   1033           */

   \                                 In section .text, align 2, keep-with-next
   1034          void emberAfPluginIdentifyStopFeedbackCallback(int8u endpoint)
   1035          {
   1036          }
   \                     emberAfPluginIdentifyStopFeedbackCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1037          
   1038          /** @brief Active
   1039           *
   1040           * This function is called by the Idle/Sleep plugin after idling.
   1041           *
   1042           */

   \                                 In section .text, align 2, keep-with-next
   1043          void emberAfPluginIdleSleepActiveCallback(void)
   1044          {
   1045          }
   \                     emberAfPluginIdleSleepActiveCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1046          
   1047          /** @brief Ok To Idle
   1048           *
   1049           * This function is called by the Idle/Sleep plugin before idling.  The
   1050           * application should return TRUE if the device may idle or FALSE otherwise.
   1051           *
   1052           */

   \                                 In section .text, align 2, keep-with-next
   1053          boolean emberAfPluginIdleSleepOkToIdleCallback(void)
   1054          {
   1055            return TRUE;
   \                     emberAfPluginIdleSleepOkToIdleCallback: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x4770             BX       LR               ;; return
   1056          }
   1057          
   1058          /** @brief Ok To Sleep
   1059           *
   1060           * This function is called by the Idle/Sleep plugin before sleeping.  The
   1061           * application should return TRUE if the device may sleep or FALSE otherwise.
   1062           *
   1063           * @param durationMs The maximum duration in milliseconds that the device will
   1064           * sleep.  Ver.: always
   1065           */

   \                                 In section .text, align 2, keep-with-next
   1066          boolean emberAfPluginIdleSleepOkToSleepCallback(int32u durationMs)
   1067          {
   1068            return TRUE;
   \                     emberAfPluginIdleSleepOkToSleepCallback: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x4770             BX       LR               ;; return
   1069          }
   1070          
   1071          /** @brief Wake Up
   1072           *
   1073           * This function is called by the Idle/Sleep plugin after sleeping.
   1074           *
   1075           * @param durationMs The duration in milliseconds that the device slept.  Ver.:
   1076           * always
   1077           */

   \                                 In section .text, align 2, keep-with-next
   1078          void emberAfPluginIdleSleepWakeUpCallback(int32u durationMs)
   1079          {
   1080          }
   \                     emberAfPluginIdleSleepWakeUpCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1081          
   1082          /** @brief Get Radio Power For Channel
   1083           *
   1084           * This callback is called by the framework when it is setting the radio power
   1085           * during the discovery process. The framework will set the radio power
   1086           * depending on what is returned by this callback.
   1087           *
   1088           * @param channel   Ver.: always
   1089           */

   \                                 In section .text, align 2, keep-with-next
   1090          int8s emberAfPluginNetworkFindGetRadioPowerForChannelCallback(int8u channel)
   1091          {
   1092            return EMBER_AF_PLUGIN_NETWORK_FIND_RADIO_TX_POWER;
   \                     emberAfPluginNetworkFindGetRadioPowerForChannelCallback: (+1)
   \   00000000   0x2008             MOVS     R0,#+8
   \   00000002   0x4770             BX       LR               ;; return
   1093          }
   1094          
   1095          /** @brief Join
   1096           *
   1097           * This callback is called by the plugin when a joinable network has been found.
   1098           *  If the application returns TRUE, the plugin will attempt to join the
   1099           * network.  Otherwise, the plugin will ignore the network and continue
   1100           * searching.  Applications can use this callback to implement a network
   1101           * blacklist.
   1102           *
   1103           * @param networkFound   Ver.: always
   1104           * @param lqi   Ver.: always
   1105           * @param rssi   Ver.: always
   1106           */

   \                                 In section .text, align 2, keep-with-next
   1107          boolean emberAfPluginNetworkFindJoinCallback(EmberZigbeeNetwork *networkFound,
   1108                                                       int8u lqi,
   1109                                                       int8s rssi)
   1110          {
   1111            return TRUE;
   \                     emberAfPluginNetworkFindJoinCallback: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x4770             BX       LR               ;; return
   1112          }
   1113          
   1114          /** @brief Configured
   1115           *
   1116           * This callback is called by the Reporting plugin whenever a reporting entry is
   1117           * configured, including when entries are deleted or updated.  The application
   1118           * can use this callback for scheduling readings or measurements based on the
   1119           * minimum and maximum reporting interval for the entry.  The application should
   1120           * return EMBER_ZCL_STATUS_SUCCESS if it can support the configuration or an
   1121           * error status otherwise.  Note: attribute reporting is required for many
   1122           * clusters and attributes, so rejecting a reporting configuration may violate
   1123           * ZigBee specifications.
   1124           *
   1125           * @param entry   Ver.: always
   1126           */

   \                                 In section .text, align 2, keep-with-next
   1127          EmberAfStatus emberAfPluginReportingConfiguredCallback(const EmberAfPluginReportingEntry *entry)
   1128          {
   1129            return EMBER_ZCL_STATUS_SUCCESS;
   \                     emberAfPluginReportingConfiguredCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
   1130          }
   1131          
   1132          /** @brief Post Attribute Change
   1133           *
   1134           * This function is called by the application framework after it changes an
   1135           * attribute value. The value passed into this callback is the value to which
   1136           * the attribute was set by the framework.
   1137           *
   1138           * @param endpoint   Ver.: always
   1139           * @param clusterId   Ver.: always
   1140           * @param attributeId   Ver.: always
   1141           * @param mask   Ver.: always
   1142           * @param manufacturerCode   Ver.: always
   1143           * @param type   Ver.: always
   1144           * @param size   Ver.: always
   1145           * @param value   Ver.: always
   1146           */

   \                                 In section .text, align 2, keep-with-next
   1147          void emberAfPostAttributeChangeCallback(int8u endpoint,
   1148                                                  EmberAfClusterId clusterId,
   1149                                                  EmberAfAttributeId attributeId,
   1150                                                  int8u mask,
   1151                                                  int16u manufacturerCode,
   1152                                                  int8u type,
   1153                                                  int8u size,
   1154                                                  int8u* value)
   1155          {
   1156          }
   \                     emberAfPostAttributeChangeCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1157          
   1158          /** @brief Post Wake Up
   1159           *
   1160           * @deprecated This callback has been deprecated and will be removed in a future
   1161           * release.  Customers should use the new ::emberAfPluginIdleSleepWakeUpCallback
   1162           * instead.
   1163           *
   1164           * @param sleepDuration   Ver.: always
   1165           */

   \                                 In section .text, align 2, keep-with-next
   1166          void emberAfPostWakeUpCallback(int32u sleepDuration)
   1167          {
   1168          }
   \                     emberAfPostWakeUpCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1169          
   1170          /** @brief Pre Attribute Change
   1171           *
   1172           * This function is called by the application framework before it changes an
   1173           * attribute value. The value passed into this callback is the value to which
   1174           * the attribute is to be set by the framework.
   1175           *
   1176           * @param endpoint   Ver.: always
   1177           * @param clusterId   Ver.: always
   1178           * @param attributeId   Ver.: always
   1179           * @param mask   Ver.: always
   1180           * @param manufacturerCode   Ver.: always
   1181           * @param type   Ver.: always
   1182           * @param size   Ver.: always
   1183           * @param value   Ver.: always
   1184           */

   \                                 In section .text, align 2, keep-with-next
   1185          void emberAfPreAttributeChangeCallback(int8u endpoint,
   1186                                                 EmberAfClusterId clusterId,
   1187                                                 EmberAfAttributeId attributeId,
   1188                                                 int8u mask,
   1189                                                 int16u manufacturerCode,
   1190                                                 int8u type,
   1191                                                 int8u size,
   1192                                                 int8u* value)
   1193          {
   1194          }
   \                     emberAfPreAttributeChangeCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1195          
   1196          /** @brief Pre Command Received
   1197           *
   1198           * This callback is the second in the Application Framework's message processing
   1199           * chain. At this point in the processing of incoming over-the-air messages, the
   1200           * application has determined that the incoming message is a ZCL command. It
   1201           * parses enough of the message to populate an EmberAfClusterCommand struct. The
   1202           * Application Framework defines this struct value in a local scope to the
   1203           * command processing but also makes it available through a global pointer
   1204           * called emberAfCurrentCommand, in app/framework/util/util.c. When command
   1205           * processing is complete, this pointer is cleared.
   1206           *
   1207           * @param cmd   Ver.: always
   1208           */

   \                                 In section .text, align 2, keep-with-next
   1209          boolean emberAfPreCommandReceivedCallback(EmberAfClusterCommand* cmd)
   1210          {
   1211            return FALSE;
   \                     emberAfPreCommandReceivedCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
   1212          }
   1213          
   1214          /** @brief Pre Go To Sleep
   1215           *
   1216           * @deprecated This callback has been deprecated and will be removed in a future
   1217           * release.  Customers should use the new
   1218           * ::emberAfPluginIdleSleepOkToSleepCallback instead.  The application will only
   1219           * deep sleep if this callback returns FALSE.
   1220           *
   1221           * @param sleepDurationAttempt   Ver.: always
   1222           */

   \                                 In section .text, align 2, keep-with-next
   1223          boolean emberAfPreGoToSleepCallback(int32u sleepDurationAttempt)
   1224          {
   1225            return FALSE;
   \                     emberAfPreGoToSleepCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
   1226          }
   1227          
   1228          /** @brief Pre Message Received
   1229           *
   1230           * This callback is the first in the Application Framework's message processing
   1231           * chain. The Application Framework calls it when a message has been received
   1232           * over the air but has not yet been parsed by the ZCL command-handling code. If
   1233           * you wish to parse some messages that are completely outside the ZCL
   1234           * specification or are not handled by the Application Framework's command
   1235           * handling code, you should intercept them for parsing in this callback. 
   1236               
   1237           *   This callback returns a Boolean value indicating whether or not the message
   1238           * has been handled. If the callback returns a value of TRUE, then the
   1239           * Application Framework assumes that the message has been handled and it does
   1240           * nothing else with it. If the callback returns a value of FALSE, then the
   1241           * application framework continues to process the message as it would with any
   1242           * incoming message.
   1243                  Note: 	This callback receives a pointer to an
   1244           * incoming message struct. This struct allows the application framework to
   1245           * provide a unified interface between both Host devices, which receive their
   1246           * message through the ezspIncomingMessageHandler, and SoC devices, which
   1247           * receive their message through emberIncomingMessageHandler.
   1248           *
   1249           * @param incomingMessage   Ver.: always
   1250           */

   \                                 In section .text, align 2, keep-with-next
   1251          boolean emberAfPreMessageReceivedCallback(EmberAfIncomingMessage* incomingMessage)
   1252          {
   1253            return FALSE;
   \                     emberAfPreMessageReceivedCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
   1254          }
   1255          
   1256          /** @brief Pre Ncp Reset
   1257           *
   1258           * This function will be called prior to the reset of the NCP by the host.
   1259           *
   1260           */

   \                                 In section .text, align 2, keep-with-next
   1261          void emberAfPreNcpResetCallback(void)
   1262          {
   1263          }
   \                     emberAfPreNcpResetCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1264          
   1265          /** @brief Pre ZDO Message Received
   1266           *
   1267           * This function passes the application an incoming ZDO message and gives the
   1268           * appictation the opportunity to handle it. By default, this callback returns
   1269           * FALSE indicating that the incoming ZDO message has not been handled and
   1270           * should be handled by the Application Framework.
   1271           *
   1272           * @param emberNodeId   Ver.: always
   1273           * @param apsFrame   Ver.: always
   1274           * @param message   Ver.: always
   1275           * @param length   Ver.: always
   1276           */

   \                                 In section .text, align 2, keep-with-next
   1277          boolean emberAfPreZDOMessageReceivedCallback(EmberNodeId emberNodeId,
   1278                                                       EmberApsFrame* apsFrame,
   1279                                                       int8u* message,
   1280                                                       int16u length)
   1281          {
   1282            return FALSE;
   \                     emberAfPreZDOMessageReceivedCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
   1283          }
   1284          
   1285          /** @brief Read Attributes Response
   1286           *
   1287           * This function is called by the application framework when a Read Attributes
   1288           * Response command is received from an external device.  The application should
   1289           * return TRUE if the message was processed or FALSE if it was not.
   1290           *
   1291           * @param clusterId The cluster identifier of this response.  Ver.: always
   1292           * @param buffer Buffer containing the list of read attribute status records. 
   1293           * Ver.: always
   1294           * @param bufLen The length in bytes of the list.  Ver.: always
   1295           */

   \                                 In section .text, align 2, keep-with-next
   1296          boolean emberAfReadAttributesResponseCallback(EmberAfClusterId clusterId,
   1297                                                        int8u *buffer,
   1298                                                        int16u bufLen)
   1299          {
   1300            return FALSE;
   \                     emberAfReadAttributesResponseCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
   1301          }
   1302          
   1303          /** @brief Read Reporting Configuration Response
   1304           *
   1305           * This function is called by the application framework when a Read Reporting
   1306           * Configuration Response command is received from an external device.  The
   1307           * application should return TRUE if the message was processed or FALSE if it
   1308           * was not.
   1309           *
   1310           * @param clusterId The cluster identifier of this response.  Ver.: always
   1311           * @param buffer Buffer containing the list of attribute reporting configuration
   1312           * records.  Ver.: always
   1313           * @param bufLen The length in bytes of the list.  Ver.: always
   1314           */

   \                                 In section .text, align 2, keep-with-next
   1315          boolean emberAfReadReportingConfigurationResponseCallback(EmberAfClusterId clusterId,
   1316                                                                    int8u *buffer,
   1317                                                                    int16u bufLen)
   1318          {
   1319            return FALSE;
   \                     emberAfReadReportingConfigurationResponseCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
   1320          }
   1321          
   1322          /** @brief Registration Abort
   1323           *
   1324           * This callback is called when the device should abort the registration
   1325           * process.
   1326           *
   1327           */

   \                                 In section .text, align 2, keep-with-next
   1328          void emberAfRegistrationAbortCallback(void)
   1329          {
   1330          }
   \                     emberAfRegistrationAbortCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1331          
   1332          /** @brief Registration
   1333           *
   1334           * This callback is called when the device joins a network and the process of
   1335           * registration is complete. This callback provides a success value of TRUE if
   1336           * the registration process was successful and a value of FALSE if registration
   1337           * failed.
   1338           *
   1339           * @param success TRUE if registration succeeded, FALSE otherwise.  Ver.: always
   1340           */

   \                                 In section .text, align 2, keep-with-next
   1341          void emberAfRegistrationCallback(boolean success)
   1342          {
   1343          }
   \                     emberAfRegistrationCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1344          
   1345          /** @brief Registration Start
   1346           *
   1347           * This callback is called when the device joins a network and the registration
   1348           * process should begin.  The application should return EMBER_SUCCESS if the
   1349           * registration process started successfully.  When registration is complete,
   1350           * the application should call emberAfRegistrationCallback with an indication of
   1351           * success or failure.
   1352           *
   1353           */

   \                                 In section .text, align 2, keep-with-next
   1354          EmberStatus emberAfRegistrationStartCallback(void)
   1355          {
   1356            return EMBER_LIBRARY_NOT_PRESENT;
   \                     emberAfRegistrationStartCallback: (+1)
   \   00000000   0x20B5             MOVS     R0,#+181
   \   00000002   0x4770             BX       LR               ;; return
   1357          }
   1358          
   1359          /** @brief Remote Delete Binding Permission
   1360           *
   1361           * This function is called by the framework to request permission to service the
   1362           * remote delete binding request. Return EMBER_SUCCESS to allow request,
   1363           * anything else to disallow request.
   1364           *
   1365           * @param index index to an Ember binding table entry  Ver.: always
   1366           */

   \                                 In section .text, align 2, keep-with-next
   1367          EmberStatus emberAfRemoteDeleteBindingPermissionCallback(int8u index)
   1368          {
   1369            return EMBER_SUCCESS; // default
   \                     emberAfRemoteDeleteBindingPermissionCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
   1370          }
   1371          
   1372          /** @brief Remote Set Binding Permission
   1373           *
   1374           * This function is called by the framework to request permission to service the
   1375           * remote set binding request. Return EMBER_SUCCESS to allow request, anything
   1376           * else to disallow request.
   1377           *
   1378           * @param entry Ember Binding Tablet Entry  Ver.: always
   1379           */

   \                                 In section .text, align 2, keep-with-next
   1380          EmberStatus emberAfRemoteSetBindingPermissionCallback(const EmberBindingTableEntry *entry)
   1381          {
   1382            return EMBER_SUCCESS; // default
   \                     emberAfRemoteSetBindingPermissionCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
   1383          }
   1384          
   1385          /** @brief Remove From Current App Tasks
   1386           *
   1387           * This function is only useful to sleepy end devices.  This function will
   1388           * remove the passed item from the set of tasks the application has outstanding
   1389           * (e.g. message sent requiring APS acknwoledgement).  This will affect how the
   1390           * application behaves with regard to sleeping and polling.  Removing the item
   1391           * from the list of outstanding tasks may allow the device to sleep longer and
   1392           * poll less frequently.  If there are other outstanding tasks the system may
   1393           * still have to stay away and poll more often.
   1394           *
   1395           * @param tasks   Ver.: always
   1396           */

   \                                 In section .text, align 2, keep-with-next
   1397          void emberAfRemoveFromCurrentAppTasksCallback(EmberAfApplicationTask tasks)
   1398          {
   1399          }
   \                     emberAfRemoveFromCurrentAppTasksCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1400          
   1401          /** @brief Report Attributes
   1402           *
   1403           * This function is called by the application framework when a Report Attributes
   1404           * command is received from an external device.  The application should return
   1405           * TRUE if the message was processed or FALSE if it was not.
   1406           *
   1407           * @param clusterId The cluster identifier of this command.  Ver.: always
   1408           * @param buffer Buffer containing the list of attribute report records.  Ver.:
   1409           * always
   1410           * @param bufLen The length in bytes of the list.  Ver.: always
   1411           */

   \                                 In section .text, align 2, keep-with-next
   1412          boolean emberAfReportAttributesCallback(EmberAfClusterId clusterId,
   1413                                                  int8u *buffer,
   1414                                                  int16u bufLen)
   1415          {
   1416            return FALSE;
   \                     emberAfReportAttributesCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
   1417          }
   1418          
   1419          /** @brief Schedule Poll Event
   1420           *
   1421           * This is called by the framework when it wants to schedule a poll event if the
   1422           * device is a ZigBee End Device (sleepy or non-sleepy).
   1423           *
   1424           */

   \                                 In section .text, align 2, keep-with-next
   1425          void emberAfSchedulePollEventCallback(void)
   1426          {
   1427          }
   \                     emberAfSchedulePollEventCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1428          
   1429          /** @brief Security Init
   1430           *
   1431           * This callback is called by the framework to give the application a chance to
   1432           * modify the security settings of the node during network initialization. 
   1433           * Depending on the context when this callback is called, the pointer to the
   1434           * initial security state may be NULL, which means the initial security state
   1435           * can no longer be modified as the node is already operating on the network.
   1436           *
   1437           * @param state   Ver.: always
   1438           * @param extended   Ver.: always
   1439           * @param trustCenter   Ver.: always
   1440           */

   \                                 In section .text, align 2, keep-with-next
   1441          void emberAfSecurityInitCallback(EmberInitialSecurityState *state,
   1442                                           EmberExtendedSecurityBitmask *extended,
   1443                                           boolean trustCenter)
   1444          {
   1445          }
   \                     emberAfSecurityInitCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1446          
   1447          /** @brief Key establishment Cluster Server Command Received
   1448           *
   1449           * This function is called by the application framework when a client-to-server
   1450           * key establishment command is received but has yet to be handled by the
   1451           * framework code.  This function should return a boolean value indicating
   1452           * whether the command has been handled by the application code and should not
   1453           * be further processed by the framework.
   1454           *
   1455           * @param cmd   Ver.: always
   1456           */

   \                                 In section .text, align 2, keep-with-next
   1457          boolean emberAfKeyEstablishmentClusterServerCommandReceivedCallback(EmberAfClusterCommand *cmd)
   1458          {
   1459            return FALSE;
   \                     emberAfKeyEstablishmentClusterServerCommandReceivedCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
   1460          }
   1461          
   1462          /** @brief Set Default Poll Control
   1463           *
   1464           * This function will set the default poll control for the current network to
   1465           * control whether or not it can long poll.
   1466           *
   1467           * @param control   Ver.: always
   1468           */

   \                                 In section .text, align 2, keep-with-next
   1469          void emberAfSetDefaultPollControlCallback(EmberAfEventPollControl control)
   1470          {
   1471          }
   \                     emberAfSetDefaultPollControlCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1472          
   1473          /** @brief Set Long Poll Interval Ms
   1474           *
   1475           * This function is only useful to end devices.  This function will set the long
   1476           * poll interval (in milliseconds) for the current network.  This interval is
   1477           * the maximum amount of time a child will wait between polls of its parent when
   1478           * it is not expecting data.
   1479           *
   1480           * @param longPollIntervalMs   Ver.: always
   1481           */

   \                                 In section .text, align 2, keep-with-next
   1482          void emberAfSetLongPollIntervalMsCallback(int32u longPollIntervalMs)
   1483          {
   1484          }
   \                     emberAfSetLongPollIntervalMsCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1485          
   1486          /** @brief Set Long Poll Interval Qs
   1487           *
   1488           * This function is only useful to end devices.  This function will set the long
   1489           * poll interval (in quarter seconds) for the current network.  This interval is
   1490           * the maximum amount of time a child will wait between polls of its parent when
   1491           * it is not expecting data.
   1492           *
   1493           * @param longPollIntervalQs   Ver.: always
   1494           */

   \                                 In section .text, align 2, keep-with-next
   1495          void emberAfSetLongPollIntervalQsCallback(int32u longPollIntervalQs)
   1496          {
   1497          }
   \                     emberAfSetLongPollIntervalQsCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1498          
   1499          /** @brief Set Short Poll Interval Ms
   1500           *
   1501           * This function is only useful to sleepy end devices.  This function will set
   1502           * the short poll interval (in milliseconds) for the current network.  This
   1503           * interval is the maximum amount of time a child will wait between polls of its
   1504           * parent when it is expecting data.
   1505           *
   1506           * @param shortPollIntervalMs   Ver.: always
   1507           */

   \                                 In section .text, align 2, keep-with-next
   1508          void emberAfSetShortPollIntervalMsCallback(int16u shortPollIntervalMs)
   1509          {
   1510          }
   \                     emberAfSetShortPollIntervalMsCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1511          
   1512          /** @brief Set Short Poll Interval Qs
   1513           *
   1514           * This function is only useful to sleepy end devices.  This function will set
   1515           * the short poll interval (in quarter seconds) for the current network.  This
   1516           * interval is the maximum amount of time a child will wait between polls of its
   1517           * parent when it is expecting data.
   1518           *
   1519           * @param shortPollIntervalQs   Ver.: always
   1520           */

   \                                 In section .text, align 2, keep-with-next
   1521          void emberAfSetShortPollIntervalQsCallback(int16u shortPollIntervalQs)
   1522          {
   1523          }
   \                     emberAfSetShortPollIntervalQsCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1524          
   1525          /** @brief Set Time
   1526           *
   1527           * This callback should be implemented, if the device has access to real time
   1528           * clock, and has an ability to update that clock. The application framework
   1529           * expects to be passed the utcTime which is the number of seconds since the
   1530           * year 2000. Default implementation does nothing. Note: This function used to
   1531           * take time in year, month, day, hour, min, sec. We have changed this to
   1532           * utcTime in order to conserve code space.
   1533           *
   1534           * @param utcTime   Ver.: always
   1535           */

   \                                 In section .text, align 2, keep-with-next
   1536          void emberAfSetTimeCallback(int32u utcTime)
   1537          {
   1538          }
   \                     emberAfSetTimeCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1539          
   1540          /** @brief Set Wake Timeout Bitmask
   1541           *
   1542           * This function is only useful to sleepy end devices.  This function will set
   1543           * the wake timeout bitmask for the current network.  The bitmask determines
   1544           * which tasks will timeout automatically and which tasks require manual removal
   1545           * from the task list.
   1546           *
   1547           * @param tasks   Ver.: always
   1548           */

   \                                 In section .text, align 2, keep-with-next
   1549          void emberAfSetWakeTimeoutBitmaskCallback(EmberAfApplicationTask tasks)
   1550          {
   1551          }
   \                     emberAfSetWakeTimeoutBitmaskCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1552          
   1553          /** @brief Set Wake Timeout Ms
   1554           *
   1555           * This function is only useful to sleepy end devices.  This function will set
   1556           * the wake timeout (in milliseconds) for the current network.  This timeout is
   1557           * the maximum amount of time a child will wait for a task in the wake bitmask
   1558           * to finish.  While waiting, the device will short poll.
   1559           *
   1560           * @param wakeTimeoutMs   Ver.: always
   1561           */

   \                                 In section .text, align 2, keep-with-next
   1562          void emberAfSetWakeTimeoutMsCallback(int16u wakeTimeoutMs)
   1563          {
   1564          }
   \                     emberAfSetWakeTimeoutMsCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1565          
   1566          /** @brief Set Wake Timeout Qs
   1567           *
   1568           * This function is only useful to sleepy end devices.  This function will set
   1569           * the wake timeout (in quarter seconds) for the current network.  This timeout
   1570           * is the maximum amount of time a child will wait for a task in the wake
   1571           * bitmask to finish.  While waiting, the device will short poll.
   1572           *
   1573           * @param wakeTimeoutQs   Ver.: always
   1574           */

   \                                 In section .text, align 2, keep-with-next
   1575          void emberAfSetWakeTimeoutQsCallback(int16u wakeTimeoutQs)
   1576          {
   1577          }
   \                     emberAfSetWakeTimeoutQsCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1578          
   1579          /** @brief Start Move
   1580           *
   1581           * This function is called to initiate the process for a device to move (rejoin)
   1582           * to a new parent.
   1583           *
   1584           */

   \                                 In section .text, align 2, keep-with-next
   1585          boolean emberAfStartMoveCallback(void)
   1586          {
   1587            return FALSE;
   \                     emberAfStartMoveCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
   1588          }
   1589          
   1590          /** @brief Stop Move
   1591           *
   1592           * This function is called to cancel a previously scheduled move (rejoin) to a
   1593           * new parent.
   1594           *
   1595           */

   \                                 In section .text, align 2, keep-with-next
   1596          void emberAfStopMoveCallback(void)
   1597          {
   1598          }
   \                     emberAfStopMoveCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1599          
   1600          /** @brief Trust Center Join
   1601           *
   1602           * This callback is called from within the application framework's
   1603           * implementation of emberTrustCenterJoinHandler or ezspTrustCenterJoinHandler.
   1604           * This callback provides the same arguments passed to the
   1605           * TrustCenterJoinHandler. For more information about the TrustCenterJoinHandler
   1606           * please see documentation included in stack/include/trust-center.h.
   1607           *
   1608           * @param newNodeId   Ver.: always
   1609           * @param newNodeEui64   Ver.: always
   1610           * @param parentOfNewNode   Ver.: always
   1611           * @param status   Ver.: always
   1612           * @param decision   Ver.: always
   1613           */

   \                                 In section .text, align 2, keep-with-next
   1614          void emberAfTrustCenterJoinCallback(EmberNodeId newNodeId,
   1615                                              EmberEUI64 newNodeEui64,
   1616                                              EmberNodeId parentOfNewNode,
   1617                                              EmberDeviceUpdate status,
   1618                                              EmberJoinDecision decision)
   1619          {
   1620          }
   \                     emberAfTrustCenterJoinCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1621          
   1622          /** @brief Trust Center Keepalive Abort
   1623           *
   1624           * This callback is called when the device should abort the trust center
   1625           * keepalive process.
   1626           *
   1627           */

   \                                 In section .text, align 2, keep-with-next
   1628          void emberAfTrustCenterKeepaliveAbortCallback(void)
   1629          {
   1630          }
   \                     emberAfTrustCenterKeepaliveAbortCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1631          
   1632          /** @brief Trust Center Keepalive Update
   1633           *
   1634           * This callback is called when the device finishes registration (successfully
   1635           * or otherwise) and the trust center keepalive process must be updated.  If the
   1636           * keepalive process has not been started, then it is started.  Otherwise if the
   1637           * keepalive is in the process of searching for the TC, it will process the
   1638           * result of that Trust Center search operation.
   1639           *
   1640           * @param registrationComplete   Ver.: always
   1641           */

   \                                 In section .text, align 2, keep-with-next
   1642          void emberAfTrustCenterKeepaliveUpdateCallback(boolean registrationComplete)
   1643          {
   1644          }
   \                     emberAfTrustCenterKeepaliveUpdateCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1645          
   1646          /** @brief Write Attributes Response
   1647           *
   1648           * This function is called by the application framework when a Write Attributes
   1649           * Response command is received from an external device.  The application should
   1650           * return TRUE if the message was processed or FALSE if it was not.
   1651           *
   1652           * @param clusterId The cluster identifier of this response.  Ver.: always
   1653           * @param buffer Buffer containing the list of write attribute status records. 
   1654           * Ver.: always
   1655           * @param bufLen The length in bytes of the list.  Ver.: always
   1656           */

   \                                 In section .text, align 2, keep-with-next
   1657          boolean emberAfWriteAttributesResponseCallback(EmberAfClusterId clusterId,
   1658                                                         int8u *buffer,
   1659                                                         int16u bufLen)
   1660          {
   1661            return FALSE;
   \                     emberAfWriteAttributesResponseCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
   1662          }

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x63 0x61          DC8 "callback-stub.c"
   \              0x6C 0x6C    
   \              0x62 0x61    
   \              0x63 0x6B    
   \              0x2D 0x73    
   \              0x74 0x75    
   \              0x62 0x2E    
   \              0x63 0x00    

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   emberAfAddToCurrentAppTasksCallback
       0   emberAfAllowNetworkWriteAttributeCallback
       0   emberAfClusterInitCallback
       0   emberAfClusterSecurityCustomCallback
       0   emberAfConfigureReportingResponseCallback
       0   emberAfDefaultResponseCallback
       0   emberAfDeliveryStatusCallback
       0   emberAfDiscoverAttributesResponseCallback
       0   emberAfDiscoverCommandsGeneratedResponseCallback
       0   emberAfDiscoverCommandsReceivedResponseCallback
       0   emberAfExternalAttributeReadCallback
       0   emberAfExternalAttributeWriteCallback
       0   emberAfGetCurrentAppTasksCallback
       0   emberAfGetCurrentPollControlCallback
       0   emberAfGetCurrentPollIntervalMsCallback
       0   emberAfGetCurrentPollIntervalQsCallback
       0   emberAfGetCurrentTimeCallback
       0   emberAfGetDefaultPollControlCallback
       0   emberAfGetLongPollIntervalMsCallback
       0   emberAfGetLongPollIntervalQsCallback
       0   emberAfGetShortPollIntervalMsCallback
       0   emberAfGetShortPollIntervalQsCallback
       0   emberAfGetWakeTimeoutBitmaskCallback
       0   emberAfGetWakeTimeoutMsCallback
       0   emberAfGetWakeTimeoutQsCallback
       0   emberAfInitiateInterPanKeyEstablishmentCallback
       0   emberAfInitiateKeyEstablishmentCallback
       0   emberAfInitiatePartnerLinkKeyExchangeCallback
       0   emberAfInterPanKeyEstablishmentCallback
       0   emberAfInterpanSendMessageCallback
       0   emberAfKeyEstablishmentCallback
       0   emberAfKeyEstablishmentClusterClientCommandReceivedCallback
       0   emberAfKeyEstablishmentClusterServerCommandReceivedCallback
       0   emberAfMessageSentCallback
       0   emberAfNcpInitCallback
       0   emberAfNetworkKeyUpdateCompleteCallback
       0   emberAfOtaPageRequestServerPolicyCallback
      24   emberAfOtaServerBlockSizeCallback
        24   -> emberAfIsCurrentSecurityProfileSmartEnergy
        24   -> emberAfMaximumApsPayloadLength
       0   emberAfOtaServerImageBlockRequestCallback
       0   emberAfOtaServerIncomingMessageRawCallback
       0   emberAfOtaServerQueryCallback
       0   emberAfOtaServerSendImageNotifyCallback
       0   emberAfOtaServerUpgradeEndRequestCallback
       0   emberAfOtaStorageCloseCallback
         0   -> halInternalAssertFailed
       0   emberAfPartnerLinkKeyExchangeRequestCallback
       0   emberAfPartnerLinkKeyExchangeResponseCallback
       0   emberAfPerformingKeyEstablishmentCallback
       0   emberAfPluginAuroraTunnelingServerDataErrorCallback
       0   emberAfPluginConcentratorBroadcastSentCallback
       0   emberAfPluginCountersRolloverCallback
       0   emberAfPluginEzmodeCommissioningClientCompleteCallback
       0   emberAfPluginGroupsServerGetGroupNameCallback
       0   emberAfPluginGroupsServerGroupNamesSupportedCallback
       0   emberAfPluginGroupsServerSetGroupNameCallback
       0   emberAfPluginIdentifyStartFeedbackCallback
       0   emberAfPluginIdentifyStopFeedbackCallback
       0   emberAfPluginIdleSleepActiveCallback
       0   emberAfPluginIdleSleepOkToIdleCallback
       0   emberAfPluginIdleSleepOkToSleepCallback
       0   emberAfPluginIdleSleepWakeUpCallback
       0   emberAfPluginNetworkFindGetRadioPowerForChannelCallback
       0   emberAfPluginNetworkFindJoinCallback
       0   emberAfPluginReportingConfiguredCallback
       0   emberAfPostAttributeChangeCallback
       0   emberAfPostWakeUpCallback
       0   emberAfPreAttributeChangeCallback
       0   emberAfPreCommandReceivedCallback
       0   emberAfPreGoToSleepCallback
       0   emberAfPreMessageReceivedCallback
       0   emberAfPreNcpResetCallback
       0   emberAfPreZDOMessageReceivedCallback
       0   emberAfReadAttributesResponseCallback
       0   emberAfReadReportingConfigurationResponseCallback
       0   emberAfRegistrationAbortCallback
       0   emberAfRegistrationCallback
       0   emberAfRegistrationStartCallback
       0   emberAfRemoteDeleteBindingPermissionCallback
       0   emberAfRemoteSetBindingPermissionCallback
       0   emberAfRemoveFromCurrentAppTasksCallback
       0   emberAfReportAttributesCallback
       0   emberAfSchedulePollEventCallback
       0   emberAfSecurityInitCallback
       0   emberAfSetDefaultPollControlCallback
       0   emberAfSetLongPollIntervalMsCallback
       0   emberAfSetLongPollIntervalQsCallback
       0   emberAfSetShortPollIntervalMsCallback
       0   emberAfSetShortPollIntervalQsCallback
       0   emberAfSetTimeCallback
       0   emberAfSetWakeTimeoutBitmaskCallback
       0   emberAfSetWakeTimeoutMsCallback
       0   emberAfSetWakeTimeoutQsCallback
       0   emberAfStartMoveCallback
       0   emberAfStopMoveCallback
       0   emberAfTrustCenterJoinCallback
       0   emberAfTrustCenterKeepaliveAbortCallback
       0   emberAfTrustCenterKeepaliveUpdateCallback
       0   emberAfWriteAttributesResponseCallback


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      16  ?_0
       2  emberAfAddToCurrentAppTasksCallback
       4  emberAfAllowNetworkWriteAttributeCallback
       2  emberAfClusterInitCallback
       4  emberAfClusterSecurityCustomCallback
       4  emberAfConfigureReportingResponseCallback
       4  emberAfDefaultResponseCallback
       2  emberAfDeliveryStatusCallback
       4  emberAfDiscoverAttributesResponseCallback
       4  emberAfDiscoverCommandsGeneratedResponseCallback
       4  emberAfDiscoverCommandsReceivedResponseCallback
       4  emberAfExternalAttributeReadCallback
       4  emberAfExternalAttributeWriteCallback
       4  emberAfGetCurrentAppTasksCallback
       4  emberAfGetCurrentPollControlCallback
       4  emberAfGetCurrentPollIntervalMsCallback
       4  emberAfGetCurrentPollIntervalQsCallback
       4  emberAfGetCurrentTimeCallback
       4  emberAfGetDefaultPollControlCallback
       4  emberAfGetLongPollIntervalMsCallback
       4  emberAfGetLongPollIntervalQsCallback
       4  emberAfGetShortPollIntervalMsCallback
       4  emberAfGetShortPollIntervalQsCallback
       4  emberAfGetWakeTimeoutBitmaskCallback
       4  emberAfGetWakeTimeoutMsCallback
       4  emberAfGetWakeTimeoutQsCallback
       4  emberAfInitiateInterPanKeyEstablishmentCallback
       4  emberAfInitiateKeyEstablishmentCallback
       4  emberAfInitiatePartnerLinkKeyExchangeCallback
       4  emberAfInterPanKeyEstablishmentCallback
       4  emberAfInterpanSendMessageCallback
       4  emberAfKeyEstablishmentCallback
       4  emberAfKeyEstablishmentClusterClientCommandReceivedCallback
       4  emberAfKeyEstablishmentClusterServerCommandReceivedCallback
       4  emberAfMessageSentCallback
       2  emberAfNcpInitCallback
       2  emberAfNetworkKeyUpdateCompleteCallback
       4  emberAfOtaPageRequestServerPolicyCallback
      48  emberAfOtaServerBlockSizeCallback
       4  emberAfOtaServerImageBlockRequestCallback
       4  emberAfOtaServerIncomingMessageRawCallback
       4  emberAfOtaServerQueryCallback
       4  emberAfOtaServerSendImageNotifyCallback
       8  emberAfOtaServerUpgradeEndRequestCallback
      12  emberAfOtaStorageCloseCallback
       4  emberAfPartnerLinkKeyExchangeRequestCallback
       2  emberAfPartnerLinkKeyExchangeResponseCallback
       4  emberAfPerformingKeyEstablishmentCallback
       2  emberAfPluginAuroraTunnelingServerDataErrorCallback
       2  emberAfPluginConcentratorBroadcastSentCallback
       2  emberAfPluginCountersRolloverCallback
       2  emberAfPluginEzmodeCommissioningClientCompleteCallback
       2  emberAfPluginGroupsServerGetGroupNameCallback
       4  emberAfPluginGroupsServerGroupNamesSupportedCallback
       2  emberAfPluginGroupsServerSetGroupNameCallback
       2  emberAfPluginIdentifyStartFeedbackCallback
       2  emberAfPluginIdentifyStopFeedbackCallback
       2  emberAfPluginIdleSleepActiveCallback
       4  emberAfPluginIdleSleepOkToIdleCallback
       4  emberAfPluginIdleSleepOkToSleepCallback
       2  emberAfPluginIdleSleepWakeUpCallback
       4  emberAfPluginNetworkFindGetRadioPowerForChannelCallback
       4  emberAfPluginNetworkFindJoinCallback
       4  emberAfPluginReportingConfiguredCallback
       2  emberAfPostAttributeChangeCallback
       2  emberAfPostWakeUpCallback
       2  emberAfPreAttributeChangeCallback
       4  emberAfPreCommandReceivedCallback
       4  emberAfPreGoToSleepCallback
       4  emberAfPreMessageReceivedCallback
       2  emberAfPreNcpResetCallback
       4  emberAfPreZDOMessageReceivedCallback
       4  emberAfReadAttributesResponseCallback
       4  emberAfReadReportingConfigurationResponseCallback
       2  emberAfRegistrationAbortCallback
       2  emberAfRegistrationCallback
       4  emberAfRegistrationStartCallback
       4  emberAfRemoteDeleteBindingPermissionCallback
       4  emberAfRemoteSetBindingPermissionCallback
       2  emberAfRemoveFromCurrentAppTasksCallback
       4  emberAfReportAttributesCallback
       2  emberAfSchedulePollEventCallback
       2  emberAfSecurityInitCallback
       2  emberAfSetDefaultPollControlCallback
       2  emberAfSetLongPollIntervalMsCallback
       2  emberAfSetLongPollIntervalQsCallback
       2  emberAfSetShortPollIntervalMsCallback
       2  emberAfSetShortPollIntervalQsCallback
       2  emberAfSetTimeCallback
       2  emberAfSetWakeTimeoutBitmaskCallback
       2  emberAfSetWakeTimeoutMsCallback
       2  emberAfSetWakeTimeoutQsCallback
       4  emberAfStartMoveCallback
       2  emberAfStopMoveCallback
       2  emberAfTrustCenterJoinCallback
       2  emberAfTrustCenterKeepaliveAbortCallback
       2  emberAfTrustCenterKeepaliveUpdateCallback
       4  emberAfWriteAttributesResponseCallback

 
 384 bytes in section .text
 
 384 bytes of CODE memory

Errors: none
Warnings: none
