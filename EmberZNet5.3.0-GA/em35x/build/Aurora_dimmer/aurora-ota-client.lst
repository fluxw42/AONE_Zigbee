###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        28/Oct/2016  19:51:34
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\AONE_Zigbee\EmberZNet5.3.0-GA\em35x\app\framework\plugin\aurora-ota-client\aurora-ota-client.c
#    Command line =  
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\AONE_Zigbee\EmberZNet5.3.0-GA\em35x\app\framework\plugin\aurora-ota-client\aurora-ota-client.c"
#        -D
#        "GENERATED_TOKEN_HEADER=\"app/builder/Aurora_dimmer/Aurora_dimmer_tokens.h\""
#        -D "ZA_GENERATED_HEADER=\"app/builder/Aurora_dimmer/Aurora_dimmer.h\""
#        -D APP_BTL -D
#        "BOARD_HEADER=\"../../../AONE_Zigbee/EmberZNet5.3.0-GA/em35x/app/builder/Aurora_dimmer/Aurora_dimmer_board.h\""
#        -D "PLATFORM_HEADER=\"hal/micro/cortexm3/compiler/iar.h\"" -D CORTEXM3
#        -D CORTEXM3_EMBER_MICRO -D CORTEXM3_EM357 -D PHY_EM3XX -D
#        "APPLICATION_TOKEN_HEADER=\"app/framework/util/tokens.h\"" -D
#        "CONFIGURATION_HEADER=\"app/framework/util/config.h\"" -D
#        "ATTRIBUTE_STORAGE_CONFIGURATION=\"app/builder/Aurora_dimmer/Aurora_dimmer_endpoint_config.h\""
#        -D "__SOURCEFILE__=\"aurora-ota-client.c\"" -lC
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\AONE_Zigbee\EmberZNet5.3.0-GA\em35x\build\Aurora_dimmer\"
#        --diag_suppress Pa050 -o
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\AONE_Zigbee\EmberZNet5.3.0-GA\em35x\build\Aurora_dimmer\"
#        --debug --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\AONE_Zigbee\EmberZNet5.3.0-GA\em35x\app\framework\plugin\aurora-ota-client\"
#        -I "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\AONE_Zigbee\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\"
#        -I "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\AONE_Zigbee\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\"
#        -I "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\AONE_Zigbee\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\app\framework\include\"
#        -I "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\AONE_Zigbee\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\..\..\..\16.09.23
#        Fixedonoff\EmberZNet5.3.0-GA\em35x\" -I
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\AONE_Zigbee\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\..\..\..\16.09.23
#        Fixedonoff\EmberZNet5.3.0-GA\em35x\stack\" -I
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\AONE_Zigbee\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\..\..\..\16.09.23
#        Fixedonoff\EmberZNet5.3.0-GA\em35x\hal\" -I
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\AONE_Zigbee\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\..\..\..\16.09.23
#        Fixedonoff\EmberZNet5.3.0-GA\em35x\hal\..\" -Ohz --use_c++_inline
#    List file    =  
#        C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\AONE_Zigbee\EmberZNet5.3.0-GA\em35x\build\Aurora_dimmer\aurora-ota-client.lst
#    Object file  =  
#        C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\AONE_Zigbee\EmberZNet5.3.0-GA\em35x\build\Aurora_dimmer\aurora-ota-client.o
#
###############################################################################

C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH ETRX357\AONE_Zigbee\EmberZNet5.3.0-GA\em35x\app\framework\plugin\aurora-ota-client\aurora-ota-client.c
      1          // *****************************************************************************
      2          // * ota-client.c
      3          // *
      4          // * Zigbee Over-the-air bootload cluster for upgrading firmware and 
      5          // * downloading device specific file.
      6          // * 
      7          // * Copyright 2009 by Ember Corporation. All rights reserved.              *80*
      8          // *****************************************************************************
      9          
     10          #include "app/framework/include/af.h"
     11          #include "callback.h"
     12          #include "app/framework/util/util.h"
     13          #include "app/framework/util/common.h"
     14          #include "app/framework/plugin/ota-common/ota.h"
     15          
     16          #include "app/framework/util/af-main.h"
     17          
     18          #include "app/framework/plugin/ota-storage-common/ota-storage.h"
     19          #include "app/framework/plugin/aurora-ota-client/aurora-ota-client.h"
     20          #include "app/framework/plugin/aurora-ota-client-policy/aurora-ota-client-policy.h"
     21          #include "aurora-ota-client-signature-verify.h"
     22          #include "aurora-ota-client-page-request.h"
     23          #include "app/framework/plugin/partner-link-key-exchange/partner-link-key-exchange.h"
     24          
     25          #if defined(EZSP_HOST)
     26            // For emberIeeeAddressRequest()
     27            #include "app/util/zigbee-framework/zigbee-device-host.h"
     28          #else
     29            #include "stack/include/ember.h"
     30          #endif
     31          
     32          #if defined(EMBER_AF_PLUGIN_AURORA_OTA_CLIENT_SET_IMAGE_STAMP) \
     33              && !defined(EZSP_HOST) \
     34              && defined(ZCL_USING_OTA_BOOTLOAD_CLUSTER_IMAGE_STAMP_ATTRIBUTE) \
     35              && !defined(XAP2B)
     36              
     37              #define USE_IMAGE_STAMP
     38              #include "hal/micro/cortexm3/memmap.h"
     39              #include "hal/micro/cortexm3/memmap-tables.h"
     40          #endif
     41          
     42          extern boolean isEepromAvailable(void);  
     43          
     44          //------------------------------------------------------------------------------
     45          // Globals
     46          
     47          enum BootloadState
     48          {
     49            BOOTLOAD_STATE_NONE,
     50            BOOTLOAD_STATE_DELAY,
     51            BOOTLOAD_STATE_DISCOVER_SERVER,
     52            BOOTLOAD_STATE_GET_SERVER_EUI,
     53            BOOTLOAD_STATE_OBTAIN_LINK_KEY,
     54            BOOTLOAD_STATE_QUERY_NEXT_IMAGE,
     55            BOOTLOAD_STATE_DOWNLOAD,
     56            BOOTLOAD_STATE_VERIFY_IMAGE,
     57            BOOTLOAD_STATE_WAITING_FOR_UPGRADE_MESSAGE,
     58            BOOTLOAD_STATE_COUNTDOWN_TO_UPGRADE,
     59          };
     60          typedef int8u BootloadState;
     61          
     62          static PGM_P bootloadStateNames[] = {
     63            "None",
     64            "Random Delay before start",
     65            "Discovering OTA Server",
     66            "Get OTA Server EUI",
     67            "Obtain link key",
     68            "Querying Next Image",
     69            "Downloading Image",
     70            "Verifying Image",
     71            "Waiting for Upgrade message",
     72            "Countdown to Upgrade",
     73          };
     74          
     75          // This relates the bootload state above to the status that is externally
     76          // reported via the attribute.

   \                                 In section .text, align 4, keep-with-next
     77          static PGM int8u bootloadStateToExternalState[] = {
   \                     bootloadStateToExternalState:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x01 0x02    
   \              0x03 0x04    
   \              0x00 0x00    
     78            OTA_UPGRADE_STATUS_NORMAL,
     79            OTA_UPGRADE_STATUS_NORMAL,
     80            OTA_UPGRADE_STATUS_NORMAL,
     81            OTA_UPGRADE_STATUS_NORMAL,
     82            OTA_UPGRADE_STATUS_NORMAL,
     83            OTA_UPGRADE_STATUS_NORMAL,
     84            OTA_UPGRADE_STATUS_DOWNLOAD_IN_PROGRESS,
     85            OTA_UPGRADE_STATUS_DOWNLOAD_COMPLETE,
     86            OTA_UPGRADE_STATUS_WAIT,
     87            OTA_UPGRADE_STATUS_COUNTDOWN
     88          };
     89          
     90          #define UNDEFINED_ENDPOINT 0xFF
     91          
     92          static BootloadState currentBootloadState = BOOTLOAD_STATE_NONE;
     93          
     94          static int8u myEndpoint = UNDEFINED_ENDPOINT;
     95          static int8u serverEndpoint = UNDEFINED_ENDPOINT;
     96          static EmberNodeId serverNodeId = EMBER_UNKNOWN_NODE_ID;
     97          static int8u errors = 0;
     98          static int32u totalImageSize = 0;
     99          static EmberAfOtaImageId currentDownloadFile;
    100          static int16u hardwareVersion;
    101          
    102          #define WAIT_FOR_UPGRADE_MESSAGE 0xFFFFFFFF
    103          
    104          #define ZCL_COMMAND_ID_INDEX 2
    105          
    106          #define IMAGE_NOTIFY_NO_PAYLOAD              0
    107          #define IMAGE_NOTIFY_MANUFACTURER_ONLY_TYPE  1
    108          #define IMAGE_NOTIFY_MFG_AND_IMAGE_TYPE      2
    109          #define IMAGE_NOTIFY_FULL_VERSION_TYPE       3
    110          #define IMAGE_NOTIFY_LAST_VALID_TYPE         IMAGE_NOTIFY_FULL_VERSION_TYPE       
    111          
    112          
    113          
    114          // These lengths correspond to the #defines above.

   \                                 In section .text, align 4, keep-with-next
    115          static PGM int8u imageNotifyPayloadLengths[] = {
   \                     imageNotifyPayloadLengths:
   \   00000000   0x05 0x07          DC8 5, 7, 9, 13
   \              0x09 0x0D    

   \                                 In section .data, align 4
   \                     currentBootloadState:
   \   00000000   0x00               DC8 0
   \   00000001   0xFF               DC8 255
   \   00000002   0xFF               DC8 255
   \   00000003   0x00               DC8 0
   \   00000004   0x00               DC8 0
   \   00000005   0x00               DC8 0
   \   00000006   0x00               DC8 0
   \   00000007   0x00               DC8 0
   \   00000008   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000018   0xFFFD             DC16 65533
   \   0000001A   0x00 0x00          DC8 0, 0
   \   0000001C   0x00 0x00          DC8 0, 0
   \   0000001E   0x00 0x00          DC8 0, 0
   \   00000020   0x........         DC32 ?_0, ?_1, ?_2, ?_3, ?_4, ?_5, ?_6, ?_7, ?_8, ?_9
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \   00000048   0x00000000         DC32 0
   \   0000004C   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
    116            (EMBER_AF_ZCL_OVERHEAD + 2),  // Payload and Jitter only.
    117            (EMBER_AF_ZCL_OVERHEAD + 4),  // and MFG ID
    118            (EMBER_AF_ZCL_OVERHEAD + 6),  // and Image Type ID
    119            (EMBER_AF_ZCL_OVERHEAD + 10), // and Version
    120          };
    121          
    122          // Values per the spec.
    123          #define IMAGE_BLOCK_RESPONSE_SUCCESS_MIN_LENGTH      (EMBER_AF_ZCL_OVERHEAD + 14)
    124          #define UPGRADE_END_RESPONSE_MIN_LENGTH              (EMBER_AF_ZCL_OVERHEAD + 16)
    125          #define QUERY_NEXT_IMAGE_SUCCESS_RESPONSE_MIN_LENGTH (EMBER_AF_ZCL_OVERHEAD + 13)
    126          
    127          static boolean waitingForResponse = FALSE;
    128          static int32u nextEventTimer;
    129          
    130          #define WAITING_FOR_MESSAGE      TRUE
    131          #define NO_MESSAGE_RESPONSE_WAIT FALSE
    132          
    133          // Maximum amount of data that the client is willing to accept in one packet
    134          // The server can always give us less data (sizing the response based on its
    135          // send parameters, eg. source routing).  But it can't give us more.
    136          // Since no 
    137          #define MAX_CLIENT_DATA_SIZE      63   // in bytes
    138          
    139          // We only support the Zigbbe Pro stack version.
    140          #define STACK_VERSION ZIGBEE_PRO_STACK_VERSION
    141          
    142          // Handy defines to make the code more readable.
    143          #define TIMEOUT_REACHED  TRUE
    144          #define START_NEW_TIMER  FALSE
    145          
    146          // queryNextImage() defines
    147          typedef enum {
    148            DELAY_BEFORE_SEND_QUERY = 0,
    149            SEND_QUERY_NOW = 1,
    150          } SendNextQueryState;
    151          
    152          // This defines how long to wait for a message response before considering it
    153          // an error.  It also defines how long a sleepy stays awake waiting for
    154          // a message.
    155          #define MESSAGE_TIMEOUT_MS 3000L
    156          
    157          #define IMAGE_BLOCK_ABORT_LENGTH                   (EMBER_AF_ZCL_OVERHEAD + 1)
    158          #define IMAGE_BLOCK_RESPONSE_SUCCESS_MIN_LENGTH    (EMBER_AF_ZCL_OVERHEAD + 14)
    159          
    160          // This is the length WITHOUT the Minimum Block Request Period
    161          #define IMAGE_BLOCK_RESPONSE_WAIT_FOR_DATA_LENGTH_MIN  (EMBER_AF_ZCL_OVERHEAD + 8)
    162          
    163          #define IMAGE_BLOCK_RESPONSE_WAIT_FOR_DATA_MIN_BLOCK_RESPONSE_LENGTH \
    164            (IMAGE_BLOCK_RESPONSE_WAIT_FOR_DATA_LENGTH_MIN + 2)
    165          
    166          // Maximum wait time that the client would wait to retrive data or to be
    167          // upgraded. If the server is not ready for the operation, it should tell the
    168          // client to wait (again).  But the client would only wait up to the value 
    169          // defined below.  Regarding upgrading, current OTA spec recommends that the
    170          // client should query the server every 60 mins even though it is told to wait 
    171          // longer.
    172          #define TIMEOUT_MAX_WAIT_TIME_MS   (60 * MINUTES_IN_MS)
    173          
    174          // If the server sent us an invalid delay time for the an image block
    175          // download, this is how long we will delay before getting the
    176          // next block.
    177          #define CALCULATE_TIME_ERROR_IMAGE_BLOCK_DELAY_MS (5 * MINUTES_IN_MS)
    178          
    179          // If the server sent us an invalid delay time for the upgrade end response,
    180          // we use this value for the next request.
    181              //MN Commented out per Gary's instructions to reduce upgrade delay to 1s
    182          //#define CALCULATE_TIME_ERROR_UPGRADE_END_RESPONSE_DELAY_MS (1 * HOURS_IN_MS)
    183          #define CALCULATE_TIME_ERROR_UPGRADE_END_RESPONSE_DELAY_MS (1 * SECONDS_IN_MS)
    184          
    185          
    186          // When the server asks us to wait indefinitely to apply an upgrade,
    187          // we will ask them again in this much time.
    188          #define WAIT_FOR_UPGRADE_DELAY_MS (1 * HOURS_IN_MS)
    189          
    190          // How often a print is done indicating client download progress.
    191          // e.g. "Download 5% complete"
    192          #define DOWNLOAD_PERCENTAGE_UPDATE_RATE 5
    193          
    194          #define MESSAGE_TIMEOUT_BACKOFF_MS (2 * SECONDS_IN_MS)
    195          
    196          // Even when we are told to upgrade immediately, we want to insure there
    197          // is a chance for the APS retries and ZCL response to get back to their 
    198          // senders.
    199          #define IMMEDIATE_UPGRADE_DELAY_MS (3 * SECONDS_IN_MS)
    200          
    201          #if defined(EMBER_AF_PLUGIN_AURORA_OTA_CLIENT_USE_PAGE_REQUEST)
    202            #define USE_PAGE_REQUEST_DEFAULT TRUE
    203          #else
    204            #define USE_PAGE_REQUEST_DEFAULT FALSE
    205          #endif
    206          
    207          // HA 1.2 feature
    208          static int16u minBlockRequestPeriod;
    209          
    210          // This is not a CONST because even if the client supports page request,
    211          // the server may not.  So we will dynamically turn off sending page requests
    212          // when it is enabled and the server doesn't support it.
    213          static boolean usePageRequest = USE_PAGE_REQUEST_DEFAULT;
    214          
    215          typedef enum {
    216            NO_CUSTOM_VERIFY,
    217            NEW_CUSTOM_VERIFY,
    218            CUSTOM_VERIFY_IN_PROGRESS,
    219          } CustomVerifyStatus;
    220          static boolean customVerifyStatus = NO_CUSTOM_VERIFY;
    221          
    222          // TODO: need to gate this when we're better equipped to do so
    223          // with the generated CLI
    224          //#if defined(EMBER_TEST)
    225          // If set to 100, will not stop download.

   \                                 In section .data, align 1
    226          int8u emAfOtaClientStopDownloadPercentage = 100;
   \                     emAfOtaClientStopDownloadPercentage:
   \   00000000   0x64               DC8 100
    227          //#endif
    228          
    229          // The spec says pick a random number up to 5 minutes.  We limit
    230          // ourselves to 4.25 minutes to make it easier to mask out the upper
    231          // bits and limit the number retrieved from halCommonGetRandom()
    232          #define MAXIMUM_RANDOM_DELAY_SECONDS_MASK 0x00FF  
    233          
    234          //------------------------------------------------------------------------------
    235          // Forward Declarations
    236          
    237          static void recordUpgradeStatus(BootloadState state);
    238          static void putImageInfoInMessage(void);
    239          static void startServerDiscovery(void);
    240          static void euiLookupErrorOccurred(void);
    241          static void euiLookup(void);
    242          static void queryNextImage(SendNextQueryState nextQuery,
    243                                     boolean queryErrorOccurred);
    244          static void continueImageDownload(void);
    245          static void continueImageVerification(EmberAfImageVerifyStatus status);
    246          static void askServerToRunUpgrade(boolean timeout);
    247          static void runUpgrade(void);
    248          static int32u updateCurrentOffset(int32u currentOffset);
    249          static void updateDownloadFileVersion(int32u version);
    250          static boolean downloadAndVerifyFinish(EmberAfOtaDownloadResult result);
    251          static void determineNextState(void);
    252          static EmberAfStatus imageNotifyParse(boolean broadcast, 
    253                                                int8u* buffer, 
    254                                                int8u index, 
    255                                                int8u length);
    256          static EmberAfStatus queryNextImageResponseParse(int8u* buffer, 
    257                                                           int8u index, 
    258                                                           int8u length);
    259          static EmberAfStatus imageBlockResponseParse(int8u* buffer, 
    260                                                       int8u index, 
    261                                                       int8u length);
    262          static EmberAfStatus upgradeEndResponseParse(int8u status,
    263                                                       int8u* buffer, 
    264                                                       int8u length);
    265          static boolean calculateTimer(int32u currentTime, 
    266                                        int32u targetTime, 
    267                                        int32u* returnTime);
    268          
    269          //------------------------------------------------------------------------------
    270          
    271          static void updateCurrentImageAttributes(EmberAfOtaImageId* imageId)
    272          {
    273          #if defined(ZCL_USING_OTA_BOOTLOAD_CLUSTER_MANUFACTURER_ID_ATTRIBUTE)
    274            emberAfWriteAttribute(myEndpoint,
    275                                  ZCL_OTA_BOOTLOAD_CLUSTER_ID, 
    276                                  ZCL_MANUFACTURER_ID_ATTRIBUTE_ID,
    277                                  CLUSTER_MASK_CLIENT,
    278                                  (int8u*)&(imageId->manufacturerId),
    279                                  ZCL_INT16U_ATTRIBUTE_TYPE);
    280          #endif
    281          
    282          #if defined(ZCL_USING_OTA_BOOTLOAD_CLUSTER_IMAGE_TYPE_ID_ATTRIBUTE)
    283            emberAfWriteAttribute(myEndpoint,
    284                                  ZCL_OTA_BOOTLOAD_CLUSTER_ID, 
    285                                  ZCL_IMAGE_TYPE_ID_ATTRIBUTE_ID,
    286                                  CLUSTER_MASK_CLIENT,
    287                                  (int8u*)&(imageId->imageTypeId),
    288                                  ZCL_INT16U_ATTRIBUTE_TYPE);
    289          #endif
    290          
    291          #if defined(ZCL_USING_OTA_BOOTLOAD_CLUSTER_CURRENT_FILE_VERSION_ATTRIBUTE)
    292            emberAfWriteAttribute(myEndpoint,
    293                                  ZCL_OTA_BOOTLOAD_CLUSTER_ID, 
    294                                  ZCL_CURRENT_FILE_VERSION_ATTRIBUTE_ID,
    295                                  CLUSTER_MASK_CLIENT,
    296                                  (int8u*)&(imageId->firmwareVersion),
    297                                  ZCL_INT32U_ATTRIBUTE_TYPE);
    298          #endif
    299          }
    300          
    301          static void updateMinBlockRequestPeriodAttribute(int16u value)
    302          {
    303            minBlockRequestPeriod = value;
    304          
    305          #if defined(ZCL_USING_OTA_BOOTLOAD_CLUSTER_MINIMUM_BLOCK_REQUEST_PERIOD_ATTRIBUTE)
    306            {
    307              emberAfWriteAttribute(myEndpoint,
    308                                    ZCL_OTA_BOOTLOAD_CLUSTER_ID, 
    309                                    ZCL_MINIMUM_BLOCK_REQUEST_PERIOD_ATTRIBUTE_ID, 
    310                                    CLUSTER_MASK_CLIENT,
    311                                    (int8u*)&minBlockRequestPeriod,
    312                                    ZCL_INT16U_ATTRIBUTE_TYPE);
    313            }
    314          #endif
    315          }
    316          

   \                                 In section .text, align 2, keep-with-next
    317          void emberAfOtaBootloadClusterClientInitCallback(int8u endpoint)
    318          {
   \                     emberAfOtaBootloadClusterClientInitCallback: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
   \   00000004   0x4604             MOV      R4,R0
    319              //GB - Initialise the OTA cluster only if the eeprom is available.
    320              if (!isEepromAvailable()) 
   \   00000006   0x.... 0x....      BL       isEepromAvailable
   \   0000000A   0xB958             CBNZ.N   R0,??emberAfOtaBootloadClusterClientInitCallback_0
    321              {
    322                  emberAfDebugPrintln("Not initialising OTA");
   \   0000000C   0x.... 0x....      ADR.W    R1,?_10
   \   00000010   0x2002             MOVS     R0,#+2
   \   00000012   0x.... 0x....      BL       emberAfPrintln
    323                  emAfOtaClientStop();  // stop ota tick.
   \   00000016   0x.... 0x....      BL       emAfOtaClientStop
    324                  emberAfEndpointEnableDisable(3, FALSE);  // Disable the OTA ep.        
   \   0000001A   0x2100             MOVS     R1,#+0
   \   0000001C   0x2003             MOVS     R0,#+3
   \   0000001E   0x.... 0x....      BL       emberAfEndpointEnableDisable
    325                  return;
   \   00000022   0xE00D             B.N      ??emberAfOtaBootloadClusterClientInitCallback_1
    326              }    
    327              
    328            if (myEndpoint != UNDEFINED_ENDPOINT) {
   \                     ??emberAfOtaBootloadClusterClientInitCallback_0: (+1)
   \   00000024   0x.... 0x....      LDR.W    R5,??DataTable135
   \   00000028   0x7868             LDRB     R0,[R5, #+1]
   \   0000002A   0x28FF             CMP      R0,#+255
   \   0000002C   0xD108             BNE.N    ??emberAfOtaBootloadClusterClientInitCallback_1
    329              // We have already been initialized
    330              return;
    331            }
    332            myEndpoint = endpoint;
   \   0000002E   0x706C             STRB     R4,[R5, #+1]
    333          
    334            emberAfOtaStorageInitCallback();
   \   00000030   0x.... 0x....      BL       emberAfOtaStorageInitCallback
    335          
    336          #if defined(ZCL_USING_OTA_BOOTLOAD_CLUSTER_CURRENT_ZIGBEE_STACK_VERSION_ATTRIBUTE)
    337            {
    338              int16u currentZigbeeStackVersion = ZIGBEE_PRO_STACK_VERSION;
    339              emberAfWriteAttribute(myEndpoint,
    340                                    ZCL_OTA_BOOTLOAD_CLUSTER_ID, 
    341                                    ZCL_CURRENT_ZIGBEE_STACK_VERSION_ATTRIBUTE_ID, 
    342                                    CLUSTER_MASK_CLIENT,
    343                                    (int8u*)&currentZigbeeStackVersion,
    344                                    ZCL_INT16U_ATTRIBUTE_TYPE);
    345            }
    346          #endif
    347          
    348            // Assume we can download as fast as we want until told otherwise by server.
    349            updateMinBlockRequestPeriodAttribute(0); // minBlockRequestPeriod.
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0x83A8             STRH     R0,[R5, #+28]
    350          
    351          
    352          #if defined(USE_IMAGE_STAMP)
    353            {
    354              // Unfortunately the AAT data struct is declared const,
    355              // so we must copy out the image stamp to satisfy the compiler.
    356              int8u data[IMAGE_STAMP_SIZE];
    357              MEMCOPY(data, halAppAddressTable.imageStamp, IMAGE_STAMP_SIZE);
    358              emberAfWriteAttribute(myEndpoint,
    359                                    ZCL_OTA_BOOTLOAD_CLUSTER_ID,
    360                                    ZCL_IMAGE_STAMP_ATTRIBUTE_ID,
    361                                    CLUSTER_MASK_CLIENT,
    362                                    data,
    363                                    ZCL_INT32U_ATTRIBUTE_TYPE);
    364            }
    365          #endif
    366          
    367            {
    368              EmberAfOtaImageId id;
    369              int16u hwVer;    
    370              emberAfOtaClientVersionInfoCallback(&id, 
    371                                                  &hwVer);
   \   00000038   0xA900             ADD      R1,SP,#+0
   \   0000003A   0xA801             ADD      R0,SP,#+4
   \   0000003C   0x.... 0x....      BL       emberAfOtaClientVersionInfoCallback
    372              updateCurrentImageAttributes(&id);
    373            }
    374          }
   \                     ??emberAfOtaBootloadClusterClientInitCallback_1: (+1)
   \   00000040   0xB005             ADD      SP,SP,#+20
   \   00000042   0xBD30             POP      {R4,R5,PC}       ;; return
    375          
    376          // Returns whether or not a timer has been set.  For timer = 0, will return FALSE

   \                                 In section .text, align 2, keep-with-next
    377          static boolean setTimer(int32u timeMs)
    378          {
   \                     setTimer: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
    379            int32u timer;
    380          
    381            // When waiting for page request replies I want to use the timer that is defined
    382            // in App. Builder and passed through to here since I am expecting multiple
    383            // messages coming back from the server.
    384            if (waitingForResponse
    385                && emAfGetCurrentPageRequestStatus() != EM_AF_WAITING_PAGE_REQUEST_REPLIES) {
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable135
   \   00000006   0x4605             MOV      R5,R0
   \   00000008   0x7920             LDRB     R0,[R4, #+4]
   \   0000000A   0xB138             CBZ.N    R0,??setTimer_0
   \   0000000C   0x.... 0x....      BL       emAfGetCurrentPageRequestStatus
   \   00000010   0x2801             CMP      R0,#+1
   \   00000012   0xD003             BEQ.N    ??setTimer_0
    386              timer = MESSAGE_TIMEOUT_MS;
   \   00000014   0xF640 0x36B8      MOVW     R6,#+3000
    387              nextEventTimer = timeMs;
   \   00000018   0x64E5             STR      R5,[R4, #+76]
   \   0000001A   0xE003             B.N      ??setTimer_1
    388            } else {
    389              timer = timeMs;
    390              nextEventTimer = 0;
   \                     ??setTimer_0: (+1)
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0x462E             MOV      R6,R5
   \   00000020   0x64E0             STR      R0,[R4, #+76]
    391            }
    392          
    393            // A timer set at 0 means we are not counting down to some event.
    394            // We may still be in an active state of waiting, but are waiting
    395            // for an event to fire rather than a timer to expire.  For example, service
    396            // discovery will generate a callback when it is complete.  No need for
    397            // keeping track of time here as well.
    398            if (timer != 0) {
   \   00000022   0xB1A6             CBZ.N    R6,??setTimer_2
    399              //    otaPrintln("Setting timer: 0x%4X ms", timer);
    400              EmberAfEventPollControl pollControl = EMBER_AF_SHORT_POLL;
    401              EmberAfEventSleepControl sleepControl = EMBER_AF_OK_TO_SLEEP;
    402              if (currentBootloadState == BOOTLOAD_STATE_VERIFY_IMAGE) {
   \                     ??setTimer_1: (+1)
   \   00000024   0x7820             LDRB     R0,[R4, #+0]
   \   00000026   0x2501             MOVS     R5,#+1
   \   00000028   0x2700             MOVS     R7,#+0
   \   0000002A   0x2807             CMP      R0,#+7
   \   0000002C   0xBF08             IT       EQ 
   \   0000002E   0x2702             MOVEQ    R7,#+2
    403                sleepControl = EMBER_AF_STAY_AWAKE;
   \   00000030   0xD005             BEQ.N    ??setTimer_3
    404              } else if (!waitingForResponse
    405                         && (emAfGetCurrentPageRequestStatus() 
    406                             == EM_AF_NO_PAGE_REQUEST)) {
   \   00000032   0x7920             LDRB     R0,[R4, #+4]
   \   00000034   0xB918             CBNZ.N   R0,??setTimer_3
   \   00000036   0x.... 0x....      BL       emAfGetCurrentPageRequestStatus
   \   0000003A   0xB900             CBNZ.N   R0,??setTimer_3
    407                pollControl = EMBER_AF_LONG_POLL;
   \   0000003C   0x2500             MOVS     R5,#+0
    408              }
    409              emberAfScheduleClientTickExtended(myEndpoint,
    410                                                ZCL_OTA_BOOTLOAD_CLUSTER_ID,
    411                                                timer,
    412                                                pollControl,
    413                                                sleepControl);
   \                     ??setTimer_3: (+1)
   \   0000003E   0x7860             LDRB     R0,[R4, #+1]
   \   00000040   0x9700             STR      R7,[SP, #+0]
   \   00000042   0x462B             MOV      R3,R5
   \   00000044   0x4632             MOV      R2,R6
   \   00000046   0x2119             MOVS     R1,#+25
   \   00000048   0x.... 0x....      BL       emberAfScheduleClientTickExtended
   \   0000004C   0x2001             MOVS     R0,#+1
   \                     ??setTimer_2: (+1)
   \   0000004E   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    414            }
    415            return (timer != 0);
    416          }
    417          

   \                                 In section .text, align 2, keep-with-next
    418          void emberAfPluginAuroraOtaClientStackStatusCallback(EmberStatus status)
    419          {
   \                     emberAfPluginAuroraOtaClientStackStatusCallback: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    420            if (!isEepromAvailable()) 
   \   00000004   0x.... 0x....      BL       isEepromAvailable
   \   00000008   0xB1A8             CBZ.N    R0,??emberAfPluginAuroraOtaClientStackStatusCallba_0
    421            {
    422                return;  //GB ota not active if no external flash.
    423            }
    424            
    425          #if defined(EMBER_AF_PLUGIN_AURORA_OTA_CLIENT_AUTO_START)
    426            int16u randomDelaySeconds;
    427            if (status != EMBER_NETWORK_UP
    428                || currentBootloadState != BOOTLOAD_STATE_NONE) {
   \   0000000A   0x2C90             CMP      R4,#+144
   \   0000000C   0xBF02             ITTT     EQ 
   \   0000000E   0x.... 0x....      LDREQ.W  R0,??DataTable135
   \   00000012   0x7800             LDRBEQ   R0,[R0, #+0]
   \   00000014   0x2800             CMPEQ    R0,#+0
   \   00000016   0xD10E             BNE.N    ??emberAfPluginAuroraOtaClientStackStatusCallba_0
    429              return;
    430            }
    431            randomDelaySeconds = (halCommonGetRandom()
    432                                  & MAXIMUM_RANDOM_DELAY_SECONDS_MASK);
   \   00000018   0x.... 0x....      BL       halCommonGetRandom
   \   0000001C   0xB2C4             UXTB     R4,R0
    433            recordUpgradeStatus(BOOTLOAD_STATE_DELAY);
   \   0000001E   0x2001             MOVS     R0,#+1
   \   00000020   0x.... 0x....      BL       recordUpgradeStatus
    434            otaPrintln("Delaying %d seconds before starting OTA client", randomDelaySeconds);
   \   00000024   0x4622             MOV      R2,R4
   \   00000026   0x.... 0x....      ADR.W    R1,?_11
   \   0000002A   0x.... 0x....      BL       ??Subroutine2_0
    435            setTimer(randomDelaySeconds << 10);  // multiply by 1024 to get approx ms.
   \                     ??CrossCallReturnLabel_44: (+1)
   \   0000002E   0x02A0             LSLS     R0,R4,#+10
   \   00000030   0xE8BD 0x4010      POP      {R4,LR}
   \   00000034   0x....             B.N      setTimer
   \                     ??emberAfPluginAuroraOtaClientStackStatusCallba_0: (+1)
   \   00000036   0xBD10             POP      {R4,PC}          ;; return
    436          #endif
    437          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2: (+1)
   \   00000000   0x6A02             LDR      R2,[R0, #+32]
   \                     ??Subroutine2_0: (+1)
   \   00000002   0x2040             MOVS     R0,#+64
   \   00000004   0x.... 0x....      B.W      emberAfPrintln
    438          

   \                                 In section .text, align 4, keep-with-next
    439          static void otaClientTick(void)
    440          {    
   \                     otaClientTick: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    441            boolean errorOccurred = FALSE;
    442            // Getting here means either we timed out our last operation,
    443            // or we need to kick off a periodic event.
    444          
    445            emAfPageRequestTimerExpired();
   \   00000002   0x.... 0x....      BL       emAfPageRequestTimerExpired
    446             
    447            if (waitingForResponse) {
   \   00000006   0x.... 0x....      LDR.W    R5,??DataTable135
   \   0000000A   0x7928             LDRB     R0,[R5, #+4]
   \   0000000C   0x2400             MOVS     R4,#+0
   \   0000000E   0xB1A8             CBZ.N    R0,??otaClientTick_1
    448              otaPrintln("Timeout waiting for message.");
   \   00000010   0x.... 0x....      ADR.W    R1,?_12
   \   00000014   0x.... 0x....      BL       ?Subroutine1
    449              errorOccurred = TRUE;
    450              errors++;
   \                     ??CrossCallReturnLabel_21: (+1)
   \   00000018   0x78E8             LDRB     R0,[R5, #+3]
   \   0000001A   0x1C40             ADDS     R0,R0,#+1
   \   0000001C   0x70E8             STRB     R0,[R5, #+3]
   \   0000001E   0x2401             MOVS     R4,#+1
    451              waitingForResponse = FALSE;
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0x7128             STRB     R0,[R5, #+4]
    452                
    453              if (currentBootloadState == BOOTLOAD_STATE_DOWNLOAD) {
   \   00000024   0x7828             LDRB     R0,[R5, #+0]
   \   00000026   0x2806             CMP      R0,#+6
   \   00000028   0xD108             BNE.N    ??otaClientTick_1
    454                // Especially important if the download delay is 0, we want
    455                // to backoff a little and make sure we don't continue to
    456                // blast the server with requests.
    457                setTimer((nextEventTimer > MESSAGE_TIMEOUT_BACKOFF_MS)
    458                         ? nextEventTimer
    459                         : MESSAGE_TIMEOUT_BACKOFF_MS);
   \   0000002A   0x6CE8             LDR      R0,[R5, #+76]
   \   0000002C   0xE8BD 0x4032      POP      {R1,R4,R5,LR}
   \   00000030   0xF5B0 0x6FFA      CMP      R0,#+2000
   \   00000034   0xBF98             IT       LS 
   \   00000036   0xF44F 0x60FA      MOVLS    R0,#+2000
   \   0000003A   0x....             B.N      setTimer
    460                return;
    461              }
    462            }
    463          
    464            switch (currentBootloadState) {
   \                     ??otaClientTick_1: (+1)
   \   0000003C   0x7828             LDRB     R0,[R5, #+0]
   \   0000003E   0x1E40             SUBS     R0,R0,#+1
   \   00000040   0x2808             CMP      R0,#+8
   \   00000042   0xD827             BHI.N    ??otaClientTick_2
   \   00000044   0xE8DF 0xF000      TBB      [PC, R0]
   \                     ??otaClientTick_0:
   \   00000048   0x05 0x08          DC8      0x5,0x8,0xB,0x26
   \              0x0B 0x26    
   \   0000004C   0x0E 0x14          DC8      0xE,0x14,0x18,0x1D
   \              0x18 0x1D    
   \   00000050   0x22 0x00          DC8      0x22,0x0
    465            case BOOTLOAD_STATE_DELAY:
    466              emberAfOtaClientStartCallback();
   \                     ??otaClientTick_3: (+1)
   \   00000052   0xE8BD 0x4031      POP      {R0,R4,R5,LR}
   \   00000056   0x....             B.N      emberAfOtaClientStartCallback
    467              break;
    468            case BOOTLOAD_STATE_DISCOVER_SERVER:
    469              startServerDiscovery();
   \                     ??otaClientTick_4: (+1)
   \   00000058   0xE8BD 0x4031      POP      {R0,R4,R5,LR}
   \   0000005C   0x....             B.N      startServerDiscovery
    470              break;
    471            case BOOTLOAD_STATE_GET_SERVER_EUI:
    472              euiLookupErrorOccurred();
   \                     ??otaClientTick_5: (+1)
   \   0000005E   0xE8BD 0x4031      POP      {R0,R4,R5,LR}
   \   00000062   0x....             B.N      euiLookupErrorOccurred
    473              break;
    474            case BOOTLOAD_STATE_QUERY_NEXT_IMAGE:
    475              queryNextImage(SEND_QUERY_NOW, 
    476                             errorOccurred);
   \                     ??otaClientTick_6: (+1)
   \   00000064   0x4621             MOV      R1,R4
   \   00000066   0xE8BD 0x4034      POP      {R2,R4,R5,LR}
   \   0000006A   0x2001             MOVS     R0,#+1
   \   0000006C   0x.... 0x....      B.W      queryNextImage
    477              break;
    478            case BOOTLOAD_STATE_DOWNLOAD:
    479              continueImageDownload();
   \                     ??otaClientTick_7: (+1)
   \   00000070   0xE8BD 0x4031      POP      {R0,R4,R5,LR}
   \   00000074   0x.... 0x....      B.W      continueImageDownload
    480              break;
    481            case BOOTLOAD_STATE_VERIFY_IMAGE:
    482              continueImageVerification(EMBER_AF_IMAGE_VERIFY_IN_PROGRESS);
   \                     ??otaClientTick_8: (+1)
   \   00000078   0xE8BD 0x4032      POP      {R1,R4,R5,LR}
   \   0000007C   0x2002             MOVS     R0,#+2
   \   0000007E   0x.... 0x....      B.W      continueImageVerification
    483              break;
    484            case BOOTLOAD_STATE_WAITING_FOR_UPGRADE_MESSAGE:
    485              askServerToRunUpgrade(TIMEOUT_REACHED);
   \                     ??otaClientTick_9: (+1)
   \   00000082   0xE8BD 0x4032      POP      {R1,R4,R5,LR}
   \   00000086   0x2001             MOVS     R0,#+1
   \   00000088   0x.... 0x....      B.W      askServerToRunUpgrade
    486              break;
    487            case BOOTLOAD_STATE_COUNTDOWN_TO_UPGRADE:
    488              runUpgrade();
   \                     ??otaClientTick_10: (+1)
   \   0000008C   0xE8BD 0x4031      POP      {R0,R4,R5,LR}
   \   00000090   0x.... 0x....      B.W      runUpgrade
    489            default:
    490              // Do nothing.  Invalid state
    491              break;
    492            }
    493          }
   \                     ??otaClientTick_2: (+1)
   \   00000094   0xBD31             POP      {R0,R4,R5,PC}    ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1: (+1)
   \   00000000   0x2040             MOVS     R0,#+64
   \   00000002   0x.... 0x....      B.W      emberAfPrintln
    494          

   \                                 In section .text, align 2, keep-with-next
    495          void emberAfPluginOtaStorageSimpleEepromEraseCompleteCallback(boolean success)
    496          {
    497            if (!success) {
   \                     emberAfPluginOtaStorageSimpleEepromEraseCompleteCallback: (+1)
   \   00000000   0x2800             CMP      R0,#+0
   \   00000002   0xBF04             ITT      EQ 
    498              downloadAndVerifyFinish(EMBER_AF_OTA_ERASE_FAILED);
   \   00000004   0x2005             MOVEQ    R0,#+5
   \   00000006   0x.... 0x....      BEQ.W    downloadAndVerifyFinish
    499          
    500            } else if (currentBootloadState == BOOTLOAD_STATE_DOWNLOAD) {
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable135
   \   0000000E   0x7800             LDRB     R0,[R0, #+0]
   \   00000010   0x2806             CMP      R0,#+6
   \   00000012   0xBF08             IT       EQ 
    501              // If an erase was triggered for some other reason besides preparing
    502              // to start a download, we don't want to trigger the OTA client state
    503              // machine.
    504              otaClientTick();
   \   00000014   0x.... 0x....      BEQ.W    otaClientTick
    505            }
    506          }
   \   00000018   0x4770             BX       LR               ;; return
    507          

   \                                 In section .text, align 2, keep-with-next
    508          void emberAfOtaBootloadClusterClientTickCallback(int8u endpoint)
    509          {
    510            // Since there is only one instance of the OTA bootload cluster allowed,
    511            // we don't care about the endpoint value.
    512            otaClientTick();
   \                     emberAfOtaBootloadClusterClientTickCallback: (+1)
   \   00000000   0x....             B.N      otaClientTick
    513          }
    514          

   \                                 In section .text, align 2, keep-with-next
    515          static void restartServerDiscoveryAfterDelay(void)
    516          {
   \                     restartServerDiscoveryAfterDelay: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    517            setTimer(EMBER_AF_OTA_SERVER_DISCOVERY_DELAY_MS);
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable139  ;; 0x927c0
   \   00000006   0x.... 0x....      BL       setTimer
    518            recordUpgradeStatus(BOOTLOAD_STATE_DISCOVER_SERVER);
   \   0000000A   0xE8BD 0x4002      POP      {R1,LR}
   \   0000000E   0x2002             MOVS     R0,#+2
   \   00000010   0x....             B.N      recordUpgradeStatus
    519          }
    520          
    521          #if defined(EMBER_AF_HAS_SECURITY_PROFILE_SE)
    522          static void otaClientPartnerLinkKeyCallback(boolean success)
    523          {
    524            if (success) {
    525              determineNextState();
    526              return;
    527            } 
    528          
    529            restartServerDiscoveryAfterDelay();
    530          }
    531          #endif
    532          
    533          static void getPartnerLinkKey(void)
    534          {
    535          #if defined(EMBER_AF_HAS_SECURITY_PROFILE_SE)
    536            EmberEUI64 serverEui64;
    537            int8u i;
    538            EmberAfAttributeType attributeType;
    539          
    540            if (!emberAfIsCurrentSecurityProfileSmartEnergy()
    541                || serverNodeId == EMBER_TRUST_CENTER_NODE_ID) {
    542              goto partnerLinkKeyDone;
    543            }
    544          
    545            emberAfReadClientAttribute(myEndpoint,
    546                                       ZCL_OTA_BOOTLOAD_CLUSTER_ID,
    547                                       ZCL_UPGRADE_SERVER_ID_ATTRIBUTE_ID,
    548                                       serverEui64,
    549                                       EUI64_SIZE);
    550          
    551            for (i = 0; i < emberAfGetKeyTableSize(); i++) {
    552              EmberKeyStruct keyStruct;
    553              if (EMBER_SUCCESS == emberGetKeyTableEntry(i, &keyStruct)
    554                  && EMBER_APPLICATION_LINK_KEY == keyStruct.type
    555                  && 0 == MEMCOMPARE(keyStruct.partnerEUI64, serverEui64, EUI64_SIZE)) {
    556                goto partnerLinkKeyDone;
    557              }
    558            }
    559          
    560            // Spec is not clear whether the actual key establishment endpoint 
    561            // needs to be used, so we just use 1.
    562            if (EMBER_SUCCESS
    563                == emberAfInitiatePartnerLinkKeyExchange(serverNodeId,
    564                                                         1,
    565                                                         otaClientPartnerLinkKeyCallback)) {
    566              return;
    567            }
    568            
    569            // If we fail to initiate partner link key, it could be because 
    570            // we don't have any link key spots or the server is no longer online.
    571            // We just retry the entire operation again.
    572            restartServerDiscoveryAfterDelay();
    573            return;
    574          
    575           partnerLinkKeyDone:
    576          #endif
    577          
    578            determineNextState();
    579            return;
    580          }
    581          

   \                                 In section .text, align 2, keep-with-next
    582          static int32u getCurrentOffset(void)
    583          {
   \                     getCurrentOffset: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
    584            int32u offset;
    585            int8u dataType = ZCL_INT32U_ATTRIBUTE_TYPE;
   \   00000004   0x2023             MOVS     R0,#+35
   \   00000006   0xF88D 0x000C      STRB     R0,[SP, #+12]
    586            emberAfReadAttribute(myEndpoint, 
    587                                 ZCL_OTA_BOOTLOAD_CLUSTER_ID,
    588                                 ZCL_FILE_OFFSET_ATTRIBUTE_ID,
    589                                 CLUSTER_MASK_CLIENT,
    590                                 (int8u*)&offset,
    591                                 4,
    592                                 &dataType);
   \   0000000A   0x2380             MOVS     R3,#+128
   \   0000000C   0xA803             ADD      R0,SP,#+12
   \   0000000E   0x9002             STR      R0,[SP, #+8]
   \   00000010   0x2201             MOVS     R2,#+1
   \   00000012   0x2004             MOVS     R0,#+4
   \   00000014   0x9001             STR      R0,[SP, #+4]
   \   00000016   0x2119             MOVS     R1,#+25
   \   00000018   0xA804             ADD      R0,SP,#+16
   \   0000001A   0x9000             STR      R0,[SP, #+0]
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable139_1
   \   00000020   0x7840             LDRB     R0,[R0, #+1]
   \   00000022   0x.... 0x....      BL       emberAfReadAttribute
    593            return offset;
   \   00000026   0x9804             LDR      R0,[SP, #+16]
   \   00000028   0xB005             ADD      SP,SP,#+20
   \   0000002A   0xBD00             POP      {PC}             ;; return
    594          }
    595          

   \                                 In section .text, align 2, keep-with-next
    596          static int32u updateCurrentOffset(int32u currentOffset)
    597          {
   \                     updateCurrentOffset: (+1)
   \   00000000   0xB501             PUSH     {R0,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
    598            emberAfWriteAttribute(myEndpoint,
    599                                  ZCL_OTA_BOOTLOAD_CLUSTER_ID, 
    600                                  ZCL_FILE_OFFSET_ATTRIBUTE_ID, 
    601                                  CLUSTER_MASK_CLIENT,
    602                                  (int8u*)&currentOffset,
    603                                  ZCL_INT32U_ATTRIBUTE_TYPE);
   \   00000004   0x2023             MOVS     R0,#+35
   \   00000006   0x9001             STR      R0,[SP, #+4]
   \   00000008   0x2380             MOVS     R3,#+128
   \   0000000A   0xA802             ADD      R0,SP,#+8
   \   0000000C   0x9000             STR      R0,[SP, #+0]
   \   0000000E   0x2201             MOVS     R2,#+1
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable139_1
   \   00000014   0x7840             LDRB     R0,[R0, #+1]
   \   00000016   0x2119             MOVS     R1,#+25
   \   00000018   0x.... 0x....      BL       emberAfWriteAttribute
    604            return currentOffset;
   \   0000001C   0x9802             LDR      R0,[SP, #+8]
   \   0000001E   0xBD0E             POP      {R1-R3,PC}       ;; return
    605          }
    606          

   \                                 In section .text, align 2, keep-with-next
    607          static void updateDownloadFileVersion(int32u version)
    608          {
    609          #if defined(ZCL_USING_OTA_BOOTLOAD_CLUSTER_DOWNLOADED_FILE_VERSION_ATTRIBUTE)
    610            emberAfWriteAttribute(myEndpoint,
    611                                  ZCL_OTA_BOOTLOAD_CLUSTER_ID, 
    612                                  ZCL_DOWNLOADED_FILE_VERSION_ATTRIBUTE_ID, 
    613                                  CLUSTER_MASK_CLIENT,
    614                                  (int8u*)(&version),
    615                                  ZCL_INT32U_ATTRIBUTE_TYPE);
    616          #endif
    617            currentDownloadFile.firmwareVersion = version;
   \                     updateDownloadFileVersion: (+1)
   \   00000000   0x.... 0x....      LDR.W    R1,??DataTable139_1
   \   00000004   0x60C8             STR      R0,[R1, #+12]
    618          }
   \   00000006   0x4770             BX       LR               ;; return
    619          
    620          // It is expected this is called when registration has successfully
    621          // completed.

   \                                 In section .text, align 2, keep-with-next
    622          void emberAfOtaClientStartCallback(void)
    623          {
   \                     emberAfOtaClientStartCallback: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    624            if (!isEepromAvailable()) 
   \   00000002   0x.... 0x....      BL       isEepromAvailable
   \   00000006   0xB148             CBZ.N    R0,??emberAfOtaClientStartCallback_0
    625            {
    626                return;  //GB ota not active if no external flash.
    627            }  
    628            
    629            // If we are already delaying we allow jumping immediately
    630            // to discovery and skipping the delay.  This benefits the
    631            // CLI as well as applications that might expect behavior
    632            // as in previous releases where discovery started as soon
    633            // as this API is called.
    634            if (currentBootloadState == BOOTLOAD_STATE_NONE
    635                || currentBootloadState == BOOTLOAD_STATE_DELAY) {
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable135
   \   0000000C   0x7800             LDRB     R0,[R0, #+0]
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xBF12             ITEE     NE 
   \   00000012   0x2801             CMPNE    R0,#+1
    636              startServerDiscovery();
   \   00000014   0xE8BD 0x4001      POPEQ    {R0,LR}
   \   00000018   0x.... 0x....      BEQ.W    startServerDiscovery
    637            }
    638          }
   \                     ??emberAfOtaClientStartCallback_0: (+1)
   \   0000001C   0xBD01             POP      {R0,PC}          ;; return
    639          

   \                                 In section .text, align 2, keep-with-next
    640          void emAfOtaClientStop(void)
    641          {
   \                     emAfOtaClientStop: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    642            downloadAndVerifyFinish(EMBER_AF_OTA_CLIENT_ABORTED);
   \   00000002   0x.... 0x....      BL       ?Subroutine5
    643            recordUpgradeStatus(BOOTLOAD_STATE_NONE);
   \                     ??CrossCallReturnLabel_67: (+1)
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x.... 0x....      BL       recordUpgradeStatus
    644            waitingForResponse = FALSE;
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable135
   \   00000010   0x2100             MOVS     R1,#+0
   \   00000012   0x7101             STRB     R1,[R0, #+4]
    645          
    646            emberAfDeactivateClientTick(myEndpoint, ZCL_OTA_BOOTLOAD_CLUSTER_ID);
   \   00000014   0x2119             MOVS     R1,#+25
   \   00000016   0xE8BD 0x4004      POP      {R2,LR}
   \   0000001A   0x7840             LDRB     R0,[R0, #+1]
   \   0000001C   0x.... 0x....      B.W      emberAfDeactivateClientTick
    647          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine5: (+1)
   \   00000000   0x2004             MOVS     R0,#+4
   \   00000002   0x....             B.N      downloadAndVerifyFinish
    648          

   \                                 In section .text, align 2, keep-with-next
    649          void emAfOtaClientPrintState(void)
    650          {
   \                     emAfOtaClientPrintState: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    651            otaPrintln(" State:   %p",
    652                       bootloadStateNames[currentBootloadState]);
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable135
   \   00000006   0x.... 0x....      ADR.W    R1,?_13
   \   0000000A   0x7820             LDRB     R0,[R4, #+0]
   \   0000000C   0xEB04 0x0080      ADD      R0,R4,R0, LSL #+2
   \   00000010   0x.... 0x....      BL       ?Subroutine2
    653            otaPrintln(" Waiting for response: %p",
    654                       (waitingForResponse ? "yes" : "no"));
   \                     ??CrossCallReturnLabel_46: (+1)
   \   00000014   0x7920             LDRB     R0,[R4, #+4]
   \   00000016   0x.... 0x....      ADR.W    R1,?_14
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xBF14             ITE      NE 
   \   0000001E   0x....             ADRNE.N  R2,??DataTable128  ;; "yes"
   \   00000020   0x....             ADREQ.N  R2,??DataTable128_1  ;; 0x6E, 0x6F, 0x00, 0x00
   \   00000022   0x.... 0x....      BL       ??Subroutine2_0
    655            if (waitingForResponse) {
   \                     ??CrossCallReturnLabel_43: (+1)
   \   00000026   0x7920             LDRB     R0,[R4, #+4]
   \   00000028   0xB120             CBZ.N    R0,??CrossCallReturnLabel_42
    656              otaPrintln(" Next Event Timer: %d ms", nextEventTimer);
   \   0000002A   0x6CE2             LDR      R2,[R4, #+76]
   \   0000002C   0x.... 0x....      ADR.W    R1,?_17
   \   00000030   0x.... 0x....      BL       ??Subroutine2_0
    657            }
    658            otaPrintln(" Current Download Offset: 0x%4X (%d%%)", 
    659                       getCurrentOffset(),
    660                       emAfCalculatePercentage(getCurrentOffset(),
    661                                               totalImageSize));
   \                     ??CrossCallReturnLabel_42: (+1)
   \   00000034   0x.... 0x....      BL       getCurrentOffset
   \   00000038   0x6CA1             LDR      R1,[R4, #+72]
   \   0000003A   0x.... 0x....      BL       emAfCalculatePercentage
   \   0000003E   0x4604             MOV      R4,R0
   \   00000040   0x.... 0x....      BL       getCurrentOffset
   \   00000044   0x4623             MOV      R3,R4
   \   00000046   0xE8BD 0x4010      POP      {R4,LR}
   \   0000004A   0x4602             MOV      R2,R0
   \   0000004C   0x.... 0x....      ADR.W    R1,?_18
   \   00000050   0x2040             MOVS     R0,#+64
   \   00000052   0x.... 0x....      B.W      emberAfPrintln
    662          }
    663          

   \                                 In section .text, align 2, keep-with-next
    664          static void recordServerEuiAndGoToNextState(EmberEUI64 eui64)
    665          {
   \                     recordServerEuiAndGoToNextState: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
    666            emberAfWriteAttribute(myEndpoint,
    667                                  ZCL_OTA_BOOTLOAD_CLUSTER_ID, 
    668                                  ZCL_UPGRADE_SERVER_ID_ATTRIBUTE_ID, 
    669                                  CLUSTER_MASK_CLIENT,
    670                                  eui64,
    671                                  ZCL_IEEE_ADDRESS_ATTRIBUTE_TYPE);
   \   00000004   0x21F0             MOVS     R1,#+240
   \   00000006   0x9000             STR      R0,[SP, #+0]
   \   00000008   0x9101             STR      R1,[SP, #+4]
   \   0000000A   0x2380             MOVS     R3,#+128
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable135
   \   00000010   0x7840             LDRB     R0,[R0, #+1]
   \   00000012   0x2200             MOVS     R2,#+0
   \   00000014   0x2119             MOVS     R1,#+25
   \   00000016   0x.... 0x....      BL       emberAfWriteAttribute
    672            otaPrintln("OTA Cluster: setting IEEE address of OTA cluster");
   \   0000001A   0x.... 0x....      ADR.W    R1,?_19
   \   0000001E   0x.... 0x....      BL       ?Subroutine1
    673            getPartnerLinkKey();;
   \                     ??CrossCallReturnLabel_20: (+1)
   \   00000022   0xE8BD 0x4007      POP      {R0-R2,LR}
   \   00000026   0x....             B.N      determineNextState
    674          }
    675          

   \                                 In section .text, align 2, keep-with-next
    676          void emAfOtaClientServiceDiscoveryCallback(const EmberAfServiceDiscoveryResult *result)
    677          {
   \                     emAfOtaClientServiceDiscoveryCallback: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
    678            // We only look at the first result.  How multiple OTA servers are handled
    679            // has not been spelled out by the spec yet.
    680            const EmberAfEndpointList* epList =
    681              (const EmberAfEndpointList*)result->responseData;
   \   00000002   0x6881             LDR      R1,[R0, #+8]
    682           
    683            waitingForResponse = FALSE;
   \   00000004   0x.... 0x....      LDR.W    R4,??DataTable135
   \   00000008   0x2200             MOVS     R2,#+0
   \   0000000A   0x7122             STRB     R2,[R4, #+4]
    684          
    685            // Since the OTA cluster only uses broadcast discoveries for Match descriptor
    686            // and Unicast discoveries for the IEEE, we can differentiate the request
    687            // type based on the result.
    688          
    689            if (result->status == EMBER_AF_BROADCAST_SERVICE_DISCOVERY_COMPLETE) {
   \   0000000C   0x7802             LDRB     R2,[R0, #+0]
   \   0000000E   0xB9E2             CBNZ.N   R2,??emAfOtaClientServiceDiscoveryCallback_0
    690              if (serverEndpoint == UNDEFINED_ENDPOINT) {
   \   00000010   0x78A0             LDRB     R0,[R4, #+2]
   \   00000012   0x28FF             CMP      R0,#+255
   \   00000014   0xD102             BNE.N    ??emAfOtaClientServiceDiscoveryCallback_1
    691                // We did not find an OTA server yet, so wait a while before trying
    692                // again.  Hopefully one will appear on the network later.
    693                restartServerDiscoveryAfterDelay();
   \   00000016   0x.... 0x....      BL       restartServerDiscoveryAfterDelay
   \   0000001A   0xBD13             POP      {R0,R1,R4,PC}
    694              } else {
    695                euiLookup();
   \                     ??emAfOtaClientServiceDiscoveryCallback_1: (+1)
   \   0000001C   0x2003             MOVS     R0,#+3
   \   0000001E   0x.... 0x....      BL       recordUpgradeStatus
   \   00000022   0x8B20             LDRH     R0,[R4, #+24]
   \   00000024   0xA900             ADD      R1,SP,#+0
   \   00000026   0x.... 0x....      BL       emberLookupEui64ByNodeId
   \   0000002A   0xB318             CBZ.N    R0,??emAfOtaClientServiceDiscoveryCallback_2
   \   0000002C   0x8B20             LDRH     R0,[R4, #+24]
   \   0000002E   0x.... 0x....      LDR.W    R1,??DataTable141
   \   00000032   0x.... 0x....      BL       emberAfFindIeeeAddress
   \   00000036   0xB110             CBZ.N    R0,??emAfOtaClientServiceDiscoveryCallback_3
   \   00000038   0x.... 0x....      BL       euiLookupErrorOccurred
   \   0000003C   0xBD13             POP      {R0,R1,R4,PC}
   \                     ??emAfOtaClientServiceDiscoveryCallback_3: (+1)
   \   0000003E   0x2003             MOVS     R0,#+3
   \   00000040   0x.... 0x....      BL       recordUpgradeStatus
   \   00000044   0x2001             MOVS     R0,#+1
   \   00000046   0x7120             STRB     R0,[R4, #+4]
   \   00000048   0xE014             B.N      ??emAfOtaClientServiceDiscoveryCallback_2
    696              }
    697              return;
    698            } else if (result->status
    699                       == EMBER_AF_BROADCAST_SERVICE_DISCOVERY_RESPONSE_RECEIVED) {
   \                     ??emAfOtaClientServiceDiscoveryCallback_0: (+1)
   \   0000004A   0x2A01             CMP      R2,#+1
   \   0000004C   0xD10B             BNE.N    ??emAfOtaClientServiceDiscoveryCallback_4
    700              if (epList->count > 0) {
   \   0000004E   0x780A             LDRB     R2,[R1, #+0]
   \   00000050   0xB1B2             CBZ.N    R2,??emAfOtaClientServiceDiscoveryCallback_5
    701                serverEndpoint = epList->list[0];
   \   00000052   0x6849             LDR      R1,[R1, #+4]
   \   00000054   0x7809             LDRB     R1,[R1, #+0]
   \   00000056   0x70A1             STRB     R1,[R4, #+2]
    702                serverNodeId = result->matchAddress;
   \   00000058   0x8882             LDRH     R2,[R0, #+4]
    703                otaPrintln("Setting OTA Server to 0x%2X", serverNodeId);
   \   0000005A   0x.... 0x....      ADR.W    R1,?_20
   \   0000005E   0x8322             STRH     R2,[R4, #+24]
   \   00000060   0x.... 0x....      BL       ??Subroutine2_0
    704              }
    705          
    706            } else if (result->status
   \                     ??CrossCallReturnLabel_41: (+1)
   \   00000064   0xBD13             POP      {R0,R1,R4,PC}
    707                       == EMBER_AF_UNICAST_SERVICE_DISCOVERY_COMPLETE_WITH_RESPONSE) {
   \                     ??emAfOtaClientServiceDiscoveryCallback_4: (+1)
   \   00000066   0x2A03             CMP      R2,#+3
   \   00000068   0xD108             BNE.N    ??emAfOtaClientServiceDiscoveryCallback_6
    708              // Assumed IEEE address request
    709              EmberEUI64 eui64;
    710              MEMCOPY(eui64, result->responseData, EUI64_SIZE);
   \   0000006A   0x6881             LDR      R1,[R0, #+8]
   \   0000006C   0x2208             MOVS     R2,#+8
   \   0000006E   0xA800             ADD      R0,SP,#+0
   \   00000070   0x.... 0x....      BL       halCommonMemCopy
    711              recordServerEuiAndGoToNextState(eui64);
   \                     ??emAfOtaClientServiceDiscoveryCallback_2: (+1)
   \   00000074   0xA800             ADD      R0,SP,#+0
   \   00000076   0x.... 0x....      BL       recordServerEuiAndGoToNextState
   \   0000007A   0xBD13             POP      {R0,R1,R4,PC}
    712          
    713            } else { // Assume Unicast timeout of IEEE address request
    714              euiLookupErrorOccurred();
   \                     ??emAfOtaClientServiceDiscoveryCallback_6: (+1)
   \   0000007C   0x.... 0x....      BL       euiLookupErrorOccurred
    715            }
    716          }
   \                     ??emAfOtaClientServiceDiscoveryCallback_5: (+1)
   \   00000080   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    717          

   \                                 In section .text, align 2, keep-with-next
    718          static void startServerDiscovery(void)
    719          {
   \                     startServerDiscovery: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
    720            EmberStatus status;
    721            EmberAfProfileId appProfile;
    722          
    723            recordUpgradeStatus(BOOTLOAD_STATE_DISCOVER_SERVER);
   \   00000004   0x2002             MOVS     R0,#+2
   \   00000006   0x.... 0x....      BL       recordUpgradeStatus
    724            serverEndpoint = UNDEFINED_ENDPOINT;
   \   0000000A   0x.... 0x....      LDR.W    R4,??DataTable135
   \   0000000E   0x20FF             MOVS     R0,#+255
   \   00000010   0x70A0             STRB     R0,[R4, #+2]
    725            
    726            // Figure out the right app profile ID based on the endpoint descriptor
    727            appProfile = emberAfProfileIdFromIndex( 
    728                           emberAfIndexFromEndpoint(myEndpoint) );
   \   00000012   0x7860             LDRB     R0,[R4, #+1]
   \   00000014   0x.... 0x....      BL       emberAfIndexFromEndpoint
    729          
    730            status = 
    731              emberAfFindDevicesByProfileAndCluster(
    732                EMBER_RX_ON_WHEN_IDLE_BROADCAST_ADDRESS,
    733                appProfile,
    734                ZCL_OTA_BOOTLOAD_CLUSTER_ID,
    735                EMBER_AF_SERVER_CLUSTER_DISCOVERY,
    736                emAfOtaClientServiceDiscoveryCallback);
    737          
    738            if (status != EMBER_SUCCESS) {
   \   00000018   0x.... 0x....      LDR.W    R1,??DataTable141
   \   0000001C   0x9100             STR      R1,[SP, #+0]
   \   0000001E   0x2301             MOVS     R3,#+1
   \   00000020   0x.... 0x....      LDR.W    R1,??DataTable141_1
   \   00000024   0xEB01 0x1000      ADD      R0,R1,R0, LSL #+4
   \   00000028   0x2219             MOVS     R2,#+25
   \   0000002A   0x8841             LDRH     R1,[R0, #+2]
   \   0000002C   0xF64F 0x70FD      MOVW     R0,#+65533
   \   00000030   0x.... 0x....      BL       emberAfFindDevicesByProfileAndCluster
   \   00000034   0xB128             CBZ.N    R0,??startServerDiscovery_0
    739              otaPrintln("Failed to initiate service discovery.");
   \   00000036   0x.... 0x....      ADR.W    R1,?_21
   \   0000003A   0x.... 0x....      BL       ?Subroutine1
    740              waitingForResponse = FALSE;
   \                     ??CrossCallReturnLabel_19: (+1)
   \   0000003E   0x2000             MOVS     R0,#+0
   \   00000040   0xE000             B.N      ??startServerDiscovery_1
    741            } else {
    742              waitingForResponse = TRUE;
   \                     ??startServerDiscovery_0: (+1)
   \   00000042   0x2001             MOVS     R0,#+1
   \                     ??startServerDiscovery_1: (+1)
   \   00000044   0x7120             STRB     R0,[R4, #+4]
    743            }
    744          
    745            errors = 0;
   \   00000046   0x2000             MOVS     R0,#+0
   \   00000048   0x70E0             STRB     R0,[R4, #+3]
    746            setTimer(EMBER_AF_OTA_SERVER_DISCOVERY_DELAY_MS);
   \   0000004A   0xE8BD 0x4016      POP      {R1,R2,R4,LR}
   \   0000004E   0x.... 0x....      LDR.W    R0,??DataTable139  ;; 0x927c0
   \   00000052   0x....             B.N      setTimer
    747          }
    748          

   \                                 In section .text, align 2, keep-with-next
    749          static void euiLookupErrorOccurred(void)
    750          {
    751            // The timer has expired and we don't know the server's EUI. 
    752            // We treat the server discovery + EUI lookup as a single operation
    753            // and if either fails we delay a long time to allow any potential network
    754            // issues to be resolved.
    755            waitingForResponse = FALSE;
   \                     euiLookupErrorOccurred: (+1)
   \   00000000   0x.... 0x....      LDR.W    R1,??DataTable135
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x7108             STRB     R0,[R1, #+4]
    756            restartServerDiscoveryAfterDelay();
   \   00000008   0x....             B.N      restartServerDiscoveryAfterDelay
    757            return;
    758          }
    759          
    760          static void euiLookup(void)
    761          {
    762            EmberEUI64 eui64;
    763            EmberStatus status;
    764          
    765            recordUpgradeStatus(BOOTLOAD_STATE_GET_SERVER_EUI);
    766            status = emberLookupEui64ByNodeId(serverNodeId, eui64);
    767          
    768            if (status != EMBER_SUCCESS) { 
    769              // New discovery of the Server's EUI
    770              status = emberAfFindIeeeAddress(serverNodeId,
    771                                              emAfOtaClientServiceDiscoveryCallback);
    772              if (status != EMBER_SUCCESS) {
    773                // Discovery was never initiated.
    774                euiLookupErrorOccurred();
    775                return;
    776              }
    777              recordUpgradeStatus(BOOTLOAD_STATE_GET_SERVER_EUI);
    778              waitingForResponse = TRUE;
    779          
    780            } // Else
    781              // We happen to know the server's EUI without discovery, keep going.
    782          
    783            recordServerEuiAndGoToNextState(eui64);
    784          }
    785          

   \                                 In section .text, align 2, keep-with-next
    786          static void putImageInfoInMessage(void)
    787          {
   \                     putImageInfoInMessage: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    788            emberAfPutInt16uInResp(currentDownloadFile.manufacturerId);
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable139_1
   \   00000006   0x8920             LDRH     R0,[R4, #+8]
   \   00000008   0x.... 0x....      BL       emberAfPutInt16uInResp
    789            emberAfPutInt16uInResp(currentDownloadFile.imageTypeId);
   \   0000000C   0x8960             LDRH     R0,[R4, #+10]
   \   0000000E   0x.... 0x....      BL       emberAfPutInt16uInResp
    790            emberAfPutInt32uInResp(currentDownloadFile.firmwareVersion);
   \   00000012   0x68E0             LDR      R0,[R4, #+12]
   \   00000014   0xE8BD 0x4010      POP      {R4,LR}
   \   00000018   0x.... 0x....      B.W      emberAfPutInt32uInResp
    791          }
    792          
    793          static BootloadState determineDownloadFileStatus(void)
    794          {
    795            int32u currentOffset;
    796            EmberAfOtaStorageStatus 
    797              status = emberAfOtaStorageCheckTempDataCallback(&currentOffset, 
    798                                                              &totalImageSize,
    799                                                              &currentDownloadFile);
    800          
    801            if (status == EMBER_AF_OTA_STORAGE_PARTIAL_FILE_FOUND) {
    802              otaPrintFlush();
    803              otaPrintln("Partial file download found, continuing from offset 0x%4X",
    804                         currentOffset);
    805              otaPrintFlush();
    806              updateCurrentOffset(currentOffset);
    807              updateDownloadFileVersion(currentDownloadFile.firmwareVersion);
    808              emAfPrintPercentageSetStartAndEnd(0, totalImageSize);
    809              return BOOTLOAD_STATE_DOWNLOAD;
    810            } else if (status == EMBER_AF_OTA_STORAGE_SUCCESS) {
    811              EmberAfOtaImageId currentVersionInfo;
    812              otaPrintln("Found fully downloaded file in storage (version 0x%4X).", 
    813                         currentDownloadFile.firmwareVersion);
    814                         
    815              emberAfOtaClientVersionInfoCallback(&currentVersionInfo, NULL);
    816          
    817              //MN EDITED OUT after Gary's email
    818          /* 
    819             EmberAfOtaImageId oldImageId = emberAfOtaStorageSearchCallback(currentDownloadFile.manufacturerId,
    820                                                                             currentDownloadFile.imageTypeId,
    821                                                                             (hardwareVersion == 0xFFFF
    822                                                                              ? NULL
    823                                                                              : &hardwareVersion));
    824          
    825              if (emberAfIsOtaImageIdValid(&oldImageId)) { 
    826                // Wipe out any existing file matching the same values as the one we 
    827                // are going to download.
    828          
    829                emberAfOtaStorageDeleteImageCallback(&oldImageId);
    830              }
    831              */
    832              
    833              
    834              if (currentVersionInfo.firmwareVersion != currentDownloadFile.firmwareVersion) {
    835                otaPrintln("Found file in storage with different version (0x%4X) than current version (0x%4X)",
    836                           currentDownloadFile.firmwareVersion,
    837                           currentVersionInfo.firmwareVersion);
    838                return BOOTLOAD_STATE_VERIFY_IMAGE;
    839              } else {
    840                otaPrintln("File in storage is same as current running version (0x%4X)",
    841                           currentVersionInfo.firmwareVersion);
    842                emberAfOtaStorageClearTempDataCallback();  // erase eeprom.
    843              }
    844            } else {
    845              otaPrintln("No image found in storage.");    
    846            }
    847          
    848            emberAfAppFlush();
    849          
    850            return BOOTLOAD_STATE_QUERY_NEXT_IMAGE;
    851          }
    852          

   \                                 In section .text, align 2, keep-with-next
    853          static void determineNextState(void)
    854          {
   \                     determineNextState: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
    855            currentBootloadState = determineDownloadFileStatus();
   \   00000004   0x.... 0x....      LDR.W    R4,??DataTable135
   \   00000008   0xF104 0x0208      ADD      R2,R4,#+8
   \   0000000C   0xF104 0x0148      ADD      R1,R4,#+72
   \   00000010   0xA800             ADD      R0,SP,#+0
   \   00000012   0x.... 0x....      BL       emberAfOtaStorageCheckTempDataCallback
   \   00000016   0x2803             CMP      R0,#+3
   \   00000018   0xD110             BNE.N    ??determineNextState_0
   \   0000001A   0x9A00             LDR      R2,[SP, #+0]
   \   0000001C   0x.... 0x....      ADR.W    R1,?_22
   \   00000020   0x.... 0x....      BL       ??Subroutine2_0
   \                     ??CrossCallReturnLabel_40: (+1)
   \   00000024   0x9800             LDR      R0,[SP, #+0]
   \   00000026   0x.... 0x....      BL       updateCurrentOffset
   \   0000002A   0x68E0             LDR      R0,[R4, #+12]
   \   0000002C   0x.... 0x....      BL       updateDownloadFileVersion
   \   00000030   0x6CA1             LDR      R1,[R4, #+72]
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0x.... 0x....      BL       emAfPrintPercentageSetStartAndEnd
   \   00000038   0x2006             MOVS     R0,#+6
   \   0000003A   0xE020             B.N      ??determineNextState_1
   \                     ??determineNextState_0: (+1)
   \   0000003C   0xB9D0             CBNZ.N   R0,??determineNextState_2
   \   0000003E   0x68E2             LDR      R2,[R4, #+12]
   \   00000040   0x.... 0x....      ADR.W    R1,?_23
   \   00000044   0x.... 0x....      BL       ??Subroutine2_0
   \                     ??CrossCallReturnLabel_39: (+1)
   \   00000048   0x2100             MOVS     R1,#+0
   \   0000004A   0xA801             ADD      R0,SP,#+4
   \   0000004C   0x.... 0x....      BL       emberAfOtaClientVersionInfoCallback
   \   00000050   0x68E2             LDR      R2,[R4, #+12]
   \   00000052   0x9B02             LDR      R3,[SP, #+8]
   \   00000054   0x4293             CMP      R3,R2
   \   00000056   0xD005             BEQ.N    ??determineNextState_3
   \   00000058   0x.... 0x....      ADR.W    R1,?_24
   \   0000005C   0x.... 0x....      BL       ?Subroutine3
   \                     ??CrossCallReturnLabel_57: (+1)
   \   00000060   0x2007             MOVS     R0,#+7
   \   00000062   0xE00C             B.N      ??determineNextState_1
   \                     ??determineNextState_3: (+1)
   \   00000064   0x461A             MOV      R2,R3
   \   00000066   0x.... 0x....      ADR.W    R1,?_25
   \   0000006A   0x.... 0x....      BL       ??Subroutine2_0
   \                     ??CrossCallReturnLabel_38: (+1)
   \   0000006E   0x.... 0x....      BL       emberAfOtaStorageClearTempDataCallback
   \   00000072   0xE003             B.N      ??CrossCallReturnLabel_18
   \                     ??determineNextState_2: (+1)
   \   00000074   0x.... 0x....      ADR.W    R1,?_26
   \   00000078   0x.... 0x....      BL       ?Subroutine1
   \                     ??CrossCallReturnLabel_18: (+1)
   \   0000007C   0x2005             MOVS     R0,#+5
   \                     ??determineNextState_1: (+1)
   \   0000007E   0x7020             STRB     R0,[R4, #+0]
    856          
    857            switch (currentBootloadState) {
   \   00000080   0x7820             LDRB     R0,[R4, #+0]
   \   00000082   0x2805             CMP      R0,#+5
   \   00000084   0xD004             BEQ.N    ??determineNextState_4
   \   00000086   0xD31C             BCC.N    ??determineNextState_5
   \   00000088   0x2807             CMP      R0,#+7
   \   0000008A   0xD017             BEQ.N    ??determineNextState_6
   \   0000008C   0xD305             BCC.N    ??determineNextState_7
   \   0000008E   0xE018             B.N      ??determineNextState_5
    858            case BOOTLOAD_STATE_QUERY_NEXT_IMAGE:
    859              queryNextImage(SEND_QUERY_NOW,
    860                             FALSE);   // query error?
   \                     ??determineNextState_4: (+1)
   \   00000090   0x2100             MOVS     R1,#+0
   \   00000092   0x2001             MOVS     R0,#+1
   \   00000094   0x.... 0x....      BL       queryNextImage
    861              break;
   \   00000098   0xE013             B.N      ??determineNextState_5
    862            case BOOTLOAD_STATE_DOWNLOAD: 
    863              {
    864                EmberAfOtaStorageStatus status = emberAfOtaStorageDriverPrepareToResumeDownloadCallback();
   \                     ??determineNextState_7: (+1)
   \   0000009A   0x.... 0x....      BL       emberAfOtaStorageDriverPrepareToResumeDownloadCallback
   \   0000009E   0x4605             MOV      R5,R0
    865                errors = 0;
   \   000000A0   0x2000             MOVS     R0,#+0
   \   000000A2   0x70E0             STRB     R0,[R4, #+3]
    866                recordUpgradeStatus(BOOTLOAD_STATE_DOWNLOAD);
   \   000000A4   0x2006             MOVS     R0,#+6
   \   000000A6   0x.... 0x....      BL       recordUpgradeStatus
    867                if (status == EMBER_AF_OTA_STORAGE_SUCCESS) {
   \   000000AA   0xB915             CBNZ.N   R5,??determineNextState_8
    868                  continueImageDownload();
   \   000000AC   0x.... 0x....      BL       continueImageDownload
   \   000000B0   0xE007             B.N      ??determineNextState_5
    869                } else if (status != EMBER_AF_OTA_STORAGE_OPERATION_IN_PROGRESS) {
   \                     ??determineNextState_8: (+1)
   \   000000B2   0x2D04             CMP      R5,#+4
   \   000000B4   0xD005             BEQ.N    ??determineNextState_5
    870                  downloadAndVerifyFinish(EMBER_AF_OTA_CLIENT_ABORTED);
   \   000000B6   0x.... 0x....      BL       ?Subroutine5
    871          
    872                } // For operation-in-progress we fall-through and wait for the callback 
    873                  // later.
    874              }
   \                     ??CrossCallReturnLabel_66: (+1)
   \   000000BA   0xE002             B.N      ??determineNextState_5
    875              break;
    876            case BOOTLOAD_STATE_VERIFY_IMAGE:
    877              continueImageVerification(EMBER_AF_IMAGE_UNKNOWN);
   \                     ??determineNextState_6: (+1)
   \   000000BC   0x2005             MOVS     R0,#+5
   \   000000BE   0x.... 0x....      BL       continueImageVerification
    878              break;
    879            case BOOTLOAD_STATE_WAITING_FOR_UPGRADE_MESSAGE:
    880              askServerToRunUpgrade(START_NEW_TIMER);
    881              break;
    882            default:
    883              // Do nothing.  No other states should reach here.
    884              break;
    885            }
    886          }
   \                     ??determineNextState_5: (+1)
   \   000000C2   0xB005             ADD      SP,SP,#+20
   \   000000C4   0xBD30             POP      {R4,R5,PC}       ;; return
    887          

   \                                 In section .text, align 2, keep-with-next
    888          static void recordUpgradeStatus(BootloadState state)
    889          {
   \                     recordUpgradeStatus: (+1)
   \   00000000   0xB53E             PUSH     {R1-R5,LR}
    890            int8u upgradeStatus = bootloadStateToExternalState[state];
   \   00000002   0x.... 0x....      ADR.W    R1,bootloadStateToExternalState
    891            if (currentBootloadState != state) {
   \   00000006   0x.... 0x....      LDR.W    R5,??DataTable135
   \   0000000A   0x5C41             LDRB     R1,[R0, R1]
   \   0000000C   0xF88D 0x1008      STRB     R1,[SP, #+8]
   \   00000010   0x4604             MOV      R4,R0
   \   00000012   0x7829             LDRB     R1,[R5, #+0]
   \   00000014   0x42A1             CMP      R1,R4
   \   00000016   0xD005             BEQ.N    ??CrossCallReturnLabel_45
    892              emberAfCoreFlush();
    893              otaPrintln("Bootload state: %p", 
    894                         bootloadStateNames[state]);
   \   00000018   0xEB05 0x0080      ADD      R0,R5,R0, LSL #+2
   \   0000001C   0x.... 0x....      ADR.W    R1,?_27
   \   00000020   0x.... 0x....      BL       ?Subroutine2
    895              emberAfCoreFlush();
    896            }
    897            currentBootloadState = state;
    898          
    899            emberAfWriteAttribute(myEndpoint,
    900                                  ZCL_OTA_BOOTLOAD_CLUSTER_ID, 
    901                                  ZCL_IMAGE_UPGRADE_STATUS_ATTRIBUTE_ID, 
    902                                  CLUSTER_MASK_CLIENT,
    903                                  (int8u*)&upgradeStatus,
    904                                  ZCL_ENUM8_ATTRIBUTE_TYPE);
   \                     ??CrossCallReturnLabel_45: (+1)
   \   00000024   0x2030             MOVS     R0,#+48
   \   00000026   0x9001             STR      R0,[SP, #+4]
   \   00000028   0x702C             STRB     R4,[R5, #+0]
   \   0000002A   0xA802             ADD      R0,SP,#+8
   \   0000002C   0x9000             STR      R0,[SP, #+0]
   \   0000002E   0x2380             MOVS     R3,#+128
   \   00000030   0x7868             LDRB     R0,[R5, #+1]
   \   00000032   0x2206             MOVS     R2,#+6
   \   00000034   0x2119             MOVS     R1,#+25
   \   00000036   0x.... 0x....      BL       emberAfWriteAttribute
    905          }
   \   0000003A   0xBD37             POP      {R0-R2,R4,R5,PC}  ;; return
    906          

   \                                 In section .text, align 4, keep-with-next
    907          static EmberAfStatus commandParse(boolean defaultResponse,
    908                                            EmberAfClusterCommand* message)
    909          {
   \                     commandParse: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x460D             MOV      R5,R1
   \   00000004   0xB082             SUB      SP,SP,#+8
    910            int8u commandId = (message->buffer[(ZCL_COMMAND_ID_INDEX
    911                                                + (int8u)defaultResponse)]);
   \   00000006   0x68A9             LDR      R1,[R5, #+8]
   \   00000008   0x1841             ADDS     R1,R0,R1
   \   0000000A   0x788A             LDRB     R2,[R1, #+2]
    912            int8u index = EMBER_AF_ZCL_OVERHEAD;
    913          
    914            if (commandId > EM_AF_OTA_MAX_COMMAND_ID) {
   \   0000000C   0x2A0A             CMP      R2,#+10
   \   0000000E   0xDB05             BLT.N    ??commandParse_1
    915              otaPrintln("Bad OTA command: 0x%X", commandId);
   \   00000010   0x.... 0x....      ADR.W    R1,?_28
   \   00000014   0x.... 0x....      BL       ??Subroutine2_0
    916              return EMBER_ZCL_STATUS_INVALID_FIELD;
   \                     ??CrossCallReturnLabel_37: (+1)
   \   00000018   0x2085             MOVS     R0,#+133
   \   0000001A   0xBD76             POP      {R1,R2,R4-R6,PC}
    917            }
    918          
    919            if (!defaultResponse && message->bufLen < emAfOtaMinMessageLengths[commandId]) {
   \                     ??commandParse_1: (+1)
   \   0000001C   0xB968             CBNZ.N   R0,??commandParse_2
   \   0000001E   0x.... 0x....      LDR.W    R1,??DataTable145
   \   00000022   0x89AB             LDRH     R3,[R5, #+12]
   \   00000024   0x5C51             LDRB     R1,[R2, R1]
   \   00000026   0x428B             CMP      R3,R1
   \   00000028   0xD207             BCS.N    ??commandParse_2
    920              otaPrintln("OTA command 0x%X too short (len %d < min %d)",
    921                         commandId,
    922                         message->bufLen,
    923                         emAfOtaMinMessageLengths[commandId]);
   \   0000002A   0x9100             STR      R1,[SP, #+0]
   \   0000002C   0x2040             MOVS     R0,#+64
   \   0000002E   0x.... 0x....      ADR.W    R1,?_29
   \   00000032   0x.... 0x....      BL       emberAfPrintln
    924              return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
   \   00000036   0x2080             MOVS     R0,#+128
   \   00000038   0xBD76             POP      {R1,R2,R4-R6,PC}
    925            }
    926          
    927            if (message->source != serverNodeId) {
   \                     ??commandParse_2: (+1)
   \   0000003A   0x.... 0x....      LDR.W    R4,??DataTable135
   \   0000003E   0x88E9             LDRH     R1,[R5, #+6]
   \   00000040   0x8B23             LDRH     R3,[R4, #+24]
   \   00000042   0x4299             CMP      R1,R3
   \   00000044   0xD006             BEQ.N    ??commandParse_3
    928              otaPrintln("OTA command from unrecognized server 0x%2X.  My OTA server: 0x%2X",
    929                         message->source,
    930                         serverNodeId);
   \   00000046   0x460A             MOV      R2,R1
   \   00000048   0x.... 0x....      ADR.W    R1,?_30
   \   0000004C   0x.... 0x....      BL       ?Subroutine3
    931              return EMBER_ZCL_STATUS_NOT_AUTHORIZED;
   \                     ??CrossCallReturnLabel_56: (+1)
   \   00000050   0x207E             MOVS     R0,#+126
   \   00000052   0xBD76             POP      {R1,R2,R4-R6,PC}
    932            }
    933          
    934            // While not all command validation has taken place at this point, we 
    935            // flag that we are not waiting for a response anymore.  We want to make sure
    936            // that our sleepy can go to sleep if it wants.  The likelihood of an
    937            // invalid command followed by a properly formatted one is extremely low.
    938            // Either the server knows the correct format or it doesn't.
    939            waitingForResponse = FALSE;
   \                     ??commandParse_3: (+1)
   \   00000054   0x2100             MOVS     R1,#+0
   \   00000056   0x7121             STRB     R1,[R4, #+4]
    940          
    941            // NOTE:  In order to support Default Response, we list the CLIENT commands here
    942            // as well in case the server used that to respond.
    943            switch (commandId) {
   \   00000058   0x1CC3             ADDS     R3,R0,#+3
   \   0000005A   0x7826             LDRB     R6,[R4, #+0]
   \   0000005C   0x.... 0x....      ADR.W    R1,?_31
   \   00000060   0x2A07             CMP      R2,#+7
   \   00000062   0xD84C             BHI.N    ??commandParse_4
   \   00000064   0xE8DF 0xF002      TBB      [PC, R2]
   \                     ??commandParse_0:
   \   00000068   0x04 0x1E          DC8      0x4,0x1E,0x1E,0x2B
   \              0x1E 0x2B    
   \   0000006C   0x2B 0x2B          DC8      0x2B,0x2B,0x39,0x39
   \              0x39 0x39    
    944            case ZCL_IMAGE_NOTIFY_COMMAND_ID: {
    945              boolean broadcast = (EMBER_INCOMING_UNICAST != message->type);
   \                     ??commandParse_5: (+1)
   \   00000070   0x7928             LDRB     R0,[R5, #+4]
   \   00000072   0xB100             CBZ.N    R0,??commandParse_6
   \   00000074   0x2001             MOVS     R0,#+1
    946              if ((currentBootloadState != BOOTLOAD_STATE_QUERY_NEXT_IMAGE) && (currentBootloadState != BOOTLOAD_STATE_NONE)) {
   \                     ??commandParse_6: (+1)
   \   00000076   0x2E05             CMP      R6,#+5
   \   00000078   0xBF18             IT       NE 
   \   0000007A   0x2E00             CMPNE    R6,#+0
   \   0000007C   0xD00A             BEQ.N    ??commandParse_7
    947                otaPrintln("Got unexpected %p.  Ignored.", "Image notify");
   \   0000007E   0x.... 0x....      ADR.W    R2,?_32
   \   00000082   0x.... 0x....      BL       ??Subroutine2_0
    948                emberAfDebugPrint("Image Notify received %x\r\n", currentBootloadState);
   \                     ??CrossCallReturnLabel_36: (+1)
   \   00000086   0x7822             LDRB     R2,[R4, #+0]
   \   00000088   0x.... 0x....      ADR.W    R1,?_33
   \   0000008C   0x2002             MOVS     R0,#+2
   \   0000008E   0x.... 0x....      BL       emberAfPrint
    949                return EMBER_ZCL_STATUS_FAILURE;
   \   00000092   0xE028             B.N      ??CrossCallReturnLabel_35
    950              }
    951              return imageNotifyParse(broadcast, message->buffer, index, message->bufLen);
   \                     ??commandParse_7: (+1)
   \   00000094   0x68A9             LDR      R1,[R5, #+8]
   \   00000096   0x89AB             LDRH     R3,[R5, #+12]
   \   00000098   0xB002             ADD      SP,SP,#+8
   \   0000009A   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   0000009E   0xB2DB             UXTB     R3,R3
   \   000000A0   0x2203             MOVS     R2,#+3
   \   000000A2   0x....             B.N      imageNotifyParse
    952            }
    953            case ZCL_QUERY_NEXT_IMAGE_RESPONSE_COMMAND_ID: 
    954            case ZCL_QUERY_NEXT_IMAGE_REQUEST_COMMAND_ID: {
    955              if (currentBootloadState != BOOTLOAD_STATE_QUERY_NEXT_IMAGE) {
   \                     ??commandParse_8: (+1)
   \   000000A4   0x2E05             CMP      R6,#+5
   \   000000A6   0xBF18             IT       NE 
   \   000000A8   0x.... 0x....      ADRNE.W  R2,?_34
    956                otaPrintln("Got unexpected %p.  Ignored.",
    957                           "Query next image response");
   \   000000AC   0xD119             BNE.N    ??commandParse_9
    958                return EMBER_ZCL_STATUS_FAILURE;
    959              }
    960              return queryNextImageResponseParse(message->buffer, 
    961                                                 index + defaultResponse,
    962                                                 message->bufLen);
   \   000000AE   0x68A8             LDR      R0,[R5, #+8]
   \   000000B0   0x89AA             LDRH     R2,[R5, #+12]
   \   000000B2   0xB002             ADD      SP,SP,#+8
   \   000000B4   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   000000B8   0xB2D2             UXTB     R2,R2
   \   000000BA   0xB2D9             UXTB     R1,R3
   \   000000BC   0x....             B.N      queryNextImageResponseParse
    963            }
    964            case ZCL_IMAGE_PAGE_REQUEST_COMMAND_ID: 
    965            case ZCL_IMAGE_BLOCK_REQUEST_COMMAND_ID:
    966            case ZCL_IMAGE_BLOCK_RESPONSE_COMMAND_ID: {
    967              if (currentBootloadState != BOOTLOAD_STATE_DOWNLOAD) {
   \                     ??commandParse_10: (+1)
   \   000000BE   0x2E06             CMP      R6,#+6
   \   000000C0   0xBF18             IT       NE 
   \   000000C2   0x.... 0x....      ADRNE.W  R2,?_35
    968                otaPrintln("Got unexpected %p.  Ignored.",
    969                           "Image block response");
   \   000000C6   0xD10C             BNE.N    ??commandParse_9
    970                return EMBER_ZCL_STATUS_FAILURE;
    971              }
    972              return imageBlockResponseParse(message->buffer, 
    973                                             index + defaultResponse,
    974                                             message->bufLen);
   \   000000C8   0x68A8             LDR      R0,[R5, #+8]
   \   000000CA   0x89AA             LDRH     R2,[R5, #+12]
   \   000000CC   0xB002             ADD      SP,SP,#+8
   \   000000CE   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   000000D2   0xB2D2             UXTB     R2,R2
   \   000000D4   0xB2D9             UXTB     R1,R3
   \   000000D6   0x.... 0x....      B.W      imageBlockResponseParse
    975            }
    976            case ZCL_UPGRADE_END_RESPONSE_COMMAND_ID:
    977            case ZCL_UPGRADE_END_REQUEST_COMMAND_ID: {
    978              if (currentBootloadState != BOOTLOAD_STATE_WAITING_FOR_UPGRADE_MESSAGE) {
   \                     ??commandParse_11: (+1)
   \   000000DA   0x2E08             CMP      R6,#+8
   \   000000DC   0xD005             BEQ.N    ??commandParse_12
    979                otaPrintln("Got unexpected %p.  Ignored.",
    980                           "Upgrade end response");
   \   000000DE   0x.... 0x....      LDR.W    R2,??DataTable148
   \                     ??commandParse_9: (+1)
   \   000000E2   0x.... 0x....      BL       ??Subroutine2_0
    981                return EMBER_ZCL_STATUS_FAILURE;
   \                     ??CrossCallReturnLabel_35: (+1)
   \   000000E6   0x2001             MOVS     R0,#+1
   \   000000E8   0xBD76             POP      {R1,R2,R4-R6,PC}
    982              }
    983              return upgradeEndResponseParse((defaultResponse
    984                                              ? message->buffer[index]
    985                                              : EMBER_ZCL_STATUS_SUCCESS),
    986                                             message->buffer, 
    987                                             message->bufLen);
   \                     ??commandParse_12: (+1)
   \   000000EA   0x68A9             LDR      R1,[R5, #+8]
   \   000000EC   0xB100             CBZ.N    R0,??commandParse_13
   \   000000EE   0x78C8             LDRB     R0,[R1, #+3]
   \                     ??commandParse_13: (+1)
   \   000000F0   0xB002             ADD      SP,SP,#+8
   \   000000F2   0x89AA             LDRH     R2,[R5, #+12]
   \   000000F4   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   000000F8   0xB2D2             UXTB     R2,R2
   \   000000FA   0x.... 0x....      B.W      upgradeEndResponseParse
    988            }
    989            default:
    990              // Fall through. Already printed info about the bad command ID.
    991              break;
    992            }
    993            return EMBER_ZCL_STATUS_UNSUP_CLUSTER_COMMAND;
   \                     ??commandParse_4: (+1)
   \   000000FE   0x2081             MOVS     R0,#+129
   \   00000100   0xBD76             POP      {R1,R2,R4-R6,PC}  ;; return
    994          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine3: (+1)
   \   00000000   0x2040             MOVS     R0,#+64
   \   00000002   0x.... 0x....      B.W      emberAfPrintln
    995          

   \                                 In section .text, align 2, keep-with-next
    996          boolean emberAfOtaClientIncomingMessageRawCallback(EmberAfClusterCommand* message)
    997          {
   \                     emberAfOtaClientIncomingMessageRawCallback: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
    998            EmberAfStatus zclStatus = commandParse(FALSE,   // default response?
    999                                                   message); 
   \   00000004   0x4621             MOV      R1,R4
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x.... 0x....      BL       commandParse
   \   0000000C   0x0005             MOVS     R5,R0
   1000            if (zclStatus) {
   \   0000000E   0xD00C             BEQ.N    ??emberAfOtaClientIncomingMessageRawCallback_0
   1001              emberAfOtaBootloadClusterFlush();
   1002              emberAfOtaBootloadClusterPrintln("%p: failed parsing OTA cmd 0x%x", 
   1003                                               "Error",
   1004                                               message->commandId);
   \   00000010   0x7CE3             LDRB     R3,[R4, #+19]
   \   00000012   0x.... 0x....      ADR.W    R2,?_38
   \   00000016   0x.... 0x....      LDR.W    R1,??DataTable148_1
   \   0000001A   0x.... 0x....      BL       ?Subroutine3
   1005              if (message->type == EMBER_INCOMING_UNICAST) {
   \                     ??CrossCallReturnLabel_55: (+1)
   \   0000001E   0x7920             LDRB     R0,[R4, #+4]
   \   00000020   0xB120             CBZ.N    R0,??emberAfOtaClientIncomingMessageRawCallback_1
   1006                // We don't want to respond to invalid broadcast messages with
   1007                // a default response.
   1008                return EMBER_ZCL_STATUS_SUCCESS;
   1009              }
   1010              emberAfSendDefaultResponse(message, zclStatus);
   \   00000022   0x4629             MOV      R1,R5
   \   00000024   0x4620             MOV      R0,R4
   \   00000026   0x.... 0x....      BL       emberAfSendDefaultResponse
   1011            }
   1012          
   1013            return TRUE;
   \                     ??emberAfOtaClientIncomingMessageRawCallback_0: (+1)
   \   0000002A   0x2001             MOVS     R0,#+1
   \                     ??emberAfOtaClientIncomingMessageRawCallback_1: (+1)
   \   0000002C   0xBD32             POP      {R1,R4,R5,PC}    ;; return
   1014          }
   1015          

   \                                 In section .text, align 2, keep-with-next
   1016          void emberAfOtaBootloadClusterClientDefaultResponseCallback(int8u endpoint, 
   1017                                                                      int8u commandId, 
   1018                                                                      EmberAfStatus status)
   1019          {
   \                     emberAfOtaBootloadClusterClientDefaultResponseCallback: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   1020            EmberAfClusterCommand* command = emberAfCurrentCommand();
   \   00000002   0x.... 0x....      LDR.W    R3,??DataTable148_2
   \   00000006   0x681C             LDR      R4,[R3, #+0]
   1021          
   1022            if (endpoint != myEndpoint) {
   \   00000008   0x.... 0x....      LDR.W    R3,??DataTable135
   \   0000000C   0x785B             LDRB     R3,[R3, #+1]
   \   0000000E   0x4298             CMP      R0,R3
   \   00000010   0xD10B             BNE.N    ??emberAfOtaBootloadClusterClientDefaultRespons_0
   1023              return;
   1024            }
   1025            if (status == EMBER_ZCL_STATUS_SUCCESS) {
   \   00000012   0xB152             CBZ.N    R2,??emberAfOtaBootloadClusterClientDefaultRespons_0
   1026              // The only default response we care about is non-success values.
   1027              // That will mean the server failed processing for some reason,
   1028              // or wants to abort.  Successful responses will send a non-default
   1029              // response message.
   1030              return;
   1031            }
   1032            otaPrintln("OTA Default response to command ID 0x%X, status 0x%X",
   1033                       commandId,
   1034                       status);
   \   00000014   0x4613             MOV      R3,R2
   \   00000016   0x460A             MOV      R2,R1
   \   00000018   0x.... 0x....      LDR.W    R1,??DataTable148_3
   \   0000001C   0x.... 0x....      BL       ?Subroutine3
   1035          
   1036            commandParse(TRUE, // default response?
   1037                         command);
   \                     ??CrossCallReturnLabel_54: (+1)
   \   00000020   0x4621             MOV      R1,R4
   \   00000022   0xE8BD 0x4010      POP      {R4,LR}
   \   00000026   0x2001             MOVS     R0,#+1
   \   00000028   0x....             B.N      commandParse
   \                     ??emberAfOtaBootloadClusterClientDefaultRespons_0: (+1)
   \   0000002A   0xBD10             POP      {R4,PC}          ;; return
   1038          }
   1039          
   1040          // The buffer must point to the start of the image notify command,
   1041          // not the start of the ZCL frame.  It is assumed that the length
   1042          // of the buffer is minimum for image notify command.

   \                                 In section .text, align 2, keep-with-next
   1043          static EmberAfStatus imageNotifyParse(boolean broadcast, 
   1044                                                int8u* buffer, 
   1045                                                int8u index, 
   1046                                                int8u length)
   1047          {
   \                     imageNotifyParse: (+1)
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0x460C             MOV      R4,R1
   1048            int16u manufacturerId;
   1049            int16u imageTypeId;
   1050            EmberAfOtaImageId myId;
   1051            int8u payloadType = emberAfGetInt8u(buffer, index, length);
   1052            int8u queryJitter = emberAfGetInt8u(buffer, index + 1, length);
   \   00000006   0x1911             ADDS     R1,R2,R4
   \   00000008   0x5D15             LDRB     R5,[R2, R4]
   \   0000000A   0x784E             LDRB     R6,[R1, #+1]
   1053            index += 2;
   1054          
   1055            if (!broadcast) {
   \   0000000C   0x.... 0x....      LDR.W    R8,??DataTable148_4
   \   00000010   0xB088             SUB      SP,SP,#+32
   \   00000012   0x4699             MOV      R9,R3
   \   00000014   0x1C97             ADDS     R7,R2,#+2
   \   00000016   0xB960             CBNZ.N   R0,??imageNotifyParse_0
   1056              // Spec says to always respond to unicasts regardless of the parameters.
   1057              otaPrintln("%p unicast, querying",
   1058                         "Image notify command");
   \   00000018   0x4642             MOV      R2,R8
   \   0000001A   0x.... 0x....      LDR.W    R1,??DataTable148_5
   \   0000001E   0x.... 0x....      BL       ??Subroutine2_0
   1059              goto sendQuery;
   1060            }
   1061          
   1062            emberAfOtaClientVersionInfoCallback(&myId, NULL);
   1063          
   1064            // We assume that if the message is broadcast then our ZCL
   1065            // code will NOT send the default response.
   1066              
   1067            if (payloadType > IMAGE_NOTIFY_LAST_VALID_TYPE) {
   1068              otaPrintln("%p %p payload type 0x%X", 
   1069                         "Invalid",
   1070                         "Image notify command",
   1071                         payloadType);
   1072              return EMBER_ZCL_STATUS_SUCCESS;
   1073            }
   1074            if (queryJitter < 1 || queryJitter > 100) {
   1075              otaPrintln("%p %p: out of range jitter %d", 
   1076                         "Invalid",
   1077                         "Image notify command",
   1078                         queryJitter);
   1079              return EMBER_ZCL_STATUS_SUCCESS;
   1080            }
   1081            if (length != imageNotifyPayloadLengths[payloadType]) {
   1082              otaPrintln("%p %p: payload length doesn't match type 0x%X (%d < %d)",
   1083                         "Invalid",
   1084                         "Image notify command",
   1085                         payloadType,
   1086                         length,
   1087                         imageNotifyPayloadLengths[payloadType]);
   1088              // Although this truly is an error, we don't send a response because it could
   1089              // be a broadcast.
   1090              return EMBER_ZCL_STATUS_SUCCESS;
   1091            }
   1092            
   1093            if (payloadType >= IMAGE_NOTIFY_MANUFACTURER_ONLY_TYPE) {
   1094              manufacturerId = emberAfGetInt16u(buffer, index, length);
   1095              index += 2;
   1096              if (manufacturerId != myId.manufacturerId) {
   1097                otaPrintln("%p %p due to non-matching manufacturer ID",
   1098                           "Ignoring",
   1099                           "Image notify command");
   1100                return EMBER_ZCL_STATUS_SUCCESS;
   1101              }
   1102            }
   1103          
   1104            if (payloadType >= IMAGE_NOTIFY_MFG_AND_IMAGE_TYPE) {
   1105              imageTypeId = emberAfGetInt16u(buffer, index, length);
   1106              index += 2;
   1107              if (imageTypeId != myId.imageTypeId) {
   1108                otaPrintln("%p %p due to non-matching image type ID",
   1109                           "Ignoring",
   1110                           "Image notify command");
   1111                return EMBER_ZCL_STATUS_SUCCESS;
   1112              }
   1113            }
   1114          
   1115            if (payloadType >= IMAGE_NOTIFY_FULL_VERSION_TYPE) {
   1116              // Could add some additional checking about the minimum allowed version
   1117              // number, but it can still be caught after the download.
   1118              int32u version = emberAfGetInt32u(buffer, index, length);
   1119              index += 4;
   1120              if (version == myId.firmwareVersion) {
   1121                // Spec. says that if the firmware version matches, we should ignore.
   1122                // A matching version number would be a re-install, which can only
   1123                // be done via image notify by a unicast.  The server can force
   1124                // a mass upgrade or downgrade by sending out a different version
   1125                // than what devices have.
   1126                otaPrintln("%p %p due to matching firmware version",
   1127                           "Ignoring",
   1128                           "Image notify command");
   1129                return EMBER_ZCL_STATUS_SUCCESS;
   1130              }
   1131            }
   1132          
   1133            // Check QueryJitter value.  For QueryJitter value less than a 'must response'
   1134            // value (value of 100), we need to introduce jitter in our reply by picking
   1135            // a random number between 1 and 100.  We only send reply if the value picked
   1136            // is less than or equal to the QueryJitter value.
   1137            if (queryJitter < 100) {
   1138              int8u random = (((int8u)halCommonGetRandom())%100) + 1;
   1139              if(random > queryJitter) {
   1140                otaPrintln("%p %p, Rx'd Jitter (0x%x), Picked Jitter (0x%x)",
   1141                           "Ignoring",
   1142                           "Image notify command",
   1143                           queryJitter, 
   1144                           random);
   1145                return EMBER_ZCL_STATUS_SUCCESS;
   1146              }
   1147            }
   1148          
   1149           sendQuery:
   1150            // By saying "timeout reached" we want to indicate that a new query should kick off
   1151            // immediately.
   1152            queryNextImage(SEND_QUERY_NOW,
   1153                           FALSE);  // query error occurred?
   \                     ??CrossCallReturnLabel_34: (+1)
   \   00000022   0x2100             MOVS     R1,#+0
   \   00000024   0x2001             MOVS     R0,#+1
   \   00000026   0x.... 0x....      BL       queryNextImage
   1154            return EMBER_ZCL_STATUS_SUCCESS;
   \                     ??imageNotifyParse_1: (+1)
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0xB008             ADD      SP,SP,#+32
   \   0000002E   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
   \                     ??imageNotifyParse_0: (+1)
   \   00000032   0x2100             MOVS     R1,#+0
   \   00000034   0xA803             ADD      R0,SP,#+12
   \   00000036   0x.... 0x....      BL       emberAfOtaClientVersionInfoCallback
   \   0000003A   0x2D04             CMP      R5,#+4
   \   0000003C   0x.... 0x....      LDR.W    R2,??DataTable148_6
   \   00000040   0xDB06             BLT.N    ??imageNotifyParse_2
   \   00000042   0x9500             STR      R5,[SP, #+0]
   \   00000044   0x4643             MOV      R3,R8
   \   00000046   0x.... 0x....      LDR.W    R1,??DataTable148_7
   \                     ??imageNotifyParse_3: (+1)
   \   0000004A   0x.... 0x....      BL       ?Subroutine4
   \                     ??CrossCallReturnLabel_63: (+1)
   \   0000004E   0xE7EC             B.N      ??imageNotifyParse_1
   \                     ??imageNotifyParse_2: (+1)
   \   00000050   0xB10E             CBZ.N    R6,??imageNotifyParse_4
   \   00000052   0x2E65             CMP      R6,#+101
   \   00000054   0xDB04             BLT.N    ??imageNotifyParse_5
   \                     ??imageNotifyParse_4: (+1)
   \   00000056   0x9600             STR      R6,[SP, #+0]
   \   00000058   0x4643             MOV      R3,R8
   \   0000005A   0x.... 0x....      LDR.W    R1,??DataTable148_8
   \   0000005E   0xE7F4             B.N      ??imageNotifyParse_3
   \                     ??imageNotifyParse_5: (+1)
   \   00000060   0x.... 0x....      ADR.W    R0,imageNotifyPayloadLengths
   \   00000064   0x5C28             LDRB     R0,[R5, R0]
   \   00000066   0x4581             CMP      R9,R0
   \   00000068   0xD007             BEQ.N    ??imageNotifyParse_6
   \   0000006A   0x9002             STR      R0,[SP, #+8]
   \   0000006C   0xF8CD 0x9004      STR      R9,[SP, #+4]
   \   00000070   0x9500             STR      R5,[SP, #+0]
   \   00000072   0x4643             MOV      R3,R8
   \   00000074   0x.... 0x....      LDR.W    R1,??DataTable148_9
   \   00000078   0xE7E7             B.N      ??imageNotifyParse_3
   \                     ??imageNotifyParse_6: (+1)
   \   0000007A   0x.... 0x....      ADR.W    R10,?_47
   \   0000007E   0xB16D             CBZ.N    R5,??imageNotifyParse_7
   \   00000080   0x.... 0x....      BL       ?Subroutine7
   \                     ??CrossCallReturnLabel_75: (+1)
   \   00000084   0xF8BD 0x100C      LDRH     R1,[SP, #+12]
   \   00000088   0x1CBF             ADDS     R7,R7,#+2
   \   0000008A   0x4288             CMP      R0,R1
   \   0000008C   0xD006             BEQ.N    ??imageNotifyParse_7
   \   0000008E   0x4643             MOV      R3,R8
   \   00000090   0x4652             MOV      R2,R10
   \   00000092   0x.... 0x....      LDR.W    R1,??DataTable148_10
   \                     ??imageNotifyParse_8: (+1)
   \   00000096   0x.... 0x....      BL       ?Subroutine3
   \                     ??CrossCallReturnLabel_53: (+1)
   \   0000009A   0xE7C6             B.N      ??imageNotifyParse_1
   \                     ??imageNotifyParse_7: (+1)
   \   0000009C   0x2D02             CMP      R5,#+2
   \   0000009E   0xDB0B             BLT.N    ??imageNotifyParse_9
   \   000000A0   0x.... 0x....      BL       ?Subroutine7
   \                     ??CrossCallReturnLabel_74: (+1)
   \   000000A4   0xF8BD 0x100E      LDRH     R1,[SP, #+14]
   \   000000A8   0x1CBF             ADDS     R7,R7,#+2
   \   000000AA   0x4288             CMP      R0,R1
   \   000000AC   0xD004             BEQ.N    ??imageNotifyParse_9
   \   000000AE   0x4643             MOV      R3,R8
   \   000000B0   0x4652             MOV      R2,R10
   \   000000B2   0x.... 0x....      LDR.W    R1,??DataTable148_11
   \   000000B6   0xE7EE             B.N      ??imageNotifyParse_8
   \                     ??imageNotifyParse_9: (+1)
   \   000000B8   0x2D03             CMP      R5,#+3
   \   000000BA   0xDB0B             BLT.N    ??imageNotifyParse_10
   \   000000BC   0x464A             MOV      R2,R9
   \   000000BE   0xB2F9             UXTB     R1,R7
   \   000000C0   0x.... 0x....      BL       ??Subroutine6_0
   \                     ??CrossCallReturnLabel_70: (+1)
   \   000000C4   0x9904             LDR      R1,[SP, #+16]
   \   000000C6   0x4288             CMP      R0,R1
   \   000000C8   0xD104             BNE.N    ??imageNotifyParse_10
   \   000000CA   0x4643             MOV      R3,R8
   \   000000CC   0x4652             MOV      R2,R10
   \   000000CE   0x.... 0x....      LDR.W    R1,??DataTable148_12
   \   000000D2   0xE7E0             B.N      ??imageNotifyParse_8
   \                     ??imageNotifyParse_10: (+1)
   \   000000D4   0x2E64             CMP      R6,#+100
   \   000000D6   0xDAA4             BGE.N    ??CrossCallReturnLabel_34
   \   000000D8   0x.... 0x....      BL       halCommonGetRandom
   \   000000DC   0xB2C0             UXTB     R0,R0
   \   000000DE   0x2164             MOVS     R1,#+100
   \   000000E0   0xFB90 0xF1F1      SDIV     R1,R0,R1
   \   000000E4   0x2264             MOVS     R2,#+100
   \   000000E6   0xFB02 0x0011      MLS      R0,R2,R1,R0
   \   000000EA   0x1C40             ADDS     R0,R0,#+1
   \   000000EC   0xB2C0             UXTB     R0,R0
   \   000000EE   0x4286             CMP      R6,R0
   \   000000F0   0xDA97             BGE.N    ??CrossCallReturnLabel_34
   \   000000F2   0x9001             STR      R0,[SP, #+4]
   \   000000F4   0x9600             STR      R6,[SP, #+0]
   \   000000F6   0x4643             MOV      R3,R8
   \   000000F8   0x4652             MOV      R2,R10
   \   000000FA   0x.... 0x....      LDR.W    R1,??DataTable148_13
   \   000000FE   0xE7A4             B.N      ??imageNotifyParse_3
   1155          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine7: (+1)
   \   00000000   0xB2FF             UXTB     R7,R7
   \   00000002   0x464A             MOV      R2,R9
   \   00000004   0x4639             MOV      R1,R7
   \   00000006   0x4620             MOV      R0,R4
   \   00000008   0x.... 0x....      B.W      emberAfGetInt16u

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine4: (+1)
   \   00000000   0x2040             MOVS     R0,#+64
   \   00000002   0x.... 0x....      B.W      emberAfPrintln

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine6: (+1)
   \   00000000   0x4631             MOV      R1,R6
   \                     ??Subroutine6_0: (+1)
   \   00000002   0x4620             MOV      R0,R4
   \   00000004   0x.... 0x....      B.W      emberAfGetInt32u
   1156          
   1157          static void startDownload(int32u newVersion)
   1158          {
   1159            EmberAfOtaStorageStatus status;
   1160            otaPrintln("Starting download, Version 0x%4X",
   1161                       newVersion);
   1162            emAfPrintPercentageSetStartAndEnd(0, totalImageSize);
   1163            updateDownloadFileVersion(newVersion);
   1164            updateCurrentOffset(0);
   1165            updateMinBlockRequestPeriodAttribute(0);
   1166          
   1167            recordUpgradeStatus(BOOTLOAD_STATE_DOWNLOAD);
   1168          
   1169            errors = 0;
   1170          
   1171            status = emberAfOtaStorageClearTempDataCallback();
   1172          
   1173            if (status == EMBER_AF_OTA_STORAGE_SUCCESS) {
   1174          
   1175              // For the "OTA Storage Simple" plugin, there is only one image.
   1176              // A call to clear the temp data (above) will also wipe out a fully
   1177              // downloaded image.  So we don't actually have to call 
   1178              // emberAfOtaStorageDeleteImageCallback() as well.  We only worry
   1179              // about a result of EMBER_AF_OPERATION_IN_PROGRESS returned from the first
   1180              // delete.
   1181          
   1182              // For the "OTA POSIX Filesystem" plugin there may be multiple
   1183              // images, so we may have to delete the temp data AND another image
   1184              // on disk.  However we assume that delete operations are extremely
   1185              // fast and thus won't return EMBER_AF_OPERATION_IN_PROGRESS.
   1186          
   1187              EmberAfOtaImageId oldImageId = emberAfOtaStorageSearchCallback(currentDownloadFile.manufacturerId,
   1188                                                                             currentDownloadFile.imageTypeId,
   1189                                                                             (hardwareVersion == 0xFFFF
   1190                                                                              ? NULL
   1191                                                                              : &hardwareVersion));
   1192          
   1193              if (emberAfIsOtaImageIdValid(&oldImageId)) { 
   1194                // Wipe out any existing file matching the same values as the one we 
   1195                // are going to download.
   1196          
   1197                emberAfOtaStorageDeleteImageCallback(&oldImageId);
   1198              }
   1199              continueImageDownload();
   1200          
   1201            } else if (status == EMBER_AF_OTA_STORAGE_OPERATION_IN_PROGRESS) {
   1202              // Disable the timer since we are waiting for the erase event to complete
   1203              // and execute our callback, not the timer to expire.
   1204              emberAfDeactivateClientTick(myEndpoint, ZCL_OTA_BOOTLOAD_CLUSTER_ID);
   1205          
   1206            } else {
   1207              otaPrintln("Error: Failed to erase old temp data.");
   1208              downloadAndVerifyFinish(EMBER_AF_OTA_CLIENT_ABORTED);
   1209            }
   1210          }
   1211          
   1212          // We expect that the minimum length for this command has already been checked.

   \                                 In section .text, align 2, keep-with-next
   1213          static EmberAfStatus queryNextImageResponseParse(int8u* buffer, 
   1214                                                           int8u index, 
   1215                                                           int8u length)
   1216          {
   \                     queryNextImageResponseParse: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x4605             MOV      R5,R0
   \   00000006   0xB08C             SUB      SP,SP,#+48
   1217            int8u status;
   1218            EmberAfStatus zclStatus;
   1219            EmberAfOtaImageId imageId;
   1220            boolean isError = FALSE;
   1221          
   1222            status = emberAfGetInt8u(buffer, index, length);
   \   00000008   0x5D4B             LDRB     R3,[R1, R5]
   1223            index++;
   1224            
   1225            if (status != EMBER_ZCL_STATUS_SUCCESS) {
   \   0000000A   0x.... 0x....      ADR.W    R4,?_34
   \   0000000E   0x4690             MOV      R8,R2
   \   00000010   0x2700             MOVS     R7,#+0
   \   00000012   0x1C4E             ADDS     R6,R1,#+1
   \   00000014   0xB16B             CBZ.N    R3,??queryNextImageResponseParse_0
   1226              otaPrintln("%p returned 0x%X.  No new image to download.", 
   1227                         "Query next image response",
   1228                         status);
   \   00000016   0x4622             MOV      R2,R4
   \   00000018   0x.... 0x....      ADR.W    R1,?_53
   \   0000001C   0x.... 0x....      BL       ?Subroutine3
   1229              zclStatus = EMBER_ZCL_STATUS_SUCCESS;
   \                     ??CrossCallReturnLabel_52: (+1)
   \   00000020   0x2400             MOVS     R4,#+0
   1230              goto queryNextImageResponseDone;
   1231            }
   1232            if (length < QUERY_NEXT_IMAGE_SUCCESS_RESPONSE_MIN_LENGTH) {
   1233              otaPrintln("%p too short (%d < %d)",
   1234                         "Query next image response",
   1235                         length,
   1236                         QUERY_NEXT_IMAGE_SUCCESS_RESPONSE_MIN_LENGTH);
   1237              zclStatus = EMBER_ZCL_STATUS_MALFORMED_COMMAND;
   1238              isError = TRUE;
   1239              goto queryNextImageResponseDone;
   1240            }
   1241            otaPrintln("%p: New image is available for download.",
   1242                       "Query next image response");
   1243            
   1244            index += emAfOtaParseImageIdFromMessage(&imageId,
   1245                                                    &(buffer[index]),
   1246                                                    length - index);
   1247            totalImageSize = emberAfGetInt32u(buffer, index, length);
   1248          
   1249            if (imageId.manufacturerId != currentDownloadFile.manufacturerId
   1250                || imageId.imageTypeId != currentDownloadFile.imageTypeId
   1251                || totalImageSize == 0) {
   1252              otaPrintln("%p is not using my image info.",
   1253                         "Query next image response");
   1254              isError = TRUE;
   1255              zclStatus = EMBER_ZCL_STATUS_INVALID_FIELD;
   1256              goto queryNextImageResponseDone;
   1257          
   1258            } else if (totalImageSize > emberAfOtaStorageDriverMaxDownloadSizeCallback()) {
   1259              otaPrintln("ERROR: Next Image is too big to store (0x%4X > 0x%4X)",
   1260                         totalImageSize,
   1261                         emberAfOtaStorageDriverMaxDownloadSizeCallback());
   1262              isError = TRUE;
   1263              zclStatus = EMBER_ZCL_STATUS_INSUFFICIENT_SPACE;
   1264              goto queryNextImageResponseDone;
   1265            } else {
   1266              startDownload(imageId.firmwareVersion);
   1267              return EMBER_ZCL_STATUS_SUCCESS;
   1268            }
   1269          
   1270           queryNextImageResponseDone:
   1271            queryNextImage(DELAY_BEFORE_SEND_QUERY,
   1272                           isError);
   \                     ??queryNextImageResponseParse_1: (+1)
   \   00000022   0x4639             MOV      R1,R7
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0x.... 0x....      BL       queryNextImage
   1273            return zclStatus;
   \   0000002A   0x4620             MOV      R0,R4
   \                     ??queryNextImageResponseParse_2: (+1)
   \   0000002C   0xB00C             ADD      SP,SP,#+48
   \   0000002E   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   \                     ??queryNextImageResponseParse_0: (+1)
   \   00000032   0xF1B8 0x0F10      CMP      R8,#+16
   \   00000036   0xDA0A             BGE.N    ??queryNextImageResponseParse_3
   \   00000038   0x2010             MOVS     R0,#+16
   \   0000003A   0x9000             STR      R0,[SP, #+0]
   \   0000003C   0x4643             MOV      R3,R8
   \   0000003E   0x4622             MOV      R2,R4
   \   00000040   0x.... 0x....      ADR.W    R1,?_54
   \   00000044   0x.... 0x....      BL       ?Subroutine4
   \                     ??CrossCallReturnLabel_62: (+1)
   \   00000048   0x2480             MOVS     R4,#+128
   \   0000004A   0x2701             MOVS     R7,#+1
   \   0000004C   0xE7E9             B.N      ??queryNextImageResponseParse_1
   \                     ??queryNextImageResponseParse_3: (+1)
   \   0000004E   0x4622             MOV      R2,R4
   \   00000050   0x.... 0x....      ADR.W    R1,?_55
   \   00000054   0x.... 0x....      BL       ??Subroutine2_0
   \                     ??CrossCallReturnLabel_33: (+1)
   \   00000058   0xEBA8 0x0206      SUB      R2,R8,R6
   \   0000005C   0xB2F6             UXTB     R6,R6
   \   0000005E   0xB2D2             UXTB     R2,R2
   \   00000060   0x1971             ADDS     R1,R6,R5
   \   00000062   0xA804             ADD      R0,SP,#+16
   \   00000064   0x.... 0x....      BL       emAfOtaParseImageIdFromMessage
   \   00000068   0x1981             ADDS     R1,R0,R6
   \   0000006A   0x4642             MOV      R2,R8
   \   0000006C   0xB2C9             UXTB     R1,R1
   \   0000006E   0x4628             MOV      R0,R5
   \   00000070   0x.... 0x....      BL       emberAfGetInt32u
   \   00000074   0x....             LDR.N    R5,??DataTable135
   \   00000076   0xF8BD 0x1010      LDRH     R1,[SP, #+16]
   \   0000007A   0x892A             LDRH     R2,[R5, #+8]
   \   0000007C   0x64A8             STR      R0,[R5, #+72]
   \   0000007E   0x4291             CMP      R1,R2
   \   00000080   0xBF02             ITTT     EQ 
   \   00000082   0xF8BD 0x1012      LDRHEQ   R1,[SP, #+18]
   \   00000086   0x896A             LDRHEQ   R2,[R5, #+10]
   \   00000088   0x4291             CMPEQ    R1,R2
   \   0000008A   0xD100             BNE.N    ??queryNextImageResponseParse_4
   \   0000008C   0xB938             CBNZ.N   R0,??queryNextImageResponseParse_5
   \                     ??queryNextImageResponseParse_4: (+1)
   \   0000008E   0x4622             MOV      R2,R4
   \   00000090   0x.... 0x....      ADR.W    R1,?_56
   \   00000094   0x.... 0x....      BL       ??Subroutine2_0
   \                     ??CrossCallReturnLabel_32: (+1)
   \   00000098   0x2701             MOVS     R7,#+1
   \   0000009A   0x2485             MOVS     R4,#+133
   \   0000009C   0xE7C1             B.N      ??queryNextImageResponseParse_1
   \                     ??queryNextImageResponseParse_5: (+1)
   \   0000009E   0x.... 0x....      BL       emberAfOtaStorageDriverMaxDownloadSizeCallback
   \   000000A2   0x6CA9             LDR      R1,[R5, #+72]
   \   000000A4   0x4288             CMP      R0,R1
   \   000000A6   0xD20A             BCS.N    ??queryNextImageResponseParse_6
   \   000000A8   0x.... 0x....      BL       emberAfOtaStorageDriverMaxDownloadSizeCallback
   \   000000AC   0x4603             MOV      R3,R0
   \   000000AE   0x6CAA             LDR      R2,[R5, #+72]
   \   000000B0   0x.... 0x....      ADR.W    R1,?_57
   \   000000B4   0x.... 0x....      BL       ?Subroutine3
   \                     ??CrossCallReturnLabel_51: (+1)
   \   000000B8   0x2701             MOVS     R7,#+1
   \   000000BA   0x2489             MOVS     R4,#+137
   \   000000BC   0xE7B1             B.N      ??queryNextImageResponseParse_1
   \                     ??queryNextImageResponseParse_6: (+1)
   \   000000BE   0x9C05             LDR      R4,[SP, #+20]
   \   000000C0   0x.... 0x....      ADR.W    R1,?_51
   \   000000C4   0x4622             MOV      R2,R4
   \   000000C6   0x.... 0x....      BL       ??Subroutine2_0
   \                     ??CrossCallReturnLabel_31: (+1)
   \   000000CA   0x6CA9             LDR      R1,[R5, #+72]
   \   000000CC   0x2000             MOVS     R0,#+0
   \   000000CE   0x.... 0x....      BL       emAfPrintPercentageSetStartAndEnd
   \   000000D2   0x4620             MOV      R0,R4
   \   000000D4   0x.... 0x....      BL       updateDownloadFileVersion
   \   000000D8   0x4638             MOV      R0,R7
   \   000000DA   0x.... 0x....      BL       updateCurrentOffset
   \   000000DE   0x83AF             STRH     R7,[R5, #+28]
   \   000000E0   0x2006             MOVS     R0,#+6
   \   000000E2   0x.... 0x....      BL       recordUpgradeStatus
   \   000000E6   0x70EF             STRB     R7,[R5, #+3]
   \   000000E8   0x.... 0x....      BL       emberAfOtaStorageClearTempDataCallback
   \   000000EC   0xB9D8             CBNZ.N   R0,??queryNextImageResponseParse_7
   \   000000EE   0x8B68             LDRH     R0,[R5, #+26]
   \   000000F0   0x896A             LDRH     R2,[R5, #+10]
   \   000000F2   0xF64F 0x71FF      MOVW     R1,#+65535
   \   000000F6   0x4288             CMP      R0,R1
   \   000000F8   0x8929             LDRH     R1,[R5, #+8]
   \   000000FA   0xBF0C             ITE      EQ 
   \   000000FC   0x2300             MOVEQ    R3,#+0
   \   000000FE   0xF105 0x031A      ADDNE    R3,R5,#+26
   \   00000102   0xA808             ADD      R0,SP,#+32
   \   00000104   0x.... 0x....      BL       emberAfOtaStorageSearchCallback
   \   00000108   0xA800             ADD      R0,SP,#+0
   \   0000010A   0xA908             ADD      R1,SP,#+32
   \   0000010C   0x2210             MOVS     R2,#+16
   \   0000010E   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000112   0xA800             ADD      R0,SP,#+0
   \   00000114   0x.... 0x....      BL       emberAfIsOtaImageIdValid
   \   00000118   0xB110             CBZ.N    R0,??queryNextImageResponseParse_8
   \   0000011A   0xA800             ADD      R0,SP,#+0
   \   0000011C   0x.... 0x....      BL       emberAfOtaStorageDeleteImageCallback
   \                     ??queryNextImageResponseParse_8: (+1)
   \   00000120   0x.... 0x....      BL       continueImageDownload
   \   00000124   0xE00C             B.N      ??CrossCallReturnLabel_65
   \                     ??queryNextImageResponseParse_7: (+1)
   \   00000126   0x2804             CMP      R0,#+4
   \   00000128   0xD104             BNE.N    ??queryNextImageResponseParse_9
   \   0000012A   0x7868             LDRB     R0,[R5, #+1]
   \   0000012C   0x2119             MOVS     R1,#+25
   \   0000012E   0x.... 0x....      BL       emberAfDeactivateClientTick
   \   00000132   0xE005             B.N      ??CrossCallReturnLabel_65
   \                     ??queryNextImageResponseParse_9: (+1)
   \   00000134   0x.... 0x....      ADR.W    R1,?_52
   \   00000138   0x.... 0x....      BL       ?Subroutine1
   \                     ??CrossCallReturnLabel_17: (+1)
   \   0000013C   0x.... 0x....      BL       ?Subroutine5
   \                     ??CrossCallReturnLabel_65: (+1)
   \   00000140   0x2000             MOVS     R0,#+0
   \   00000142   0xE773             B.N      ??queryNextImageResponseParse_2
   1274          }
   1275          

   \                                 In section .text, align 2, keep-with-next
   1276          static void sendMessage(int8u cmdId, int8u upgradeEndStatus, int32u timer)
   1277          {
   \                     sendMessage: (+1)
   \   00000000   0xE92D 0x47FC      PUSH     {R2-R10,LR}
   1278            int8u fieldControl = 0;
   1279            EmberAfProfileId appProfile;
   1280          
   1281            // Figure out the right app profile ID based on the endpoint descriptor
   1282            appProfile = emberAfProfileIdFromIndex(emberAfIndexFromEndpoint(myEndpoint));
   \   00000004   0x....             LDR.N    R5,??DataTable135
   \   00000006   0x.... 0x....      LDR.W    R6,??DataTable148_14
   \   0000000A   0x4607             MOV      R7,R0
   \   0000000C   0x7868             LDRB     R0,[R5, #+1]
   \   0000000E   0x468A             MOV      R10,R1
   \   00000010   0x4690             MOV      R8,R2
   \   00000012   0x.... 0x....      BL       emberAfIndexFromEndpoint
   1283          
   1284            // Basic ZCL header information
   1285            appResponseLength = 0;
   \   00000016   0x.... 0x....      LDR.W    R2,??DataTable148_15
   1286            emberAfResponseApsFrame.profileId = appProfile;
   \   0000001A   0x.... 0x....      LDR.W    R1,??DataTable141_1
   \   0000001E   0x2400             MOVS     R4,#+0
   \   00000020   0xEB01 0x1000      ADD      R0,R1,R0, LSL #+4
   \   00000024   0x8014             STRH     R4,[R2, #+0]
   1287            emberAfResponseApsFrame.sourceEndpoint = myEndpoint;
   1288            emberAfPutInt8uInResp(ZCL_CLUSTER_SPECIFIC_COMMAND
   1289                                  | ZCL_FRAME_CONTROL_CLIENT_TO_SERVER);
   \   00000026   0x46B9             MOV      R9,R7
   \   00000028   0x8840             LDRH     R0,[R0, #+2]
   \   0000002A   0x8030             STRH     R0,[R6, #+0]
   \   0000002C   0x7868             LDRB     R0,[R5, #+1]
   \   0000002E   0x7130             STRB     R0,[R6, #+4]
   \   00000030   0x2001             MOVS     R0,#+1
   \   00000032   0x.... 0x....      BL       emberAfPutInt8uInResp
   1290            emberAfPutInt8uInResp(emberAfNextSequence());
   \   00000036   0x.... 0x....      BL       emberAfNextSequence
   \   0000003A   0x.... 0x....      BL       emberAfPutInt8uInResp
   1291            emberAfPutInt8uInResp(cmdId);
   \   0000003E   0x4638             MOV      R0,R7
   \   00000040   0x.... 0x....      BL       emberAfPutInt8uInResp
   1292            waitingForResponse = TRUE;
   \   00000044   0x2001             MOVS     R0,#+1
   1293          
   1294            switch(cmdId) {
   \   00000046   0x2F01             CMP      R7,#+1
   \   00000048   0x7128             STRB     R0,[R5, #+4]
   \   0000004A   0xD008             BEQ.N    ??sendMessage_0
   \   0000004C   0x2F03             CMP      R7,#+3
   \   0000004E   0xBF18             IT       NE 
   \   00000050   0x2F04             CMPNE    R7,#+4
   \   00000052   0xD02E             BEQ.N    ??sendMessage_1
   \   00000054   0x2F06             CMP      R7,#+6
   \   00000056   0xD045             BEQ.N    ??sendMessage_2
   \   00000058   0x2F08             CMP      R7,#+8
   \   0000005A   0xD051             BEQ.N    ??sendMessage_3
   \   0000005C   0xE05B             B.N      ??sendMessage_4
   1295              case ZCL_QUERY_NEXT_IMAGE_REQUEST_COMMAND_ID: {
   1296                if (hardwareVersion != EMBER_AF_INVALID_HARDWARE_VERSION) {
   \                     ??sendMessage_0: (+1)
   \   0000005E   0x8B68             LDRH     R0,[R5, #+26]
   \   00000060   0xF64F 0x77FF      MOVW     R7,#+65535
   \   00000064   0x42B8             CMP      R0,R7
   \   00000066   0xBF18             IT       NE 
   \   00000068   0x2401             MOVNE    R4,#+1
   1297                  fieldControl |= OTA_HW_VERSION_BIT_MASK;
   1298                }
   1299                emberAfPutInt8uInResp(fieldControl);
   \   0000006A   0x4620             MOV      R0,R4
   \   0000006C   0x.... 0x....      BL       emberAfPutInt8uInResp
   1300                putImageInfoInMessage();
   \   00000070   0x.... 0x....      BL       putImageInfoInMessage
   1301                if (hardwareVersion != EMBER_AF_INVALID_HARDWARE_VERSION) {
   \   00000074   0x8B68             LDRH     R0,[R5, #+26]
   \   00000076   0x42B8             CMP      R0,R7
   \   00000078   0xD001             BEQ.N    ??sendMessage_5
   1302                  emberAfPutInt16uInResp(hardwareVersion);
   \                     ??sendMessage_6: (+1)
   \   0000007A   0x.... 0x....      BL       emberAfPutInt16uInResp
   1303                }
   1304              }
   1305              break;
   1306          
   1307              case ZCL_IMAGE_BLOCK_REQUEST_COMMAND_ID:
   1308              case ZCL_IMAGE_PAGE_REQUEST_COMMAND_ID: 
   1309                emberAfPutInt8uInResp(fieldControl);
   1310                putImageInfoInMessage();
   1311                emberAfPutInt32uInResp(getCurrentOffset());
   1312                emberAfPutInt8uInResp(usePageRequest
   1313                                      ? EM_AF_PAGE_REQUEST_BLOCK_SIZE
   1314                                      : MAX_CLIENT_DATA_SIZE);
   1315          
   1316                if (cmdId == ZCL_IMAGE_PAGE_REQUEST_COMMAND_ID) {
   1317                  emberAfPutInt16uInResp(EMBER_AF_PLUGIN_AURORA_OTA_CLIENT_PAGE_REQUEST_SIZE);        
   1318                  emberAfPutInt16uInResp(EMBER_AF_OTA_CLIENT_PAGE_REQUEST_SPACING_MS);
   1319                } else {
   1320          #if defined(ZCL_USING_OTA_BOOTLOAD_CLUSTER_MINIMUM_BLOCK_REQUEST_PERIOD_ATTRIBUTE)
   1321                  emberAfPutInt16uInResp(minBlockRequestPeriod);
   1322          #endif
   1323                }
   1324                break;
   1325          
   1326              case ZCL_UPGRADE_END_REQUEST_COMMAND_ID:
   1327                otaPrintln("Sending Upgrade End request.");
   1328                emberAfCoreFlush();
   1329                emberAfPutInt8uInResp(upgradeEndStatus);
   1330                putImageInfoInMessage();
   1331                if (upgradeEndStatus != 0) {
   1332                  waitingForResponse = FALSE;
   1333                }
   1334                break;
   1335          
   1336              case ZCL_QUERY_SPECIFIC_FILE_REQUEST_COMMAND_ID: {
   1337                EmberEUI64 myEui64;
   1338                emberAfGetEui64(myEui64);
   1339                emberAfPutBlockInResp(myEui64, EUI64_SIZE);
   1340                putImageInfoInMessage();
   1341                emberAfPutInt16uInResp(ZIGBEE_PRO_STACK_VERSION);
   1342                }
   1343                break;
   1344          
   1345              default:
   1346                otaPrintln("%p: invalid cmdId 0x%x", "Error", cmdId);
   1347                return;
   1348            } //end switch statement
   1349          
   1350            emberAfResponseApsFrame.clusterId = ZCL_OTA_BOOTLOAD_CLUSTER_ID;
   \                     ??sendMessage_5: (+1)
   \   0000007E   0x2019             MOVS     R0,#+25
   \   00000080   0x8070             STRH     R0,[R6, #+2]
   1351            emberAfResponseApsFrame.sourceEndpoint = myEndpoint;
   \   00000082   0x7868             LDRB     R0,[R5, #+1]
   \   00000084   0x7130             STRB     R0,[R6, #+4]
   1352            emberAfResponseApsFrame.destinationEndpoint = serverEndpoint;
   \   00000086   0x78A8             LDRB     R0,[R5, #+2]
   \   00000088   0x7170             STRB     R0,[R6, #+5]
   1353            emberAfResponseApsFrame.options |= EMBER_APS_OPTION_RETRY;
   \   0000008A   0x88F0             LDRH     R0,[R6, #+6]
   \   0000008C   0xF040 0x0040      ORR      R0,R0,#0x40
   \   00000090   0x80F0             STRH     R0,[R6, #+6]
   1354            {
   1355              EmberStatus status = emberAfSendCommandUnicast(EMBER_OUTGOING_DIRECT, serverNodeId);
   \   00000092   0x2000             MOVS     R0,#+0
   \   00000094   0x8B29             LDRH     R1,[R5, #+24]
   \   00000096   0x.... 0x....      BL       emberAfSendCommandUnicast
   \   0000009A   0x0003             MOVS     R3,R0
   1356              if (status != EMBER_SUCCESS) {
   \   0000009C   0xD004             BEQ.N    ??CrossCallReturnLabel_50
   1357                otaPrintln("Error:  Failed to send OTA command 0x%X, status: 0x%X", 
   1358                           cmdId, status);
   \   0000009E   0x464A             MOV      R2,R9
   \   000000A0   0x.... 0x....      ADR.W    R1,?_60
   \   000000A4   0x.... 0x....      BL       ?Subroutine3
   1359              }
   1360            }
   1361            setTimer(timer);
   \                     ??CrossCallReturnLabel_50: (+1)
   \   000000A8   0x4640             MOV      R0,R8
   \   000000AA   0x.... 0x....      BL       setTimer
   1362          }
   \                     ??sendMessage_7: (+1)
   \   000000AE   0xE8BD 0x87F3      POP      {R0,R1,R4-R10,PC}  ;; return
   \                     ??sendMessage_1: (+1)
   \   000000B2   0x2000             MOVS     R0,#+0
   \   000000B4   0x.... 0x....      BL       emberAfPutInt8uInResp
   \   000000B8   0x.... 0x....      BL       putImageInfoInMessage
   \   000000BC   0x.... 0x....      BL       getCurrentOffset
   \   000000C0   0x.... 0x....      BL       emberAfPutInt32uInResp
   \   000000C4   0x7968             LDRB     R0,[R5, #+5]
   \   000000C6   0x2800             CMP      R0,#+0
   \   000000C8   0xBF14             ITE      NE 
   \   000000CA   0x2020             MOVNE    R0,#+32
   \   000000CC   0x203F             MOVEQ    R0,#+63
   \   000000CE   0x.... 0x....      BL       emberAfPutInt8uInResp
   \   000000D2   0xF1B9 0x0F04      CMP      R9,#+4
   \   000000D6   0xD1D2             BNE.N    ??sendMessage_5
   \   000000D8   0xF44F 0x6080      MOV      R0,#+1024
   \   000000DC   0x.... 0x....      BL       emberAfPutInt16uInResp
   \   000000E0   0x2032             MOVS     R0,#+50
   \   000000E2   0xE7CA             B.N      ??sendMessage_6
   \                     ??sendMessage_2: (+1)
   \   000000E4   0x.... 0x....      ADR.W    R1,?_58
   \   000000E8   0x.... 0x....      BL       ?Subroutine1
   \                     ??CrossCallReturnLabel_16: (+1)
   \   000000EC   0x4650             MOV      R0,R10
   \   000000EE   0x.... 0x....      BL       emberAfPutInt8uInResp
   \   000000F2   0x.... 0x....      BL       putImageInfoInMessage
   \   000000F6   0xF1BA 0x0F00      CMP      R10,#+0
   \   000000FA   0xD0C0             BEQ.N    ??sendMessage_5
   \   000000FC   0x712C             STRB     R4,[R5, #+4]
   \   000000FE   0xE7BE             B.N      ??sendMessage_5
   \                     ??sendMessage_3: (+1)
   \   00000100   0xA800             ADD      R0,SP,#+0
   \   00000102   0x.... 0x....      BL       emberAfGetEui64
   \   00000106   0x2108             MOVS     R1,#+8
   \   00000108   0xA800             ADD      R0,SP,#+0
   \   0000010A   0x.... 0x....      BL       emberAfPutBlockInResp
   \   0000010E   0x.... 0x....      BL       putImageInfoInMessage
   \   00000112   0x2002             MOVS     R0,#+2
   \   00000114   0xE7B1             B.N      ??sendMessage_6
   \                     ??sendMessage_4: (+1)
   \   00000116   0x464B             MOV      R3,R9
   \   00000118   0x.... 0x....      ADR.W    R2,?_38
   \   0000011C   0x.... 0x....      ADR.W    R1,?_59
   \   00000120   0x.... 0x....      BL       ?Subroutine3
   \                     ??CrossCallReturnLabel_49: (+1)
   \   00000124   0xE7C3             B.N      ??sendMessage_7
   1363          

   \                                 In section .text, align 2, keep-with-next
   1364          static void queryNextImage(SendNextQueryState sendQuery, 
   1365                                     boolean queryErrorOccurred)
   1366          {
   \                     queryNextImage: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
   1367            recordUpgradeStatus(BOOTLOAD_STATE_QUERY_NEXT_IMAGE);
   \   00000006   0x2005             MOVS     R0,#+5
   \   00000008   0x.... 0x....      BL       recordUpgradeStatus
   1368          
   1369            if (serverNodeId == EMBER_UNKNOWN_NODE_ID) {
   \   0000000C   0x....             LDR.N    R0,??DataTable139_1
   \   0000000E   0x8B01             LDRH     R1,[R0, #+24]
   \   00000010   0xF64F 0x72FD      MOVW     R2,#+65533
   \   00000014   0x4291             CMP      R1,R2
   \   00000016   0xD104             BNE.N    ??queryNextImage_0
   1370              otaPrintln("Server unknown, falling back to discovery.");
   \   00000018   0x.... 0x....      ADR.W    R1,?_61
   \   0000001C   0x.... 0x....      BL       ?Subroutine1
   1371              restartServerDiscoveryAfterDelay();
   \                     ??CrossCallReturnLabel_15: (+1)
   \   00000020   0xE00B             B.N      ??CrossCallReturnLabel_30
   1372              return;
   1373            }
   1374          
   1375            if (queryErrorOccurred) {
   \                     ??queryNextImage_0: (+1)
   \   00000022   0xB175             CBZ.N    R5,??queryNextImage_1
   1376              errors++;
   \   00000024   0x78C1             LDRB     R1,[R0, #+3]
   \   00000026   0x1C49             ADDS     R1,R1,#+1
   \   00000028   0x70C1             STRB     R1,[R0, #+3]
   1377              if (errors >= EMBER_AF_PLUGIN_AURORA_OTA_CLIENT_QUERY_ERROR_THRESHOLD) {
   \   0000002A   0xB2C9             UXTB     R1,R1
   \   0000002C   0x290A             CMP      R1,#+10
   \   0000002E   0xDB08             BLT.N    ??queryNextImage_1
   1378                otaPrintln("Maximum query errors hit (%d), starting search for new OTA server.\n",
   1379                           EMBER_AF_PLUGIN_AURORA_OTA_CLIENT_QUERY_ERROR_THRESHOLD);
   \   00000030   0x220A             MOVS     R2,#+10
   \   00000032   0x.... 0x....      ADR.W    R1,?_62
   \   00000036   0x.... 0x....      BL       ??Subroutine2_0
   1380                restartServerDiscoveryAfterDelay();
   \                     ??CrossCallReturnLabel_30: (+1)
   \   0000003A   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   0000003E   0x.... 0x....      B.W      restartServerDiscoveryAfterDelay
   1381                return;
   1382              }
   1383            }
   1384          
   1385            if (sendQuery == SEND_QUERY_NOW) {
   \                     ??queryNextImage_1: (+1)
   \   00000042   0x2C01             CMP      R4,#+1
   \   00000044   0x.... 0x....      LDR.W    R6,??DataTable148_16  ;; 0x493e0
   \   00000048   0xD10D             BNE.N    ??queryNextImage_2
   1386              if (!queryErrorOccurred) {
   \   0000004A   0xB90D             CBNZ.N   R5,??queryNextImage_3
   1387                errors = 0;
   \   0000004C   0x2100             MOVS     R1,#+0
   \   0000004E   0x70C1             STRB     R1,[R0, #+3]
   1388              }
   1389          
   1390              // Ask the client what image info to use in the query and
   1391              // subsequent download.
   1392              emberAfOtaClientVersionInfoCallback(&currentDownloadFile, 
   1393                                                  &hardwareVersion);
   \                     ??queryNextImage_3: (+1)
   \   00000050   0xF100 0x011A      ADD      R1,R0,#+26
   \   00000054   0x3008             ADDS     R0,R0,#+8
   \   00000056   0x.... 0x....      BL       emberAfOtaClientVersionInfoCallback
   1394              updateCurrentImageAttributes(&currentDownloadFile);
   1395          
   1396              sendMessage(ZCL_QUERY_NEXT_IMAGE_REQUEST_COMMAND_ID,
   1397                          0,                            // upgrade end status (ignored)
   1398                          EMBER_AF_OTA_QUERY_DELAY_MS);
   \   0000005A   0x4632             MOV      R2,R6
   \   0000005C   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   00000060   0x2100             MOVS     R1,#+0
   \   00000062   0x2001             MOVS     R0,#+1
   \   00000064   0x....             B.N      sendMessage
   1399            } else {
   1400              setTimer(EMBER_AF_OTA_QUERY_DELAY_MS);
   \                     ??queryNextImage_2: (+1)
   \   00000066   0x4630             MOV      R0,R6
   \   00000068   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   0000006C   0x.... 0x....      B.W      setTimer
   1401            }
   1402          }
   1403          

   \                                 In section .text, align 2, keep-with-next
   1404          static void continueImageDownload(void)
   1405          {
   \                     continueImageDownload: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   1406            int8u commandId = ZCL_IMAGE_BLOCK_REQUEST_COMMAND_ID;
   1407            int32u timer = EMBER_AF_PLUGIN_AURORA_OTA_CLIENT_DOWNLOAD_DELAY_MS;
   1408            boolean send = TRUE;
   1409          
   1410            recordUpgradeStatus(BOOTLOAD_STATE_DOWNLOAD);
   \   00000004   0x2006             MOVS     R0,#+6
   \   00000006   0x.... 0x....      BL       recordUpgradeStatus
   1411          
   1412            if (errors >= EMBER_AF_PLUGIN_AURORA_OTA_CLIENT_DOWNLOAD_ERROR_THRESHOLD) {
   \   0000000A   0x.... 0x....      LDR.W    R6,??DataTable148_17
   \   0000000E   0x78F2             LDRB     R2,[R6, #+3]
   \   00000010   0x2403             MOVS     R4,#+3
   \   00000012   0x2500             MOVS     R5,#+0
   \   00000014   0x2A0A             CMP      R2,#+10
   \   00000016   0xDB06             BLT.N    ??continueImageDownload_0
   1413              otaPrintln("Maximum number of download errors reach (%d), aborting.",
   1414                         errors);
   \   00000018   0x.... 0x....      ADR.W    R1,?_63
   \   0000001C   0x.... 0x....      BL       ??Subroutine2_0
   1415              downloadAndVerifyFinish(EMBER_AF_OTA_CLIENT_ABORTED);
   \                     ??CrossCallReturnLabel_29: (+1)
   \   00000020   0x.... 0x....      BL       ?Subroutine5
   1416              return;
   \                     ??CrossCallReturnLabel_64: (+1)
   \   00000024   0xBD73             POP      {R0,R1,R4-R6,PC}
   1417            }
   1418          
   1419            if (usePageRequest) {
   \                     ??continueImageDownload_0: (+1)
   \   00000026   0x7970             LDRB     R0,[R6, #+5]
   \   00000028   0xB1C8             CBZ.N    R0,??continueImageDownload_1
   1420              // Set the current offset for page request
   1421              // or, Get the current offset if retrying image blocks
   1422              EmAfPageRequestClientStatus status = emAfGetCurrentPageRequestStatus();
   1423              if (status == EM_AF_NO_PAGE_REQUEST) {
   \   0000002A   0x.... 0x....      BL       emAfGetCurrentPageRequestStatus
   \   0000002E   0xB938             CBNZ.N   R0,??continueImageDownload_2
   1424                timer = emAfInitPageRequestClient(getCurrentOffset(),
   1425                                                  totalImageSize);
   \   00000030   0x.... 0x....      BL       getCurrentOffset
   \   00000034   0x6CB1             LDR      R1,[R6, #+72]
   \   00000036   0x.... 0x....      BL       emAfInitPageRequestClient
   \   0000003A   0x4605             MOV      R5,R0
   1426                commandId = ZCL_IMAGE_PAGE_REQUEST_COMMAND_ID;
   \   0000003C   0x2404             MOVS     R4,#+4
   \   0000003E   0xE00E             B.N      ??continueImageDownload_1
   1427              } else {
   1428                int32u offset;
   1429                if (EM_AF_PAGE_REQUEST_ERROR
   1430                    == emAfNextMissedBlockRequestOffset(&offset)) {
   \                     ??continueImageDownload_2: (+1)
   \   00000040   0xA800             ADD      R0,SP,#+0
   \   00000042   0x.... 0x....      BL       emAfNextMissedBlockRequestOffset
   \   00000046   0x28FF             CMP      R0,#+255
   \   00000048   0xD106             BNE.N    ??continueImageDownload_3
   1431                  // Server is unreachable because page request caused us to get 0
   1432                  // response packets from the server when we should have received
   1433                  // a lot.
   1434                  errors++;
   \   0000004A   0x78F0             LDRB     R0,[R6, #+3]
   \   0000004C   0x1C40             ADDS     R0,R0,#+1
   \   0000004E   0x70F0             STRB     R0,[R6, #+3]
   1435                  send = FALSE;
   1436                } else {
   1437                  updateCurrentOffset(offset);
   1438                }
   1439              }
   1440            }
   1441          
   1442            if (send) {
   1443              sendMessage(commandId,
   1444                          0,         // upgrade end status (ignored)
   1445                          timer);
   1446            } else {
   1447              setTimer(timer);
   \   00000050   0x2000             MOVS     R0,#+0
   \   00000052   0x.... 0x....      BL       setTimer
   \   00000056   0xBD73             POP      {R0,R1,R4-R6,PC}
   1448            }
   \                     ??continueImageDownload_3: (+1)
   \   00000058   0x9800             LDR      R0,[SP, #+0]
   \   0000005A   0x.... 0x....      BL       updateCurrentOffset
   \                     ??continueImageDownload_1: (+1)
   \   0000005E   0x462A             MOV      R2,R5
   \   00000060   0x2100             MOVS     R1,#+0
   \   00000062   0x4620             MOV      R0,R4
   \   00000064   0x.... 0x....      BL       sendMessage
   1449          }
   \   00000068   0xBD73             POP      {R0,R1,R4-R6,PC}  ;; return
   1450          
   1451          // A callback fired by the verification code.

   \                                 In section .text, align 2, keep-with-next
   1452          void emAfOtaVerifyStoredDataFinish(EmberAfImageVerifyStatus status)
   1453          {
   1454            if (currentBootloadState == BOOTLOAD_STATE_VERIFY_IMAGE) {
   \                     emAfOtaVerifyStoredDataFinish: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable139_1
   \   00000002   0x7809             LDRB     R1,[R1, #+0]
   \   00000004   0x2907             CMP      R1,#+7
   \   00000006   0xBF08             IT       EQ 
   1455              continueImageVerification(status);
   \   00000008   0x.... 0x....      BEQ.W    continueImageVerification
   1456            }
   1457          }
   \   0000000C   0x4770             BX       LR               ;; return
   1458          

   \                                 In section .text, align 2, keep-with-next
   1459          static boolean downloadAndVerifyFinish(EmberAfOtaDownloadResult result)
   1460          {
   \                     downloadAndVerifyFinish: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   1461            static PGM int8u zclStatusFromResult[] = {
   1462              EMBER_ZCL_STATUS_SUCCESS,
   1463              EMBER_ZCL_STATUS_ABORT,
   1464              EMBER_ZCL_STATUS_INVALID_IMAGE,
   1465              EMBER_ZCL_STATUS_ABORT,
   1466              EMBER_ZCL_STATUS_ABORT,
   1467              EMBER_ZCL_STATUS_ABORT,
   1468            };
   1469            int8u zclStatus;
   1470            boolean goAhead;
   1471          
   1472            if (currentBootloadState <= BOOTLOAD_STATE_QUERY_NEXT_IMAGE) {
   \   00000002   0x....             LDR.N    R5,??DataTable139_1
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x7828             LDRB     R0,[R5, #+0]
   \   00000008   0x2806             CMP      R0,#+6
   \   0000000A   0xDA01             BGE.N    ??downloadAndVerifyFinish_0
   1473              // We don't really care about the return code here.  
   1474              // The important thing is that we don't call the client's download
   1475              // complete handler.
   1476              return TRUE;
   \   0000000C   0x2001             MOVS     R0,#+1
   \   0000000E   0xBD32             POP      {R1,R4,R5,PC}
   1477            }
   1478          
   1479            goAhead = emberAfOtaClientDownloadCompleteCallback(result,
   1480                                                               &currentDownloadFile);
   1481          
   1482            if (result == EMBER_AF_OTA_DOWNLOAD_AND_VERIFY_SUCCESS
   1483                && !goAhead) {
   \                     ??downloadAndVerifyFinish_0: (+1)
   \   00000010   0xF105 0x0108      ADD      R1,R5,#+8
   \   00000014   0x4620             MOV      R0,R4
   \   00000016   0x.... 0x....      BL       emberAfOtaClientDownloadCompleteCallback
   \   0000001A   0x4320             ORRS     R0,R0,R4
   \   0000001C   0xD104             BNE.N    ??downloadAndVerifyFinish_1
   1484              otaPrintln("Client verification failed.");
   \   0000001E   0x.... 0x....      ADR.W    R1,?_64
   \   00000022   0x.... 0x....      BL       ?Subroutine1
   1485              result = EMBER_AF_OTA_CLIENT_ABORTED;
   \                     ??CrossCallReturnLabel_14: (+1)
   \   00000026   0x2404             MOVS     R4,#+4
   1486            }
   1487            zclStatus = zclStatusFromResult[result];
   \                     ??downloadAndVerifyFinish_1: (+1)
   \   00000028   0x.... 0x....      ADR.W    R1,??zclStatusFromResult
   \   0000002C   0x5C61             LDRB     R1,[R4, R1]
   1488          
   1489            // We could automatically invalidate the image in temporary storage
   1490            // when it is declared a bad image.
   1491            // This can be done by the download complete callback instead.
   1492          
   1493            if (zclStatus == EMBER_ZCL_STATUS_SUCCESS) {
   \   0000002E   0xB919             CBNZ.N   R1,??downloadAndVerifyFinish_2
   1494              askServerToRunUpgrade(START_NEW_TIMER);
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0x.... 0x....      BL       askServerToRunUpgrade
   \   00000036   0xE00D             B.N      ??downloadAndVerifyFinish_3
   1495            } else if (result != EMBER_AF_OTA_SERVER_ABORTED
   1496                       && currentBootloadState != BOOTLOAD_STATE_QUERY_NEXT_IMAGE) {
   \                     ??downloadAndVerifyFinish_2: (+1)
   \   00000038   0x2C03             CMP      R4,#+3
   \   0000003A   0xBF1C             ITT      NE 
   \   0000003C   0x7828             LDRBNE   R0,[R5, #+0]
   \   0000003E   0x2805             CMPNE    R0,#+5
   \   00000040   0xD003             BEQ.N    ??downloadAndVerifyFinish_4
   1497              // Report to the server that the download has failed.
   1498              sendMessage(ZCL_UPGRADE_END_REQUEST_COMMAND_ID, 
   1499                          zclStatus,
   1500                          EMBER_AF_RUN_UPGRADE_REQUEST_DELAY_MS);
   \   00000042   0x....             LDR.N    R2,??DataTable139  ;; 0x927c0
   \   00000044   0x2006             MOVS     R0,#+6
   \   00000046   0x.... 0x....      BL       sendMessage
   1501            }
   1502            
   1503            if (zclStatus != EMBER_ZCL_STATUS_SUCCESS) {
   1504              waitingForResponse = FALSE;
   \                     ??downloadAndVerifyFinish_4: (+1)
   \   0000004A   0x2000             MOVS     R0,#+0
   \   0000004C   0x7128             STRB     R0,[R5, #+4]
   1505              queryNextImage(DELAY_BEFORE_SEND_QUERY,
   1506                             FALSE);  // query error?
   \   0000004E   0x2100             MOVS     R1,#+0
   \   00000050   0x.... 0x....      BL       queryNextImage
   1507            }
   1508            return (result == EMBER_ZCL_STATUS_SUCCESS);
   \                     ??downloadAndVerifyFinish_3: (+1)
   \   00000054   0x1E60             SUBS     R0,R4,#+1
   \   00000056   0x4180             SBCS     R0,R0,R0
   \   00000058   0x0FC0             LSRS     R0,R0,#+31
   \   0000005A   0xBD32             POP      {R1,R4,R5,PC}    ;; return
   1509          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??zclStatusFromResult:
   \   00000000   0x00 0x95          DC8 0, 149, 150, 149, 149, 149, 0, 0
   \              0x96 0x95    
   \              0x95 0x95    
   \              0x00 0x00    
   1510          

   \                                 In section .text, align 2, keep-with-next
   1511          static void continueImageVerification(EmberAfImageVerifyStatus status)
   1512          {
   \                     continueImageVerification: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0x4605             MOV      R5,R0
   \   00000004   0xB087             SUB      SP,SP,#+28
   1513              int count = 0;
                         ^
Warning[Pe177]: variable "count" was declared but never referenced
   1514          
   1515              recordUpgradeStatus(BOOTLOAD_STATE_VERIFY_IMAGE);
   \   00000006   0x2007             MOVS     R0,#+7
   \   00000008   0x.... 0x....      BL       recordUpgradeStatus
   1516          
   1517              emberAfDebugPrint("custom Verify 0 (%x)\r\n", status);
   \   0000000C   0x462A             MOV      R2,R5
   \   0000000E   0x.... 0x....      ADR.W    R1,?_65
   \   00000012   0x.... 0x....      LDR.W    R4,??DataTable148_17
   \   00000016   0x2002             MOVS     R0,#+2
   \   00000018   0x.... 0x....      BL       emberAfPrint
   1518          
   1519            if (status == EMBER_AF_IMAGE_UNKNOWN) {
   \   0000001C   0x2D05             CMP      R5,#+5
   \   0000001E   0xD102             BNE.N    ??continueImageVerification_0
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0x71A0             STRB     R0,[R4, #+6]
   \   00000024   0xE006             B.N      ??continueImageVerification_1
   1520              customVerifyStatus = NO_CUSTOM_VERIFY;
   1521          
   1522            } else if (status == EMBER_AF_IMAGE_GOOD) {
   \                     ??continueImageVerification_0: (+1)
   \   00000026   0xB91D             CBNZ.N   R5,??continueImageVerification_2
   1523              // This is only called with status == GOOD when signature
   1524              // verification has completed.  It is not called when
   1525              // custom verification is done.
   1526              customVerifyStatus = NEW_CUSTOM_VERIFY;
   \   00000028   0x2001             MOVS     R0,#+1
   \   0000002A   0x71A0             STRB     R0,[R4, #+6]
   1527              status = EMBER_AF_IMAGE_VERIFY_IN_PROGRESS;
   \   0000002C   0x2502             MOVS     R5,#+2
   \   0000002E   0xE001             B.N      ??continueImageVerification_1
   1528            }
   \                     ??continueImageVerification_2: (+1)
   \   00000030   0x2D02             CMP      R5,#+2
   \   00000032   0xD164             BNE.N    ??CrossCallReturnLabel_61
   1529          
   1530            if (status == EMBER_AF_IMAGE_UNKNOWN
   1531                || status == EMBER_AF_IMAGE_VERIFY_IN_PROGRESS) {
   1532              int32u offset;
   1533              int32u totalSize;
   1534              EmberAfOtaImageId id;
   1535          
   1536              // First a basic sanity check of the image to insure
   1537              // the file has completely downloaded and the file format
   1538              // is correct.
   1539              if (status == EMBER_AF_IMAGE_UNKNOWN
   1540                  && (EMBER_AF_OTA_STORAGE_SUCCESS
   1541                      != emberAfOtaStorageCheckTempDataCallback(&offset,
   1542                                                                &totalSize,
   1543                                                                &id))) {
   \                     ??continueImageVerification_1: (+1)
   \   00000034   0x2D05             CMP      R5,#+5
   \   00000036   0xD107             BNE.N    ??continueImageVerification_3
   \   00000038   0xAA03             ADD      R2,SP,#+12
   \   0000003A   0xA901             ADD      R1,SP,#+4
   \   0000003C   0xA802             ADD      R0,SP,#+8
   \   0000003E   0x.... 0x....      BL       emberAfOtaStorageCheckTempDataCallback
   \   00000042   0xB108             CBZ.N    R0,??continueImageVerification_3
   1544                status = EMBER_AF_IMAGE_VERIFY_ERROR;
   \   00000044   0x2504             MOVS     R5,#+4
   1545          //      otaPrintln("emberAfOtaStorageCheckTempDataCallback() failed.");
   1546                goto imageVerifyDone;
   \   00000046   0xE05A             B.N      ??CrossCallReturnLabel_61
   1547              }
   1548              
   1549              emberAfDebugPrint("custom Verify 1 (%x)\r\n", status);
   \                     ??continueImageVerification_3: (+1)
   \   00000048   0x462A             MOV      R2,R5
   \   0000004A   0x.... 0x....      ADR.W    R1,?_66
   \   0000004E   0x2002             MOVS     R0,#+2
   \   00000050   0x.... 0x....      BL       emberAfPrint
   1550          
   1551              if (customVerifyStatus != NO_CUSTOM_VERIFY) {
   \   00000054   0x79A0             LDRB     R0,[R4, #+6]
   \   00000056   0xB170             CBZ.N    R0,??continueImageVerification_4
   1552                status = emberAfOtaClientCustomVerifyCallback((customVerifyStatus 
   1553                                                               == NEW_CUSTOM_VERIFY),
   1554                                                              &currentDownloadFile);
   \   00000058   0x2801             CMP      R0,#+1
   \   0000005A   0xBF18             IT       NE 
   \   0000005C   0x2000             MOVNE    R0,#+0
   \   0000005E   0xF104 0x0108      ADD      R1,R4,#+8
   \   00000062   0x.... 0x....      BL       emberAfOtaClientCustomVerifyCallback
   \   00000066   0x4605             MOV      R5,R0
   1555                  emberAfDebugPrint("custom Verify 2\r\n");
   \   00000068   0x.... 0x....      ADR.W    R1,?_67
   \   0000006C   0x.... 0x....      BL       ?Subroutine0
   1556                customVerifyStatus = CUSTOM_VERIFY_IN_PROGRESS;
   \                     ??CrossCallReturnLabel_6: (+1)
   \   00000070   0x2002             MOVS     R0,#+2
   \   00000072   0x71A0             STRB     R0,[R4, #+6]
   \   00000074   0xE009             B.N      ??continueImageVerification_5
   1557              } else {
   1558                status = emAfOtaImageSignatureVerify(MAX_DIGEST_CALCULATIONS_PER_CALL,
   1559                                                     &currentDownloadFile,
   1560                                                     (status == EMBER_AF_IMAGE_UNKNOWN
   1561                                                      ? EMBER_AF_NEW_IMAGE_VERIFICATION
   1562                                                      : EMBER_AF_CONTINUE_IMAGE_VERIFY));
   \                     ??continueImageVerification_4: (+1)
   \   00000076   0x2D05             CMP      R5,#+5
   \   00000078   0xBF0C             ITE      EQ 
   \   0000007A   0x2201             MOVEQ    R2,#+1
   \   0000007C   0x2200             MOVNE    R2,#+0
   \   0000007E   0xF104 0x0108      ADD      R1,R4,#+8
   \   00000082   0x2005             MOVS     R0,#+5
   \   00000084   0x.... 0x....      BL       emAfOtaImageSignatureVerify
   \   00000088   0x4605             MOV      R5,R0
   1563              }
   1564              emberAfDebugPrint("custom Verify 3\r\n");
   \                     ??continueImageVerification_5: (+1)
   \   0000008A   0x.... 0x....      ADR.W    R1,?_68
   \   0000008E   0x.... 0x....      BL       ?Subroutine0
   1565          
   1566              if (status == EMBER_AF_IMAGE_VERIFY_IN_PROGRESS) {
   \                     ??CrossCallReturnLabel_5: (+1)
   \   00000092   0x2D02             CMP      R5,#+2
   \   00000094   0xD105             BNE.N    ??continueImageVerification_6
   1567                setTimer(EMBER_AF_PLUGIN_AURORA_OTA_CLIENT_VERIFY_DELAY_MS);
   \   00000096   0x200A             MOVS     R0,#+10
   \   00000098   0x.... 0x....      BL       setTimer
   1568                  emberAfDebugPrint("custom Verify 4\r\n");
   \   0000009C   0x.... 0x....      ADR.W    R1,?_69
   \   000000A0   0xE039             B.N      ??continueImageVerification_7
   1569                return;
   1570              } else if (status == EMBER_AF_IMAGE_VERIFY_WAIT) {
   \                     ??continueImageVerification_6: (+1)
   \   000000A2   0x2D03             CMP      R5,#+3
   \   000000A4   0xD105             BNE.N    ??continueImageVerification_8
   1571                  emberAfDebugPrint("custom Verify 5\r\n");
   \   000000A6   0x.... 0x....      ADR.W    R1,?_70
   \   000000AA   0x.... 0x....      BL       ?Subroutine0
   1572                setTimer(0);
   \                     ??CrossCallReturnLabel_4: (+1)
   \   000000AE   0x2000             MOVS     R0,#+0
   \   000000B0   0xE00C             B.N      ??continueImageVerification_9
   1573                return;
   1574              } else if (status == EMBER_AF_NO_IMAGE_VERIFY_SUPPORT) {
   \                     ??continueImageVerification_8: (+1)
   \   000000B2   0x2D06             CMP      R5,#+6
   \   000000B4   0xD10D             BNE.N    ??continueImageVerification_10
   1575                  emberAfDebugPrint("custom Verify 6\r\n");
   \   000000B6   0x.... 0x....      ADR.W    R1,?_71
   \   000000BA   0x.... 0x....      BL       ?Subroutine0
   1576                otaPrintln("No signature verification support, assuming image is okay.");
   \                     ??CrossCallReturnLabel_3: (+1)
   \   000000BE   0x.... 0x....      ADR.W    R1,?_72
   \   000000C2   0x.... 0x....      BL       ?Subroutine1
   1577                customVerifyStatus = NEW_CUSTOM_VERIFY;
   \                     ??CrossCallReturnLabel_13: (+1)
   \   000000C6   0x2001             MOVS     R0,#+1
   \   000000C8   0x71A0             STRB     R0,[R4, #+6]
   1578                setTimer(EMBER_AF_PLUGIN_AURORA_OTA_CLIENT_VERIFY_DELAY_MS);
   \   000000CA   0x200A             MOVS     R0,#+10
   \                     ??continueImageVerification_9: (+1)
   \   000000CC   0x.... 0x....      BL       setTimer
   1579                return;
   \   000000D0   0xE023             B.N      ??CrossCallReturnLabel_0
   1580              } else {
   1581                  emberAfDebugPrint("custom Verify 7\r\n");
   \                     ??continueImageVerification_10: (+1)
   \   000000D2   0x.... 0x....      ADR.W    R1,?_73
   \   000000D6   0x.... 0x....      BL       ?Subroutine0
   1582                otaPrintln("%p verification %p: 0x%X", 
   1583                           (customVerifyStatus == NO_CUSTOM_VERIFY
   1584                            ? "Signature"
   1585                            : "Custom"),
   1586                           (status == EMBER_AF_IMAGE_GOOD
   1587                            ? "passed" 
   1588                            : "FAILED"),
   1589                           status);
   \                     ??CrossCallReturnLabel_2: (+1)
   \   000000DA   0x2D00             CMP      R5,#+0
   \   000000DC   0x79A0             LDRB     R0,[R4, #+6]
   \   000000DE   0x.... 0x....      ADR.W    R1,?_74
   \   000000E2   0x9500             STR      R5,[SP, #+0]
   \   000000E4   0xBF0C             ITE      EQ 
   \   000000E6   0x.... 0x....      ADREQ.W  R3,?_77
   \   000000EA   0x.... 0x....      ADRNE.W  R3,?_78
   \   000000EE   0x2800             CMP      R0,#+0
   \   000000F0   0xBF0C             ITE      EQ 
   \   000000F2   0x.... 0x....      ADREQ.W  R2,?_75
   \   000000F6   0x.... 0x....      ADRNE.W  R2,?_76
   \   000000FA   0x.... 0x....      BL       ?Subroutine4
   1590              }
   1591            }
   1592          
   1593           imageVerifyDone:
   1594                   emberAfDebugPrint("custom Verify 8\r\n");
   \                     ??CrossCallReturnLabel_61: (+1)
   \   000000FE   0x.... 0x....      ADR.W    R1,?_79
   \   00000102   0x.... 0x....      BL       ?Subroutine0
   1595          
   1596            downloadAndVerifyFinish((status == EMBER_AF_IMAGE_GOOD
   1597                                     ? EMBER_AF_OTA_DOWNLOAD_AND_VERIFY_SUCCESS
   1598                                     : EMBER_AF_OTA_VERIFY_FAILED));
   \                     ??CrossCallReturnLabel_1: (+1)
   \   00000106   0x2D00             CMP      R5,#+0
   \   00000108   0xBF0C             ITE      EQ 
   \   0000010A   0x2000             MOVEQ    R0,#+0
   \   0000010C   0x2002             MOVNE    R0,#+2
   \   0000010E   0x.... 0x....      BL       downloadAndVerifyFinish
   1599                  emberAfDebugPrint("custom Verify 9\r\n");
   \   00000112   0x.... 0x....      ADR.W    R1,?_80
   \                     ??continueImageVerification_7: (+1)
   \   00000116   0x.... 0x....      BL       ?Subroutine0
   1600          }
   \                     ??CrossCallReturnLabel_0: (+1)
   \   0000011A   0xB007             ADD      SP,SP,#+28
   \   0000011C   0xBD30             POP      {R4,R5,PC}       ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \   00000000   0x2002             MOVS     R0,#+2
   \   00000002   0x.... 0x....      B.W      emberAfPrint
   1601          

   \                                 In section .text, align 2, keep-with-next
   1602          static void askServerToRunUpgrade(boolean timeout)
   1603          {
   \                     askServerToRunUpgrade: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
   1604            recordUpgradeStatus(BOOTLOAD_STATE_WAITING_FOR_UPGRADE_MESSAGE);
   \   00000004   0x2008             MOVS     R0,#+8
   \   00000006   0x.... 0x....      BL       recordUpgradeStatus
   1605          
   1606            if (!timeout) {
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable148_17
   \   0000000E   0xB944             CBNZ.N   R4,??askServerToRunUpgrade_0
   1607              errors = 0;
   \   00000010   0x2100             MOVS     R1,#+0
   \   00000012   0x70C1             STRB     R1,[R0, #+3]
   1608            }
   1609          
   1610            if (errors >= EMBER_AF_PLUGIN_AURORA_OTA_CLIENT_UPGRADE_WAIT_THRESHOLD) {
   1611              otaPrintln("Maximum upgrade requests made (%d) without response from server.");
   1612              otaPrintln("Upgrading anyway");
   1613              runUpgrade();
   1614              return;
   1615            }
   1616            sendMessage(ZCL_UPGRADE_END_REQUEST_COMMAND_ID, 
   1617                        EMBER_ZCL_STATUS_SUCCESS,
   1618                        EMBER_AF_RUN_UPGRADE_REQUEST_DELAY_MS);
   \                     ??askServerToRunUpgrade_1: (+1)
   \   00000014   0x2100             MOVS     R1,#+0
   \   00000016   0xE8BD 0x4010      POP      {R4,LR}
   \   0000001A   0x.... 0x....      LDR.W    R2,??DataTable148_18  ;; 0x927c0
   \   0000001E   0x2006             MOVS     R0,#+6
   \   00000020   0x....             B.N      sendMessage
   \                     ??askServerToRunUpgrade_0: (+1)
   \   00000022   0x78C0             LDRB     R0,[R0, #+3]
   \   00000024   0x280A             CMP      R0,#+10
   \   00000026   0xDBF5             BLT.N    ??askServerToRunUpgrade_1
   \   00000028   0x.... 0x....      ADR.W    R1,?_81
   \   0000002C   0x.... 0x....      BL       ?Subroutine1
   \                     ??CrossCallReturnLabel_12: (+1)
   \   00000030   0x.... 0x....      ADR.W    R1,?_82
   \   00000034   0x.... 0x....      BL       ?Subroutine1
   \                     ??CrossCallReturnLabel_11: (+1)
   \   00000038   0xE8BD 0x4010      POP      {R4,LR}
   \   0000003C   0x....             B.N      runUpgrade
   1619          }
   1620          
   1621          static boolean storeData(int32u offset, int32u length, const int8u* data)
   1622          {
   1623            return (EMBER_AF_OTA_STORAGE_SUCCESS
   1624                    == emberAfOtaStorageWriteTempDataCallback(offset, length, data));
   1625          }
   1626          

   \                                 In section .text, align 2, keep-with-next
   1627          static EmberAfStatus imageBlockResponseParse(int8u* buffer, int8u index, int8u length)
   1628          {
   \                     imageBlockResponseParse: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   1629            EmberAfOtaImageId imageId;
   1630            int32u offset;
   1631            int32u currentOffset;
   1632            int8u dataSize;
   1633            int32u timerMs = (EMBER_AF_PLUGIN_AURORA_OTA_CLIENT_DOWNLOAD_DELAY_MS >= minBlockRequestPeriod
   1634                              ? EMBER_AF_PLUGIN_AURORA_OTA_CLIENT_DOWNLOAD_DELAY_MS
   1635                              : (minBlockRequestPeriod << 10));  // seconds -> milliseconds
   \   00000004   0x.... 0x....      LDR.W    R5,??DataTable148_17
   \   00000008   0x4604             MOV      R4,R0
   \   0000000A   0x8BA8             LDRH     R0,[R5, #+28]
   1636            int8u status = emberAfGetInt8u(buffer, index, length);
   \   0000000C   0x5D0B             LDRB     R3,[R1, R4]
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xBF0C             ITE      EQ 
   \   00000012   0xF04F 0x0B00      MOVEQ    R11,#+0
   \   00000016   0xEA4F 0x2B80      LSLNE    R11,R0,#+10
   \   0000001A   0xB087             SUB      SP,SP,#+28
   1637            int32u nextOffset;
   1638            const int8u* imageData;
   1639            EmAfPageRequestClientStatus pageRequestStatus;
   1640          
   1641            index++;
   \   0000001C   0x1C4E             ADDS     R6,R1,#+1
   1642          
   1643            if (buffer != NULL && status == EMBER_ZCL_STATUS_WAIT_FOR_DATA) {
   \   0000001E   0x4692             MOV      R10,R2
   \   00000020   0x4690             MOV      R8,R2
   \   00000022   0xB394             CBZ.N    R4,??imageBlockResponseParse_0
   \   00000024   0x2B97             CMP      R3,#+151
   \   00000026   0xD130             BNE.N    ??imageBlockResponseParse_0
   1644              int32u currentTime;
   1645              int32u requestTime;
   1646              int32u calculatedTimer;
   1647          
   1648              if (length < IMAGE_BLOCK_RESPONSE_WAIT_FOR_DATA_LENGTH_MIN) {
   \   00000028   0xF1B8 0x0F0B      CMP      R8,#+11
   \   0000002C   0xDB56             BLT.N    ??imageBlockResponseParse_1
   1649                return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
   1650              }
   1651              currentTime = emberAfGetInt32u(buffer, index, length);
   \   0000002E   0xB2F6             UXTB     R6,R6
   \   00000030   0x.... 0x....      BL       ?Subroutine6
   1652              index += 4;
   \                     ??CrossCallReturnLabel_73: (+1)
   \   00000034   0x1D37             ADDS     R7,R6,#+4
   \   00000036   0x4683             MOV      R11,R0
   1653              requestTime = emberAfGetInt32u(buffer, index, length);
   \   00000038   0xB2FF             UXTB     R7,R7
   \   0000003A   0x4652             MOV      R2,R10
   \   0000003C   0x4639             MOV      R1,R7
   \   0000003E   0x.... 0x....      BL       ??Subroutine6_0
   1654              index += 4;
   1655          
   1656              if (!calculateTimer(currentTime, requestTime, &calculatedTimer)) {
   \                     ??CrossCallReturnLabel_69: (+1)
   \   00000042   0x4601             MOV      R1,R0
   \   00000044   0xAA00             ADD      R2,SP,#+0
   \   00000046   0x4658             MOV      R0,R11
   \   00000048   0x.... 0x....      BL       calculateTimer
   \   0000004C   0x1D3E             ADDS     R6,R7,#+4
   \   0000004E   0xB910             CBNZ.N   R0,??imageBlockResponseParse_2
   1657                // Error printed by above function.
   1658                calculatedTimer = CALCULATE_TIME_ERROR_IMAGE_BLOCK_DELAY_MS; 
   \   00000050   0x.... 0x....      LDR.W    R0,??DataTable148_16  ;; 0x493e0
   \   00000054   0x9000             STR      R0,[SP, #+0]
   1659              }
   1660          
   1661              if (length >= IMAGE_BLOCK_RESPONSE_WAIT_FOR_DATA_MIN_BLOCK_RESPONSE_LENGTH) {
   \                     ??imageBlockResponseParse_2: (+1)
   \   00000056   0xF1B8 0x0F0D      CMP      R8,#+13
   \   0000005A   0xDB0C             BLT.N    ??imageBlockResponseParse_3
   1662                int16u temp = emberAfGetInt16u(buffer, 
   1663                                               index, 
   1664                                               length);
   \   0000005C   0x4652             MOV      R2,R10
   \   0000005E   0xB2F1             UXTB     R1,R6
   \   00000060   0x4620             MOV      R0,R4
   \   00000062   0x.... 0x....      BL       emberAfGetInt16u
   \   00000066   0x4604             MOV      R4,R0
   1665                emberAfCoreFlush();
   1666                otaPrintln("Updating Min Block Request Period to %d seconds",
   1667                           temp);
   \   00000068   0x4622             MOV      R2,R4
   \   0000006A   0x.... 0x....      ADR.W    R1,?_83
   \   0000006E   0x.... 0x....      BL       ??Subroutine2_0
   1668                updateMinBlockRequestPeriodAttribute(temp);
   \                     ??CrossCallReturnLabel_28: (+1)
   \   00000072   0x83AC             STRH     R4,[R5, #+28]
   1669                calculatedTimer = temp;
   \   00000074   0x9400             STR      R4,[SP, #+0]
   1670              }
   1671          
   1672              emberAfCoreFlush();
   1673              otaPrintln("Download delay by server %d ms", calculatedTimer);
   \                     ??imageBlockResponseParse_3: (+1)
   \   00000076   0x2040             MOVS     R0,#+64
   \   00000078   0x9A00             LDR      R2,[SP, #+0]
   \   0000007A   0x.... 0x....      ADR.W    R1,?_84
   \   0000007E   0x.... 0x....      BL       emberAfPrintln
   1674              emberAfCoreFlush();
   1675              setTimer(calculatedTimer);
   \   00000082   0x9800             LDR      R0,[SP, #+0]
   \   00000084   0x.... 0x....      BL       setTimer
   \   00000088   0xE0B7             B.N      ??imageBlockResponseParse_4
   1676              return EMBER_ZCL_STATUS_SUCCESS;
   1677            } else if (status == EMBER_ZCL_STATUS_ABORT
   1678                       || status == EMBER_ZCL_STATUS_NO_IMAGE_AVAILABLE) {
   \                     ??imageBlockResponseParse_0: (+1)
   \   0000008A   0x2B95             CMP      R3,#+149
   \   0000008C   0xBF18             IT       NE 
   \   0000008E   0x2B98             CMPNE    R3,#+152
   \   00000090   0xD102             BNE.N    ??imageBlockResponseParse_5
   1679              otaPrintln("Download aborted by server.");
   \   00000092   0x.... 0x....      ADR.W    R1,?_85
   \   00000096   0xE011             B.N      ??imageBlockResponseParse_6
   1680              downloadAndVerifyFinish(EMBER_AF_OTA_SERVER_ABORTED);
   1681              return EMBER_ZCL_STATUS_SUCCESS;
   1682            } else if (status == EMBER_ZCL_STATUS_UNSUP_CLUSTER_COMMAND) {
   \                     ??imageBlockResponseParse_5: (+1)
   \   00000098   0x2B81             CMP      R3,#+129
   \   0000009A   0xD113             BNE.N    ??imageBlockResponseParse_7
   1683              if (usePageRequest && emAfHandlingPageRequestClient()) {
   \   0000009C   0x7968             LDRB     R0,[R5, #+5]
   \   0000009E   0xB158             CBZ.N    R0,??imageBlockResponseParse_8
   \   000000A0   0x.... 0x....      BL       emAfHandlingPageRequestClient
   \   000000A4   0xB140             CBZ.N    R0,??imageBlockResponseParse_8
   1684                otaPrintln("Server doesn't support page request, only using block request.");
   \   000000A6   0x.... 0x....      ADR.W    R1,?_86
   \   000000AA   0x.... 0x....      BL       ?Subroutine1
   1685                usePageRequest = FALSE;
   \                     ??CrossCallReturnLabel_10: (+1)
   \   000000AE   0x2000             MOVS     R0,#+0
   \   000000B0   0x7168             STRB     R0,[R5, #+5]
   1686                emAfAbortPageRequest();
   \   000000B2   0x.... 0x....      BL       emAfAbortPageRequest
   1687                continueImageDownload();
   \   000000B6   0xE09E             B.N      ??imageBlockResponseParse_9
   1688                return EMBER_ZCL_STATUS_SUCCESS;
   1689              } else {
   1690                otaPrintln("Server returned 'unsupported cluster command'.");
   \                     ??imageBlockResponseParse_8: (+1)
   \   000000B8   0x.... 0x....      ADR.W    R1,?_87
   \                     ??imageBlockResponseParse_6: (+1)
   \   000000BC   0x.... 0x....      BL       ?Subroutine1
   1691                downloadAndVerifyFinish(EMBER_AF_OTA_SERVER_ABORTED);
   \                     ??CrossCallReturnLabel_9: (+1)
   \   000000C0   0x2003             MOVS     R0,#+3
   \   000000C2   0xE072             B.N      ??imageBlockResponseParse_10
   1692                return EMBER_ZCL_STATUS_SUCCESS;
   1693              }
   1694            } else if (status != EMBER_ZCL_STATUS_SUCCESS) {
   \                     ??imageBlockResponseParse_7: (+1)
   \   000000C4   0x.... 0x....      ADR.W    R9,?_35
   \   000000C8   0xB12B             CBZ.N    R3,??imageBlockResponseParse_11
   1695              otaPrintln("Unknown %p status code 0x%X", 
   1696                         "Image block response", 
   1697                         status);
   \   000000CA   0x464A             MOV      R2,R9
   \   000000CC   0x.... 0x....      ADR.W    R1,?_88
   \   000000D0   0x.... 0x....      BL       ?Subroutine3
   1698              return EMBER_ZCL_STATUS_INVALID_VALUE;
   \                     ??CrossCallReturnLabel_48: (+1)
   \   000000D4   0xE044             B.N      ??CrossCallReturnLabel_27
   1699            } // Else status == success.  Keep going
   1700          
   1701            if (length < IMAGE_BLOCK_RESPONSE_SUCCESS_MIN_LENGTH) {
   \                     ??imageBlockResponseParse_11: (+1)
   \   000000D6   0xF1B8 0x0F11      CMP      R8,#+17
   \   000000DA   0xDA01             BGE.N    ??imageBlockResponseParse_12
   1702              return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
   \                     ??imageBlockResponseParse_1: (+1)
   \   000000DC   0x2080             MOVS     R0,#+128
   \   000000DE   0xE08D             B.N      ??imageBlockResponseParse_13
   1703            }
   1704          
   1705            index += emAfOtaParseImageIdFromMessage(&imageId,
   1706                                                    &(buffer[index]), 
   1707                                                    length);
   \                     ??imageBlockResponseParse_12: (+1)
   \   000000E0   0xB2F0             UXTB     R0,R6
   \   000000E2   0x1901             ADDS     R1,R0,R4
   \   000000E4   0xA802             ADD      R0,SP,#+8
   \   000000E6   0x.... 0x....      BL       emAfOtaParseImageIdFromMessage
   \   000000EA   0x1986             ADDS     R6,R0,R6
   1708            offset = emberAfGetInt32u(buffer, index, length);
   \   000000EC   0xB2F6             UXTB     R6,R6
   \   000000EE   0x4652             MOV      R2,R10
   \   000000F0   0x.... 0x....      BL       ?Subroutine6
   \                     ??CrossCallReturnLabel_72: (+1)
   \   000000F4   0x4682             MOV      R10,R0
   1709            index += 4;
   \   000000F6   0x1D30             ADDS     R0,R6,#+4
   1710            dataSize = emberAfGetInt8u(buffer, index, length);
   \   000000F8   0xB2C0             UXTB     R0,R0
   1711            index += 1;
   \   000000FA   0x1C46             ADDS     R6,R0,#+1
   1712            imageData = buffer + index;
   \   000000FC   0xB2F6             UXTB     R6,R6
   \   000000FE   0x5D01             LDRB     R1,[R0, R4]
   \   00000100   0x1934             ADDS     R4,R6,R4
   1713            
   1714            if ((length - index) < dataSize) {
   \   00000102   0xEBA8 0x0006      SUB      R0,R8,R6
   \   00000106   0x4288             CMP      R0,R1
   \   00000108   0x9101             STR      R1,[SP, #+4]
   \   0000010A   0xDA07             BGE.N    ??imageBlockResponseParse_14
   1715              otaPrintln("%p has data size (%d) smaller than actual packet size (%d).",
   1716                         "Image block response",
   1717                         dataSize,
   1718                         length - index);
   \   0000010C   0x9000             STR      R0,[SP, #+0]
   \   0000010E   0x464A             MOV      R2,R9
   \   00000110   0x9B01             LDR      R3,[SP, #+4]
   \   00000112   0x.... 0x....      ADR.W    R1,?_89
   \   00000116   0x.... 0x....      BL       ?Subroutine4
   1719              return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
   1720            }
   \                     ??CrossCallReturnLabel_60: (+1)
   \   0000011A   0xE7DF             B.N      ??imageBlockResponseParse_1
   1721            
   1722            if (!usePageRequest 
   1723                || emAfGetCurrentPageRequestStatus() != EM_AF_WAITING_PAGE_REQUEST_REPLIES) {
   \                     ??imageBlockResponseParse_14: (+1)
   \   0000011C   0x7968             LDRB     R0,[R5, #+5]
   \   0000011E   0xB118             CBZ.N    R0,??imageBlockResponseParse_15
   \   00000120   0x.... 0x....      BL       emAfGetCurrentPageRequestStatus
   \   00000124   0x2801             CMP      R0,#+1
   \   00000126   0xD00C             BEQ.N    ??imageBlockResponseParse_16
   1724              // For normal image block request transactions, all blocks should be in order.
   1725              // For page request, we may receive them out of order, or just miss packets.
   1726              currentOffset = getCurrentOffset();
   \                     ??imageBlockResponseParse_15: (+1)
   \   00000128   0x.... 0x....      BL       getCurrentOffset
   1727              if (offset != currentOffset) {
   \   0000012C   0x4582             CMP      R10,R0
   \   0000012E   0xD008             BEQ.N    ??imageBlockResponseParse_16
   1728                otaPrintln("%p error: Expected offset 0x%4X, but got 0x%4X.  Ignoring", 
   1729                           "Image block response",
   1730                           currentOffset, 
   1731                           offset);
   \   00000130   0x4603             MOV      R3,R0
   \   00000132   0xF8CD 0xA000      STR      R10,[SP, #+0]
   \   00000136   0x464A             MOV      R2,R9
   \   00000138   0x.... 0x....      ADR.W    R1,?_90
   \   0000013C   0x.... 0x....      BL       ?Subroutine4
   1732                return EMBER_ZCL_STATUS_SUCCESS;
   1733              }
   1734            }
   \                     ??CrossCallReturnLabel_59: (+1)
   \   00000140   0xE05B             B.N      ??imageBlockResponseParse_4
   1735            
   1736            if (0 != MEMCOMPARE(&currentDownloadFile, 
   1737                                &imageId, 
   1738                                sizeof(EmberAfOtaImageId))
   1739                       || dataSize > MAX_CLIENT_DATA_SIZE) {
   \                     ??imageBlockResponseParse_16: (+1)
   \   00000142   0x2210             MOVS     R2,#+16
   \   00000144   0xA902             ADD      R1,SP,#+8
   \   00000146   0xF105 0x0008      ADD      R0,R5,#+8
   \   0000014A   0x.... 0x....      BL       halCommonMemCompare
   \   0000014E   0xB910             CBNZ.N   R0,??imageBlockResponseParse_17
   \   00000150   0x9801             LDR      R0,[SP, #+4]
   \   00000152   0x2840             CMP      R0,#+64
   \   00000154   0xDB06             BLT.N    ??imageBlockResponseParse_18
   1740              otaPrintln("%p info did not match my expected info.  Dropping.",
   1741                         "Image block response");
   \                     ??imageBlockResponseParse_17: (+1)
   \   00000156   0x464A             MOV      R2,R9
   \   00000158   0x.... 0x....      ADR.W    R1,?_91
   \   0000015C   0x.... 0x....      BL       ??Subroutine2_0
   1742              return EMBER_ZCL_STATUS_INVALID_VALUE;
   \                     ??CrossCallReturnLabel_27: (+1)
   \   00000160   0x2087             MOVS     R0,#+135
   \   00000162   0xE04B             B.N      ??imageBlockResponseParse_13
   1743            }
   1744          
   1745            errors = 0;
   \                     ??imageBlockResponseParse_18: (+1)
   \   00000164   0x2000             MOVS     R0,#+0
   \   00000166   0x70E8             STRB     R0,[R5, #+3]
   1746          
   1747            // We want to make sure we don't write the same block twice.  For
   1748            // page-erase-required EEPROM parts this won't work.
   1749            if (usePageRequest && emAfHandlingPageRequestClient()) {
   \   00000168   0x7968             LDRB     R0,[R5, #+5]
   \   0000016A   0xB140             CBZ.N    R0,??imageBlockResponseParse_19
   \   0000016C   0x.... 0x....      BL       emAfHandlingPageRequestClient
   \   00000170   0xB128             CBZ.N    R0,??imageBlockResponseParse_19
   1750              pageRequestStatus = emAfNoteReceivedBlockForPageRequestClient(offset);
   \   00000172   0x4650             MOV      R0,R10
   \   00000174   0x.... 0x....      BL       emAfNoteReceivedBlockForPageRequestClient
   \   00000178   0x4607             MOV      R7,R0
   1751              if (pageRequestStatus == EM_AF_BLOCK_ALREADY_RECEIVED) {
   \   0000017A   0x2F04             CMP      R7,#+4
   \   0000017C   0xD03D             BEQ.N    ??imageBlockResponseParse_4
   1752                return EMBER_ZCL_STATUS_SUCCESS;
   1753              }
   1754            }
   1755          
   1756            if (!storeData(offset, dataSize, imageData)) {
   \                     ??imageBlockResponseParse_19: (+1)
   \   0000017E   0x9901             LDR      R1,[SP, #+4]
   \   00000180   0x4622             MOV      R2,R4
   \   00000182   0x4650             MOV      R0,R10
   \   00000184   0x.... 0x....      BL       emberAfOtaStorageWriteTempDataCallback
   \   00000188   0xB950             CBNZ.N   R0,??imageBlockResponseParse_20
   1757              otaPrintln("Failed to write to storage device!");
   1758              downloadAndVerifyFinish(EMBER_AF_OTA_CLIENT_ABORTED);
   1759              // The downloadAndVerifyFinish() function will return it's only status
   1760              // to the message.  No need to send ours.
   1761              return EMBER_ZCL_STATUS_SUCCESS;
   1762            }
   1763          
   1764            nextOffset = offset + dataSize;
   \   0000018A   0x9801             LDR      R0,[SP, #+4]
   \   0000018C   0xEB00 0x040A      ADD      R4,R0,R10
   1765          
   1766            if (usePageRequest && emAfHandlingPageRequestClient()) {
   \   00000190   0x7968             LDRB     R0,[R5, #+5]
   \   00000192   0xB1C0             CBZ.N    R0,??imageBlockResponseParse_21
   \   00000194   0x.... 0x....      BL       emAfHandlingPageRequestClient
   \   00000198   0xB1A8             CBZ.N    R0,??imageBlockResponseParse_21
   1767              if (pageRequestStatus == EM_AF_PAGE_REQUEST_ERROR) {
   \   0000019A   0x2FFF             CMP      R7,#+255
   \   0000019C   0xD108             BNE.N    ??imageBlockResponseParse_22
   1768                downloadAndVerifyFinish(EMBER_AF_OTA_CLIENT_ABORTED);
   \   0000019E   0xE003             B.N      ??CrossCallReturnLabel_8
   1769                // We still return success to indicate we processed the message correctly.
   1770                return EMBER_ZCL_STATUS_SUCCESS;
   1771          
   1772              } else if (pageRequestStatus == EM_AF_WAITING_PAGE_REQUEST_REPLIES) {
   \                     ??imageBlockResponseParse_20: (+1)
   \   000001A0   0x.... 0x....      ADR.W    R1,?_92
   \   000001A4   0x.... 0x....      BL       ?Subroutine1
   \                     ??CrossCallReturnLabel_8: (+1)
   \   000001A8   0x2004             MOVS     R0,#+4
   \                     ??imageBlockResponseParse_10: (+1)
   \   000001AA   0x.... 0x....      BL       downloadAndVerifyFinish
   \   000001AE   0xE024             B.N      ??imageBlockResponseParse_4
   \                     ??imageBlockResponseParse_22: (+1)
   \   000001B0   0x2F01             CMP      R7,#+1
   \   000001B2   0xD022             BEQ.N    ??imageBlockResponseParse_4
   1773                return EMBER_ZCL_STATUS_SUCCESS;
   1774          
   1775              } else if (pageRequestStatus == EM_AF_PAGE_REQUEST_COMPLETE) {
   \   000001B4   0x2F03             CMP      R7,#+3
   \   000001B6   0xD103             BNE.N    ??imageBlockResponseParse_23
   1776                nextOffset = emAfGetFinishedPageRequestOffset();
   \   000001B8   0x.... 0x....      BL       emAfGetFinishedPageRequestOffset
   \   000001BC   0x4604             MOV      R4,R0
   \   000001BE   0xE002             B.N      ??imageBlockResponseParse_21
   1777          
   1778              } else { // EM_AF_RETRY_MISSED_PACKETS 
   1779                timerMs = emAfGetPageRequestMissedPacketDelayMs();
   \                     ??imageBlockResponseParse_23: (+1)
   \   000001C0   0x.... 0x....      BL       emAfGetPageRequestMissedPacketDelayMs
   \   000001C4   0x4683             MOV      R11,R0
   1780              }
   1781            }
   1782          
   1783            offset = updateCurrentOffset(nextOffset);
   \                     ??imageBlockResponseParse_21: (+1)
   \   000001C6   0x4620             MOV      R0,R4
   \   000001C8   0x.... 0x....      BL       updateCurrentOffset
   \   000001CC   0x4604             MOV      R4,R0
   1784          
   1785          #if defined(EMBER_TEST)
   1786            {
   1787              int8u percentageComplete = 
   1788                emAfPrintPercentageUpdate("Download", 
   1789                                          DOWNLOAD_PERCENTAGE_UPDATE_RATE, 
   1790                                          offset);
   1791              if (percentageComplete != 100 && percentageComplete >= emAfOtaClientStopDownloadPercentage) {
   1792                otaPrintln("Artificially stopping download at %d%%", emAfOtaClientStopDownloadPercentage);
   1793                return EMBER_ZCL_STATUS_SUCCESS;
   1794              }
   1795            }
   1796          #else
   1797            emAfPrintPercentageUpdate("Download", 
   1798                                      DOWNLOAD_PERCENTAGE_UPDATE_RATE, 
   1799                                      offset);
   \   000001CE   0x4622             MOV      R2,R4
   \   000001D0   0x2105             MOVS     R1,#+5
   \   000001D2   0x.... 0x....      ADR.W    R0,?_93
   \   000001D6   0x.... 0x....      BL       emAfPrintPercentageUpdate
   1800          #endif
   1801          
   1802            if (offset >= totalImageSize) {
   \   000001DA   0x6CA8             LDR      R0,[R5, #+72]
   \   000001DC   0x4284             CMP      R4,R0
   \   000001DE   0xD306             BCC.N    ??imageBlockResponseParse_24
   1803              emberAfOtaStorageFinishDownloadCallback(offset);
   \   000001E0   0x4620             MOV      R0,R4
   \   000001E2   0x.... 0x....      BL       emberAfOtaStorageFinishDownloadCallback
   1804              continueImageVerification(EMBER_AF_IMAGE_UNKNOWN);  
   \   000001E6   0x2005             MOVS     R0,#+5
   \   000001E8   0x.... 0x....      BL       continueImageVerification
   \   000001EC   0xE005             B.N      ??imageBlockResponseParse_4
   1805              return EMBER_ZCL_STATUS_SUCCESS;
   1806            } else {
   1807              if (!setTimer(timerMs)) {
   \                     ??imageBlockResponseParse_24: (+1)
   \   000001EE   0x4658             MOV      R0,R11
   \   000001F0   0x.... 0x....      BL       setTimer
   \   000001F4   0xB908             CBNZ.N   R0,??imageBlockResponseParse_4
   1808                // Continue download right now
   1809                continueImageDownload();
   \                     ??imageBlockResponseParse_9: (+1)
   \   000001F6   0x.... 0x....      BL       continueImageDownload
   1810              } // else (fall through)
   1811                // timer set, wait for next event to fire
   1812            }
   1813            return EMBER_ZCL_STATUS_SUCCESS;
   \                     ??imageBlockResponseParse_4: (+1)
   \   000001FA   0x2000             MOVS     R0,#+0
   \                     ??imageBlockResponseParse_13: (+1)
   \   000001FC   0xB007             ADD      SP,SP,#+28
   \   000001FE   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   1814          }
   1815          

   \                                 In section .text, align 2, keep-with-next
   1816          static EmberAfStatus upgradeEndResponseParse(int8u status,
   1817                                                       int8u* buffer, 
   1818                                                       int8u length)
   1819          {
   \                     upgradeEndResponseParse: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
   \   00000004   0x460C             MOV      R4,R1
   \   00000006   0x4615             MOV      R5,R2
   1820            EmberAfOtaImageId serverSentId;
   1821            int32u waitTime;
   1822            int32u currentTime, upgradeTime;
   1823            int8u index = EMBER_AF_ZCL_OVERHEAD;
   1824          
   1825            if (status) {
   \   00000008   0xB140             CBZ.N    R0,??upgradeEndResponseParse_0
   1826              otaPrintln("Server aborted upgrade, status: 0x%X",
   1827                         status);
   \   0000000A   0x4602             MOV      R2,R0
   \   0000000C   0x.... 0x....      ADR.W    R1,?_94
   \   00000010   0x.... 0x....      BL       ??Subroutine2_0
   1828              downloadAndVerifyFinish(EMBER_AF_OTA_SERVER_ABORTED);
   \                     ??CrossCallReturnLabel_26: (+1)
   \   00000014   0x2003             MOVS     R0,#+3
   \   00000016   0x.... 0x....      BL       downloadAndVerifyFinish
   1829              return EMBER_ZCL_STATUS_SUCCESS;
   \   0000001A   0xE075             B.N      ??upgradeEndResponseParse_1
   1830            }
   1831          
   1832            index += emAfOtaParseImageIdFromMessage(&serverSentId, 
   1833                                                    &(buffer[index]),
   1834                                                    length);
   \                     ??upgradeEndResponseParse_0: (+1)
   \   0000001C   0x1CE1             ADDS     R1,R4,#+3
   \   0000001E   0xA801             ADD      R0,SP,#+4
   \   00000020   0x.... 0x....      BL       emAfOtaParseImageIdFromMessage
   1835          
   1836            if ((serverSentId.manufacturerId != currentDownloadFile.manufacturerId)
   1837                && (serverSentId.manufacturerId != MFG_ID_WILD_CARD)) {
   \   00000024   0x....             LDR.N    R3,??DataTable148_17
   \   00000026   0xF8BD 0xC004      LDRH     R12,[SP, #+4]
   \   0000002A   0xF8B3 0xE008      LDRH     LR,[R3, #+8]
   \   0000002E   0x.... 0x....      ADR.W    R7,?_97
   \   00000032   0x.... 0x....      ADR.W    R1,?_95
   \   00000036   0x.... 0x....      ADR.W    R2,?_36
   \   0000003A   0x1CC6             ADDS     R6,R0,#+3
   \   0000003C   0xF64F 0x70FF      MOVW     R0,#+65535
   \   00000040   0x45F4             CMP      R12,LR
   \   00000042   0xBF18             IT       NE 
   \   00000044   0x4584             CMPNE    R12,R0
   \   00000046   0xB2F6             UXTB     R6,R6
   \   00000048   0xD007             BEQ.N    ??upgradeEndResponseParse_2
   1838              emberAfOtaBootloadClusterPrint("Error: %p had invalid %p: ",
   1839                                             "Upgrade end response",
   1840                                             "manufacturer ID");
   \   0000004A   0x.... 0x....      ADR.W    R3,?_96
   \   0000004E   0x2040             MOVS     R0,#+64
   \   00000050   0x.... 0x....      BL       emberAfPrint
   1841              otaPrintln("0x%2X", serverSentId.manufacturerId);
   \   00000054   0xF8BD 0x2004      LDRH     R2,[SP, #+4]
   \   00000058   0xE00E             B.N      ??upgradeEndResponseParse_3
   1842              return EMBER_ZCL_STATUS_INVALID_VALUE;
   1843            }
   1844            if ((serverSentId.imageTypeId != currentDownloadFile.imageTypeId) 
   1845                && (serverSentId.imageTypeId != IMAGE_TYPE_WILD_CARD)) {
   \                     ??upgradeEndResponseParse_2: (+1)
   \   0000005A   0xF8BD 0xC006      LDRH     R12,[SP, #+6]
   \   0000005E   0xF8B3 0xE00A      LDRH     LR,[R3, #+10]
   \   00000062   0x45F4             CMP      R12,LR
   \   00000064   0xBF18             IT       NE 
   \   00000066   0x4584             CMPNE    R12,R0
   \   00000068   0xD008             BEQ.N    ??upgradeEndResponseParse_4
   1846              emberAfOtaBootloadClusterPrint("Error: %p had invalid %p: ",
   1847                                             "Upgrade end response",
   1848                                             "image type ID");
   \   0000006A   0x.... 0x....      ADR.W    R3,?_98
   \   0000006E   0x2040             MOVS     R0,#+64
   \   00000070   0x.... 0x....      BL       emberAfPrint
   1849              otaPrintln("0x%2X", serverSentId.imageTypeId);
   \   00000074   0xF8BD 0x2006      LDRH     R2,[SP, #+6]
   \                     ??upgradeEndResponseParse_3: (+1)
   \   00000078   0x4639             MOV      R1,R7
   \   0000007A   0xE00E             B.N      ??upgradeEndResponseParse_5
   1850              return EMBER_ZCL_STATUS_INVALID_VALUE;
   1851            }
   1852            if ((serverSentId.firmwareVersion != currentDownloadFile.firmwareVersion
   1853                 && serverSentId.firmwareVersion != FILE_VERSION_WILD_CARD)) {
   \                     ??upgradeEndResponseParse_4: (+1)
   \   0000007C   0x9802             LDR      R0,[SP, #+8]
   \   0000007E   0x68DB             LDR      R3,[R3, #+12]
   \   00000080   0x4298             CMP      R0,R3
   \   00000082   0xBF18             IT       NE 
   \   00000084   0xF110 0x0F01      CMNNE    R0,#+1
   \   00000088   0xD00B             BEQ.N    ??upgradeEndResponseParse_6
   1854              emberAfOtaBootloadClusterPrint("Error: %p had invalid %p: ",
   1855                                             "Upgrade end response",
   1856                                             "file version");
   \   0000008A   0x.... 0x....      ADR.W    R3,?_99
   \   0000008E   0x2040             MOVS     R0,#+64
   \   00000090   0x.... 0x....      BL       emberAfPrint
   1857              otaPrintln("0x%4X", serverSentId.firmwareVersion);
   \   00000094   0x9A02             LDR      R2,[SP, #+8]
   \   00000096   0x.... 0x....      ADR.W    R1,?_100
   \                     ??upgradeEndResponseParse_5: (+1)
   \   0000009A   0x.... 0x....      BL       ??Subroutine2_0
   1858              return EMBER_ZCL_STATUS_INVALID_VALUE;
   \                     ??CrossCallReturnLabel_25: (+1)
   \   0000009E   0x2087             MOVS     R0,#+135
   \   000000A0   0xE033             B.N      ??upgradeEndResponseParse_7
   1859            }
   1860            currentTime = emberAfGetInt32u(buffer, index, length);
   \                     ??upgradeEndResponseParse_6: (+1)
   \   000000A2   0x462A             MOV      R2,R5
   \   000000A4   0x.... 0x....      BL       ?Subroutine6
   \                     ??CrossCallReturnLabel_71: (+1)
   \   000000A8   0x4607             MOV      R7,R0
   1861            index += 4;
   1862            upgradeTime = emberAfGetInt32u(buffer, index, length);
   \   000000AA   0x1D31             ADDS     R1,R6,#+4
   \   000000AC   0x462A             MOV      R2,R5
   \   000000AE   0xB2C9             UXTB     R1,R1
   \   000000B0   0x.... 0x....      BL       ??Subroutine6_0
   \                     ??CrossCallReturnLabel_68: (+1)
   \   000000B4   0x4601             MOV      R1,R0
   1863            
   1864            if (WAIT_FOR_UPGRADE_MESSAGE == upgradeTime) {
   \   000000B6   0xF111 0x0F01      CMN      R1,#+1
   \   000000BA   0xD106             BNE.N    ??upgradeEndResponseParse_8
   1865              recordUpgradeStatus(BOOTLOAD_STATE_WAITING_FOR_UPGRADE_MESSAGE);
   \   000000BC   0x2008             MOVS     R0,#+8
   \   000000BE   0x.... 0x....      BL       recordUpgradeStatus
   1866              setTimer(WAIT_FOR_UPGRADE_DELAY_MS);
   \   000000C2   0x....             LDR.N    R0,??DataTable148_19  ;; 0x36ee80
   \   000000C4   0x.... 0x....      BL       setTimer
   1867              return EMBER_ZCL_STATUS_SUCCESS;
   \   000000C8   0xE01E             B.N      ??upgradeEndResponseParse_1
   1868            }
   1869          
   1870            // NOTE:  Current Time and Upgrade Time are in SECONDS since epoch.
   1871            // Our timer uses MILISECONDS.  calculateTimer() will give us the MS delay.
   1872          
   1873            if (!calculateTimer(currentTime, upgradeTime, &waitTime)) {
   \                     ??upgradeEndResponseParse_8: (+1)
   \   000000CA   0xAA00             ADD      R2,SP,#+0
   \   000000CC   0x4638             MOV      R0,R7
   \   000000CE   0x.... 0x....      BL       calculateTimer
   \   000000D2   0xB918             CBNZ.N   R0,??upgradeEndResponseParse_9
   1874              waitTime = CALCULATE_TIME_ERROR_UPGRADE_END_RESPONSE_DELAY_MS;
   \   000000D4   0xF44F 0x707A      MOV      R0,#+1000
   \   000000D8   0x9000             STR      R0,[SP, #+0]
   \   000000DA   0xE00A             B.N      ??upgradeEndResponseParse_10
   1875            } else {
   1876              // Even when we are told to upgrade immediately, we want to insure there
   1877              // is a chance for the APS retries and ZCL response to get back to their 
   1878              // senders.
   1879              if (waitTime < IMMEDIATE_UPGRADE_DELAY_MS) {
   \                     ??upgradeEndResponseParse_9: (+1)
   \   000000DC   0x9800             LDR      R0,[SP, #+0]
   \   000000DE   0xF640 0x34B8      MOVW     R4,#+3000
   \   000000E2   0x42A0             CMP      R0,R4
   \   000000E4   0xD205             BCS.N    ??upgradeEndResponseParse_10
   1880                otaPrintln("Adding %d ms. delay for immediate upgrade.", 
   1881                           IMMEDIATE_UPGRADE_DELAY_MS);
   \   000000E6   0x4622             MOV      R2,R4
   \   000000E8   0x.... 0x....      ADR.W    R1,?_101
   \   000000EC   0x.... 0x....      BL       ??Subroutine2_0
   1882                waitTime = IMMEDIATE_UPGRADE_DELAY_MS;
   \                     ??CrossCallReturnLabel_24: (+1)
   \   000000F0   0x9400             STR      R4,[SP, #+0]
   1883              }
   1884            }
   1885            // Expect at this point waitTime != 0
   1886            setTimer(waitTime);
   \                     ??upgradeEndResponseParse_10: (+1)
   \   000000F2   0x9800             LDR      R0,[SP, #+0]
   \   000000F4   0x.... 0x....      BL       setTimer
   1887            emberAfCoreFlush();
   1888            otaPrintln("Countdown to upgrade: %d ms", waitTime);
   \   000000F8   0x9A00             LDR      R2,[SP, #+0]
   \   000000FA   0x.... 0x....      ADR.W    R1,?_102
   \   000000FE   0x.... 0x....      BL       ??Subroutine2_0
   1889            emberAfCoreFlush();
   1890            recordUpgradeStatus(BOOTLOAD_STATE_COUNTDOWN_TO_UPGRADE);
   \                     ??CrossCallReturnLabel_23: (+1)
   \   00000102   0x2009             MOVS     R0,#+9
   \   00000104   0x.... 0x....      BL       recordUpgradeStatus
   1891            return EMBER_ZCL_STATUS_SUCCESS;
   \                     ??upgradeEndResponseParse_1: (+1)
   \   00000108   0x2000             MOVS     R0,#+0
   \                     ??upgradeEndResponseParse_7: (+1)
   \   0000010A   0xB005             ADD      SP,SP,#+20
   \   0000010C   0xBDF0             POP      {R4-R7,PC}       ;; return
   1892          }
   1893          

   \                                 In section .text, align 2, keep-with-next
   1894          static boolean calculateTimer(int32u currentTime, 
   1895                                        int32u targetTime, 
   1896                                        int32u* returnTimeMs)
   1897          {
   \                     calculateTimer: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   1898            int32u timeOut = 0;
   1899            boolean validWaitTime = TRUE; 
   1900          
   1901            if (targetTime < currentTime) {
   \   00000002   0x4281             CMP      R1,R0
   \   00000004   0x4614             MOV      R4,R2
   \   00000006   0xD209             BCS.N    ??calculateTimer_0
   1902              otaPrintln("%p: invalid offset currentTime(0x%4X) > upgradeTime(0x%4X)",
   1903                         "Error",
   1904                         currentTime, 
   1905                         targetTime);
   \   00000008   0x9100             STR      R1,[SP, #+0]
   \   0000000A   0x4603             MOV      R3,R0
   \   0000000C   0x.... 0x....      ADR.W    R2,?_38
   \   00000010   0x.... 0x....      ADR.W    R1,?_103
   \   00000014   0x.... 0x....      BL       ?Subroutine4
   1906              return FALSE;
   \                     ??CrossCallReturnLabel_58: (+1)
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0xBD32             POP      {R1,R4,R5,PC}
   1907            } else {
   1908              timeOut = targetTime - currentTime;
   \                     ??calculateTimer_0: (+1)
   \   0000001C   0x1A0D             SUBS     R5,R1,R0
   1909              otaPrintln("OTA Cluster: wait for %d s", timeOut);
   \   0000001E   0x462A             MOV      R2,R5
   \   00000020   0x.... 0x....      ADR.W    R1,?_104
   \   00000024   0x.... 0x....      BL       ??Subroutine2_0
   1910            }
   1911            otaPrintln("RXed timeOut 0x%4X s, MAX timeOut 0x%4X s",
   1912                       timeOut, 
   1913                       TIMEOUT_MAX_WAIT_TIME_MS >> 10);   // divide by ~1000
   \                     ??CrossCallReturnLabel_22: (+1)
   \   00000028   0xF640 0x53BB      MOVW     R3,#+3515
   \   0000002C   0x462A             MOV      R2,R5
   \   0000002E   0x.... 0x....      ADR.W    R1,?_105
   \   00000032   0x.... 0x....      BL       ?Subroutine3
   1914                                                          // save flash by doing a bit shift
   1915            timeOut *= 1000;
   \                     ??CrossCallReturnLabel_47: (+1)
   \   00000036   0xF44F 0x707A      MOV      R0,#+1000
   \   0000003A   0x4368             MULS     R0,R0,R5
   1916          
   1917            if (timeOut > TIMEOUT_MAX_WAIT_TIME_MS) {
   \   0000003C   0x....             LDR.N    R1,??DataTable148_20  ;; 0x36ee81
   \   0000003E   0x4288             CMP      R0,R1
   \   00000040   0xBF28             IT       CS 
   \   00000042   0x....             LDRCS.N  R0,??DataTable148_19  ;; 0x36ee80
   1918              timeOut = TIMEOUT_MAX_WAIT_TIME_MS;
   1919            }
   1920            *returnTimeMs = timeOut;    
   \   00000044   0x6020             STR      R0,[R4, #+0]
   1921            return validWaitTime;
   \   00000046   0x2001             MOVS     R0,#+1
   \   00000048   0xBD32             POP      {R1,R4,R5,PC}    ;; return
   1922          }
   1923          

   \                                 In section .text, align 2, keep-with-next
   1924          static void runUpgrade(void)
   1925          {
   \                     runUpgrade: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   1926            emberAfCoreFlush();
   1927            otaPrintln("Applying upgrade");
   \   00000002   0x.... 0x....      ADR.W    R1,?_106
   \   00000006   0x.... 0x....      BL       ?Subroutine1
   1928            emberAfCoreFlush();
   1929            
   1930            emberAfOtaClientBootloadCallback(&currentDownloadFile);
   \                     ??CrossCallReturnLabel_7: (+1)
   \   0000000A   0x....             LDR.N    R0,??DataTable148_21
   \   0000000C   0x.... 0x....      BL       emberAfOtaClientBootloadCallback
   1931          
   1932            // If we returned, then something is wrong with the upgrade.  
   1933            // It is expected that an invalid image file is deleted to prevent it
   1934            // from being used a subsequent time.
   1935            queryNextImage(START_NEW_TIMER, 
                                  ^
Warning[Pe188]: enumerated type mixed with another type
   1936                           FALSE);  // query error?
   \   00000010   0xE8BD 0x4004      POP      {R2,LR}
   \   00000014   0x2100             MOVS     R1,#+0
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x....             B.N      queryNextImage
   1937          }
   1938          
   1939          // Sends an image block request for a file the server should 
   1940          // not have.  Test harness only (test case 9.5.6 - Missing File)

   \                                 In section .text, align 2, keep-with-next
   1941          void emAfSendImageBlockRequestTest(void)
   1942          {
   \                     emAfSendImageBlockRequestTest: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   1943            if (currentBootloadState != BOOTLOAD_STATE_NONE) {
   \   00000002   0x....             LDR.N    R4,??DataTable148_17
   \   00000004   0x7820             LDRB     R0,[R4, #+0]
   \   00000006   0xB130             CBZ.N    R0,??emAfSendImageBlockRequestTest_0
   1944              otaPrintln("Image block request test only works when state is BOOTLOAD_STATE_NONE");
   \   00000008   0xE8BD 0x4010      POP      {R4,LR}
   \   0000000C   0x.... 0x....      ADR.W    R1,?_107
   \   00000010   0x2040             MOVS     R0,#+64
   \   00000012   0x.... 0x....      B.W      emberAfPrintln
   1945              return;
   1946            }
   1947          
   1948            updateCurrentOffset(100);
   \                     ??emAfSendImageBlockRequestTest_0: (+1)
   \   00000016   0x2064             MOVS     R0,#+100
   \   00000018   0x.... 0x....      BL       updateCurrentOffset
   1949          
   1950            // Values from the test spec.
   1951            currentDownloadFile.manufacturerId = 0xFFF0;
   \   0000001C   0xF64F 0x70F0      MOVW     R0,#+65520
   \   00000020   0x8120             STRH     R0,[R4, #+8]
   1952            currentDownloadFile.imageTypeId    = 0x0000;
   1953            currentDownloadFile.firmwareVersion = 0xFFFFFFF0;
   1954            sendMessage(ZCL_IMAGE_BLOCK_REQUEST_COMMAND_ID, 
   1955                        0,   // upgrade end status (ignored)
   1956                        0);  // timer
   \   00000022   0x2200             MOVS     R2,#+0
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0x8160             STRH     R0,[R4, #+10]
   \   00000028   0x2100             MOVS     R1,#+0
   \   0000002A   0xF06F 0x000F      MVN      R0,#+15
   \   0000002E   0x60E0             STR      R0,[R4, #+12]
   \   00000030   0x2003             MOVS     R0,#+3
   \   00000032   0xE8BD 0x4010      POP      {R4,LR}
   \   00000036   0x....             B.N      sendMessage
   1957          }
   1958          

   \                                 In section .text, align 2, keep-with-next
   1959          void emAfSetPageRequest(boolean pageRequestOn)
   1960          {
   1961            usePageRequest = pageRequestOn;
   \                     emAfSetPageRequest: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable148_17
   \   00000002   0x7148             STRB     R0,[R1, #+5]
   1962          }
   \   00000004   0x4770             BX       LR               ;; return
   1963          

   \                                 In section .text, align 2, keep-with-next
   1964          boolean emAfUsingPageRequest(void)
   1965          {
   1966            return usePageRequest;
   \                     emAfUsingPageRequest: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable148_17
   \   00000002   0x7940             LDRB     R0,[R0, #+5]
   \   00000004   0x4770             BX       LR               ;; return
   1967          }

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x4E 0x6F          DC8 "None"
   \              0x6E 0x65    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_10:
   \   00000000   0x4E 0x6F          DC8 "Not initialising OTA"
   \              0x74 0x20    
   \              0x69 0x6E    
   \              0x69 0x74    
   \              0x69 0x61    
   \              0x6C 0x69    
   \              0x73 0x69    
   \              0x6E 0x67    
   \              0x20 0x4F    
   \              0x54 0x41    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_11:
   \   00000000   0x44 0x65          DC8 "Delaying %d seconds before starting OTA client"
   \              0x6C 0x61    
   \              0x79 0x69    
   \              0x6E 0x67    
   \              0x20 0x25    
   \              0x64 0x20    
   \              0x73 0x65    
   \              0x63 0x6F    
   \              0x6E 0x64    
   \              0x73 0x20    
   \              0x62 0x65    
   \              0x66 0x6F    
   \              0x72 0x65    
   \              0x20 0x73    
   \              0x74 0x61    
   \              0x72 0x74    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x4F 0x54    
   \              0x41 0x20    
   \              0x63 0x6C    
   \              0x69 0x65    
   \              0x6E 0x74    
   \              0x00         
   \   0000002F   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_1:
   \   00000000   0x52 0x61          DC8 "Random Delay before start"
   \              0x6E 0x64    
   \              0x6F 0x6D    
   \              0x20 0x44    
   \              0x65 0x6C    
   \              0x61 0x79    
   \              0x20 0x62    
   \              0x65 0x66    
   \              0x6F 0x72    
   \              0x65 0x20    
   \              0x73 0x74    
   \              0x61 0x72    
   \              0x74 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_2:
   \   00000000   0x44 0x69          DC8 "Discovering OTA Server"
   \              0x73 0x63    
   \              0x6F 0x76    
   \              0x65 0x72    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x4F 0x54    
   \              0x41 0x20    
   \              0x53 0x65    
   \              0x72 0x76    
   \              0x65 0x72    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_3:
   \   00000000   0x47 0x65          DC8 "Get OTA Server EUI"
   \              0x74 0x20    
   \              0x4F 0x54    
   \              0x41 0x20    
   \              0x53 0x65    
   \              0x72 0x76    
   \              0x65 0x72    
   \              0x20 0x45    
   \              0x55 0x49    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_4:
   \   00000000   0x4F 0x62          DC8 "Obtain link key"
   \              0x74 0x61    
   \              0x69 0x6E    
   \              0x20 0x6C    
   \              0x69 0x6E    
   \              0x6B 0x20    
   \              0x6B 0x65    
   \              0x79 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_5:
   \   00000000   0x51 0x75          DC8 "Querying Next Image"
   \              0x65 0x72    
   \              0x79 0x69    
   \              0x6E 0x67    
   \              0x20 0x4E    
   \              0x65 0x78    
   \              0x74 0x20    
   \              0x49 0x6D    
   \              0x61 0x67    
   \              0x65 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_6:
   \   00000000   0x44 0x6F          DC8 "Downloading Image"
   \              0x77 0x6E    
   \              0x6C 0x6F    
   \              0x61 0x64    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x49 0x6D    
   \              0x61 0x67    
   \              0x65 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_12:
   \   00000000   0x54 0x69          DC8 "Timeout waiting for message."
   \              0x6D 0x65    
   \              0x6F 0x75    
   \              0x74 0x20    
   \              0x77 0x61    
   \              0x69 0x74    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x66 0x6F    
   \              0x72 0x20    
   \              0x6D 0x65    
   \              0x73 0x73    
   \              0x61 0x67    
   \              0x65 0x2E    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_13:
   \   00000000   0x20 0x53          DC8 " State:   %p"
   \              0x74 0x61    
   \              0x74 0x65    
   \              0x3A 0x20    
   \              0x20 0x20    
   \              0x25 0x70    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_14:
   \   00000000   0x20 0x57          DC8 " Waiting for response: %p"
   \              0x61 0x69    
   \              0x74 0x69    
   \              0x6E 0x67    
   \              0x20 0x66    
   \              0x6F 0x72    
   \              0x20 0x72    
   \              0x65 0x73    
   \              0x70 0x6F    
   \              0x6E 0x73    
   \              0x65 0x3A    
   \              0x20 0x25    
   \              0x70 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_17:
   \   00000000   0x20 0x4E          DC8 " Next Event Timer: %d ms"
   \              0x65 0x78    
   \              0x74 0x20    
   \              0x45 0x76    
   \              0x65 0x6E    
   \              0x74 0x20    
   \              0x54 0x69    
   \              0x6D 0x65    
   \              0x72 0x3A    
   \              0x20 0x25    
   \              0x64 0x20    
   \              0x6D 0x73    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_18:
   \   00000000   0x20 0x43          DC8 " Current Download Offset: 0x%4X (%d%%)"
   \              0x75 0x72    
   \              0x72 0x65    
   \              0x6E 0x74    
   \              0x20 0x44    
   \              0x6F 0x77    
   \              0x6E 0x6C    
   \              0x6F 0x61    
   \              0x64 0x20    
   \              0x4F 0x66    
   \              0x66 0x73    
   \              0x65 0x74    
   \              0x3A 0x20    
   \              0x30 0x78    
   \              0x25 0x34    
   \              0x58 0x20    
   \              0x28 0x25    
   \              0x64 0x25    
   \              0x25 0x29    
   \              0x00         
   \   00000027   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_19:
   \   00000000   0x4F 0x54          DC8 "OTA Cluster: setting IEEE address of OTA cluster"
   \              0x41 0x20    
   \              0x43 0x6C    
   \              0x75 0x73    
   \              0x74 0x65    
   \              0x72 0x3A    
   \              0x20 0x73    
   \              0x65 0x74    
   \              0x74 0x69    
   \              0x6E 0x67    
   \              0x20 0x49    
   \              0x45 0x45    
   \              0x45 0x20    
   \              0x61 0x64    
   \              0x64 0x72    
   \              0x65 0x73    
   \              0x73 0x20    
   \              0x6F 0x66    
   \              0x20 0x4F    
   \              0x54 0x41    
   \              0x20 0x63    
   \              0x6C 0x75    
   \              0x73 0x74    
   \              0x65 0x72    
   \              0x00         
   \   00000031   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_20:
   \   00000000   0x53 0x65          DC8 "Setting OTA Server to 0x%2X"
   \              0x74 0x74    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x4F 0x54    
   \              0x41 0x20    
   \              0x53 0x65    
   \              0x72 0x76    
   \              0x65 0x72    
   \              0x20 0x74    
   \              0x6F 0x20    
   \              0x30 0x78    
   \              0x25 0x32    
   \              0x58 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_21:
   \   00000000   0x46 0x61          DC8 "Failed to initiate service discovery."
   \              0x69 0x6C    
   \              0x65 0x64    
   \              0x20 0x74    
   \              0x6F 0x20    
   \              0x69 0x6E    
   \              0x69 0x74    
   \              0x69 0x61    
   \              0x74 0x65    
   \              0x20 0x73    
   \              0x65 0x72    
   \              0x76 0x69    
   \              0x63 0x65    
   \              0x20 0x64    
   \              0x69 0x73    
   \              0x63 0x6F    
   \              0x76 0x65    
   \              0x72 0x79    
   \              0x2E 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable128:
   \   00000000   0x79 0x65          DC8      "yes"
   \              0x73 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable128_1:
   \   00000000   0x6E 0x6F          DC8      0x6E, 0x6F, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_22:
   \   00000000   0x50 0x61          DC8 50H, 61H, 72H, 74H, 69H, 61H, 6CH, 20H
   \              0x72 0x74    
   \              0x69 0x61    
   \              0x6C 0x20    
   \   00000008   0x66 0x69          DC8 66H, 69H, 6CH, 65H, 20H, 64H, 6FH, 77H
   \              0x6C 0x65    
   \              0x20 0x64    
   \              0x6F 0x77    
   \   00000010   0x6E 0x6C          DC8 6EH, 6CH, 6FH, 61H, 64H, 20H, 66H, 6FH
   \              0x6F 0x61    
   \              0x64 0x20    
   \              0x66 0x6F    
   \   00000018   0x75 0x6E          DC8 75H, 6EH, 64H, 2CH, 20H, 63H, 6FH, 6EH
   \              0x64 0x2C    
   \              0x20 0x63    
   \              0x6F 0x6E    
   \   00000020   0x74 0x69          DC8 74H, 69H, 6EH, 75H, 69H, 6EH, 67H, 20H
   \              0x6E 0x75    
   \              0x69 0x6E    
   \              0x67 0x20    
   \   00000028   0x66 0x72          DC8 66H, 72H, 6FH, 6DH, 20H, 6FH, 66H, 66H
   \              0x6F 0x6D    
   \              0x20 0x6F    
   \              0x66 0x66    
   \   00000030   0x73 0x65          DC8 73H, 65H, 74H, 20H, 30H, 78H, 25H, 34H
   \              0x74 0x20    
   \              0x30 0x78    
   \              0x25 0x34    
   \   00000038   0x58 0x00          DC8 58H, 0
   \   0000003A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_23:
   \   00000000   0x46 0x6F          DC8 46H, 6FH, 75H, 6EH, 64H, 20H, 66H, 75H
   \              0x75 0x6E    
   \              0x64 0x20    
   \              0x66 0x75    
   \   00000008   0x6C 0x6C          DC8 6CH, 6CH, 79H, 20H, 64H, 6FH, 77H, 6EH
   \              0x79 0x20    
   \              0x64 0x6F    
   \              0x77 0x6E    
   \   00000010   0x6C 0x6F          DC8 6CH, 6FH, 61H, 64H, 65H, 64H, 20H, 66H
   \              0x61 0x64    
   \              0x65 0x64    
   \              0x20 0x66    
   \   00000018   0x69 0x6C          DC8 69H, 6CH, 65H, 20H, 69H, 6EH, 20H, 73H
   \              0x65 0x20    
   \              0x69 0x6E    
   \              0x20 0x73    
   \   00000020   0x74 0x6F          DC8 74H, 6FH, 72H, 61H, 67H, 65H, 20H, 28H
   \              0x72 0x61    
   \              0x67 0x65    
   \              0x20 0x28    
   \   00000028   0x76 0x65          DC8 76H, 65H, 72H, 73H, 69H, 6FH, 6EH, 20H
   \              0x72 0x73    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \   00000030   0x30 0x78          DC8 30H, 78H, 25H, 34H, 58H, 29H, 2EH, 0
   \              0x25 0x34    
   \              0x58 0x29    
   \              0x2E 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_24:
   \   00000000   0x46 0x6F          DC8 46H, 6FH, 75H, 6EH, 64H, 20H, 66H, 69H
   \              0x75 0x6E    
   \              0x64 0x20    
   \              0x66 0x69    
   \   00000008   0x6C 0x65          DC8 6CH, 65H, 20H, 69H, 6EH, 20H, 73H, 74H
   \              0x20 0x69    
   \              0x6E 0x20    
   \              0x73 0x74    
   \   00000010   0x6F 0x72          DC8 6FH, 72H, 61H, 67H, 65H, 20H, 77H, 69H
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x77 0x69    
   \   00000018   0x74 0x68          DC8 74H, 68H, 20H, 64H, 69H, 66H, 66H, 65H
   \              0x20 0x64    
   \              0x69 0x66    
   \              0x66 0x65    
   \   00000020   0x72 0x65          DC8 72H, 65H, 6EH, 74H, 20H, 76H, 65H, 72H
   \              0x6E 0x74    
   \              0x20 0x76    
   \              0x65 0x72    
   \   00000028   0x73 0x69          DC8 73H, 69H, 6FH, 6EH, 20H, 28H, 30H, 78H
   \              0x6F 0x6E    
   \              0x20 0x28    
   \              0x30 0x78    
   \   00000030   0x25 0x34          DC8 25H, 34H, 58H, 29H, 20H, 74H, 68H, 61H
   \              0x58 0x29    
   \              0x20 0x74    
   \              0x68 0x61    
   \   00000038   0x6E 0x20          DC8 6EH, 20H, 63H, 75H, 72H, 72H, 65H, 6EH
   \              0x63 0x75    
   \              0x72 0x72    
   \              0x65 0x6E    
   \   00000040   0x74 0x20          DC8 74H, 20H, 76H, 65H, 72H, 73H, 69H, 6FH
   \              0x76 0x65    
   \              0x72 0x73    
   \              0x69 0x6F    
   \   00000048   0x6E 0x20          DC8 6EH, 20H, 28H, 30H, 78H, 25H, 34H, 58H
   \              0x28 0x30    
   \              0x78 0x25    
   \              0x34 0x58    
   \   00000050   0x29 0x00          DC8 29H, 0
   \   00000052   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_25:
   \   00000000   0x46 0x69          DC8 46H, 69H, 6CH, 65H, 20H, 69H, 6EH, 20H
   \              0x6C 0x65    
   \              0x20 0x69    
   \              0x6E 0x20    
   \   00000008   0x73 0x74          DC8 73H, 74H, 6FH, 72H, 61H, 67H, 65H, 20H
   \              0x6F 0x72    
   \              0x61 0x67    
   \              0x65 0x20    
   \   00000010   0x69 0x73          DC8 69H, 73H, 20H, 73H, 61H, 6DH, 65H, 20H
   \              0x20 0x73    
   \              0x61 0x6D    
   \              0x65 0x20    
   \   00000018   0x61 0x73          DC8 61H, 73H, 20H, 63H, 75H, 72H, 72H, 65H
   \              0x20 0x63    
   \              0x75 0x72    
   \              0x72 0x65    
   \   00000020   0x6E 0x74          DC8 6EH, 74H, 20H, 72H, 75H, 6EH, 6EH, 69H
   \              0x20 0x72    
   \              0x75 0x6E    
   \              0x6E 0x69    
   \   00000028   0x6E 0x67          DC8 6EH, 67H, 20H, 76H, 65H, 72H, 73H, 69H
   \              0x20 0x76    
   \              0x65 0x72    
   \              0x73 0x69    
   \   00000030   0x6F 0x6E          DC8 6FH, 6EH, 20H, 28H, 30H, 78H, 25H, 34H
   \              0x20 0x28    
   \              0x30 0x78    
   \              0x25 0x34    
   \   00000038   0x58 0x29          DC8 58H, 29H, 0
   \              0x00         
   \   0000003B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_26:
   \   00000000   0x4E 0x6F          DC8 "No image found in storage."
   \              0x20 0x69    
   \              0x6D 0x61    
   \              0x67 0x65    
   \              0x20 0x66    
   \              0x6F 0x75    
   \              0x6E 0x64    
   \              0x20 0x69    
   \              0x6E 0x20    
   \              0x73 0x74    
   \              0x6F 0x72    
   \              0x61 0x67    
   \              0x65 0x2E    
   \              0x00         
   \   0000001B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_27:
   \   00000000   0x42 0x6F          DC8 "Bootload state: %p"
   \              0x6F 0x74    
   \              0x6C 0x6F    
   \              0x61 0x64    
   \              0x20 0x73    
   \              0x74 0x61    
   \              0x74 0x65    
   \              0x3A 0x20    
   \              0x25 0x70    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_28:
   \   00000000   0x42 0x61          DC8 "Bad OTA command: 0x%X"
   \              0x64 0x20    
   \              0x4F 0x54    
   \              0x41 0x20    
   \              0x63 0x6F    
   \              0x6D 0x6D    
   \              0x61 0x6E    
   \              0x64 0x3A    
   \              0x20 0x30    
   \              0x78 0x25    
   \              0x58 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_29:
   \   00000000   0x4F 0x54          DC8 "OTA command 0x%X too short (len %d < min %d)"
   \              0x41 0x20    
   \              0x63 0x6F    
   \              0x6D 0x6D    
   \              0x61 0x6E    
   \              0x64 0x20    
   \              0x30 0x78    
   \              0x25 0x58    
   \              0x20 0x74    
   \              0x6F 0x6F    
   \              0x20 0x73    
   \              0x68 0x6F    
   \              0x72 0x74    
   \              0x20 0x28    
   \              0x6C 0x65    
   \              0x6E 0x20    
   \              0x25 0x64    
   \              0x20 0x3C    
   \              0x20 0x6D    
   \              0x69 0x6E    
   \              0x20 0x25    
   \              0x64 0x29    
   \              0x00         
   \   0000002D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_30:
   \   00000000   0x4F 0x54          DC8 4FH, 54H, 41H, 20H, 63H, 6FH, 6DH, 6DH
   \              0x41 0x20    
   \              0x63 0x6F    
   \              0x6D 0x6D    
   \   00000008   0x61 0x6E          DC8 61H, 6EH, 64H, 20H, 66H, 72H, 6FH, 6DH
   \              0x64 0x20    
   \              0x66 0x72    
   \              0x6F 0x6D    
   \   00000010   0x20 0x75          DC8 20H, 75H, 6EH, 72H, 65H, 63H, 6FH, 67H
   \              0x6E 0x72    
   \              0x65 0x63    
   \              0x6F 0x67    
   \   00000018   0x6E 0x69          DC8 6EH, 69H, 7AH, 65H, 64H, 20H, 73H, 65H
   \              0x7A 0x65    
   \              0x64 0x20    
   \              0x73 0x65    
   \   00000020   0x72 0x76          DC8 72H, 76H, 65H, 72H, 20H, 30H, 78H, 25H
   \              0x65 0x72    
   \              0x20 0x30    
   \              0x78 0x25    
   \   00000028   0x32 0x58          DC8 32H, 58H, 2EH, 20H, 20H, 4DH, 79H, 20H
   \              0x2E 0x20    
   \              0x20 0x4D    
   \              0x79 0x20    
   \   00000030   0x4F 0x54          DC8 4FH, 54H, 41H, 20H, 73H, 65H, 72H, 76H
   \              0x41 0x20    
   \              0x73 0x65    
   \              0x72 0x76    
   \   00000038   0x65 0x72          DC8 65H, 72H, 3AH, 20H, 30H, 78H, 25H, 32H
   \              0x3A 0x20    
   \              0x30 0x78    
   \              0x25 0x32    
   \   00000040   0x58 0x00          DC8 58H, 0
   \   00000042   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_31:
   \   00000000   0x47 0x6F          DC8 "Got unexpected %p.  Ignored."
   \              0x74 0x20    
   \              0x75 0x6E    
   \              0x65 0x78    
   \              0x70 0x65    
   \              0x63 0x74    
   \              0x65 0x64    
   \              0x20 0x25    
   \              0x70 0x2E    
   \              0x20 0x20    
   \              0x49 0x67    
   \              0x6E 0x6F    
   \              0x72 0x65    
   \              0x64 0x2E    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_32:
   \   00000000   0x49 0x6D          DC8 "Image notify"
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x6E 0x6F    
   \              0x74 0x69    
   \              0x66 0x79    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_33:
   \   00000000   0x49 0x6D          DC8 "Image Notify received %x\015\012"
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x4E 0x6F    
   \              0x74 0x69    
   \              0x66 0x79    
   \              0x20 0x72    
   \              0x65 0x63    
   \              0x65 0x69    
   \              0x76 0x65    
   \              0x64 0x20    
   \              0x25 0x78    
   \              0x0D 0x0A    
   \              0x00         
   \   0000001B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_47:
   \   00000000   0x49 0x67          DC8 "Ignoring"
   \              0x6E 0x6F    
   \              0x72 0x69    
   \              0x6E 0x67    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_34:
   \   00000000   0x51 0x75          DC8 "Query next image response"
   \              0x65 0x72    
   \              0x79 0x20    
   \              0x6E 0x65    
   \              0x78 0x74    
   \              0x20 0x69    
   \              0x6D 0x61    
   \              0x67 0x65    
   \              0x20 0x72    
   \              0x65 0x73    
   \              0x70 0x6F    
   \              0x6E 0x73    
   \              0x65 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_53:
   \   00000000   0x25 0x70          DC8 "%p returned 0x%X.  No new image to download."
   \              0x20 0x72    
   \              0x65 0x74    
   \              0x75 0x72    
   \              0x6E 0x65    
   \              0x64 0x20    
   \              0x30 0x78    
   \              0x25 0x58    
   \              0x2E 0x20    
   \              0x20 0x4E    
   \              0x6F 0x20    
   \              0x6E 0x65    
   \              0x77 0x20    
   \              0x69 0x6D    
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x74 0x6F    
   \              0x20 0x64    
   \              0x6F 0x77    
   \              0x6E 0x6C    
   \              0x6F 0x61    
   \              0x64 0x2E    
   \              0x00         
   \   0000002D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_54:
   \   00000000   0x25 0x70          DC8 "%p too short (%d < %d)"
   \              0x20 0x74    
   \              0x6F 0x6F    
   \              0x20 0x73    
   \              0x68 0x6F    
   \              0x72 0x74    
   \              0x20 0x28    
   \              0x25 0x64    
   \              0x20 0x3C    
   \              0x20 0x25    
   \              0x64 0x29    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_55:
   \   00000000   0x25 0x70          DC8 "%p: New image is available for download."
   \              0x3A 0x20    
   \              0x4E 0x65    
   \              0x77 0x20    
   \              0x69 0x6D    
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x69 0x73    
   \              0x20 0x61    
   \              0x76 0x61    
   \              0x69 0x6C    
   \              0x61 0x62    
   \              0x6C 0x65    
   \              0x20 0x66    
   \              0x6F 0x72    
   \              0x20 0x64    
   \              0x6F 0x77    
   \              0x6E 0x6C    
   \              0x6F 0x61    
   \              0x64 0x2E    
   \              0x00         
   \   00000029   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_56:
   \   00000000   0x25 0x70          DC8 "%p is not using my image info."
   \              0x20 0x69    
   \              0x73 0x20    
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x75 0x73    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x6D 0x79    
   \              0x20 0x69    
   \              0x6D 0x61    
   \              0x67 0x65    
   \              0x20 0x69    
   \              0x6E 0x66    
   \              0x6F 0x2E    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_57:
   \   00000000   0x45 0x52          DC8 45H, 52H, 52H, 4FH, 52H, 3AH, 20H, 4EH
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \   00000008   0x65 0x78          DC8 65H, 78H, 74H, 20H, 49H, 6DH, 61H, 67H
   \              0x74 0x20    
   \              0x49 0x6D    
   \              0x61 0x67    
   \   00000010   0x65 0x20          DC8 65H, 20H, 69H, 73H, 20H, 74H, 6FH, 6FH
   \              0x69 0x73    
   \              0x20 0x74    
   \              0x6F 0x6F    
   \   00000018   0x20 0x62          DC8 20H, 62H, 69H, 67H, 20H, 74H, 6FH, 20H
   \              0x69 0x67    
   \              0x20 0x74    
   \              0x6F 0x20    
   \   00000020   0x73 0x74          DC8 73H, 74H, 6FH, 72H, 65H, 20H, 28H, 30H
   \              0x6F 0x72    
   \              0x65 0x20    
   \              0x28 0x30    
   \   00000028   0x78 0x25          DC8 78H, 25H, 34H, 58H, 20H, 3EH, 20H, 30H
   \              0x34 0x58    
   \              0x20 0x3E    
   \              0x20 0x30    
   \   00000030   0x78 0x25          DC8 78H, 25H, 34H, 58H, 29H, 0
   \              0x34 0x58    
   \              0x29 0x00    
   \   00000036   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable135:
   \   00000000   0x........         DC32     currentBootloadState

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable139:
   \   00000000   0x000927C0         DC32     0x927c0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable139_1:
   \   00000000   0x........         DC32     currentBootloadState

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable141:
   \   00000000   0x........         DC32     emAfOtaClientServiceDiscoveryCallback

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable141_1:
   \   00000000   0x........         DC32     emAfEndpoints

   \                                 In section .text, align 4, keep-with-next
   \                     ?_35:
   \   00000000   0x49 0x6D          DC8 "Image block response"
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x62 0x6C    
   \              0x6F 0x63    
   \              0x6B 0x20    
   \              0x72 0x65    
   \              0x73 0x70    
   \              0x6F 0x6E    
   \              0x73 0x65    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_38:
   \   00000000   0x45 0x72          DC8 "Error"
   \              0x72 0x6F    
   \              0x72 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable145:
   \   00000000   0x........         DC32     emAfOtaMinMessageLengths

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable148:
   \   00000000   0x........         DC32     ?_36

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable148_1:
   \   00000000   0x........         DC32     ?_37

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable148_2:
   \   00000000   0x........         DC32     emAfCurrentCommand

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable148_3:
   \   00000000   0x........         DC32     ?_39

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable148_4:
   \   00000000   0x........         DC32     ?_41

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable148_5:
   \   00000000   0x........         DC32     ?_40

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable148_6:
   \   00000000   0x........         DC32     ?_43

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable148_7:
   \   00000000   0x........         DC32     ?_42

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable148_8:
   \   00000000   0x........         DC32     ?_44

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable148_9:
   \   00000000   0x........         DC32     ?_45

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable148_10:
   \   00000000   0x........         DC32     ?_46

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable148_11:
   \   00000000   0x........         DC32     ?_48

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable148_12:
   \   00000000   0x........         DC32     ?_49

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable148_13:
   \   00000000   0x........         DC32     ?_50

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable148_14:
   \   00000000   0x........         DC32     emberAfResponseApsFrame

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable148_15:
   \   00000000   0x........         DC32     appResponseLength

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable148_16:
   \   00000000   0x000493E0         DC32     0x493e0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable148_17:
   \   00000000   0x........         DC32     currentBootloadState

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable148_18:
   \   00000000   0x000927C0         DC32     0x927c0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable148_19:
   \   00000000   0x0036EE80         DC32     0x36ee80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable148_20:
   \   00000000   0x0036EE81         DC32     0x36ee81

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable148_21:
   \   00000000   0x........         DC32     currentBootloadState+0x8

   \                                 In section .text, align 4, keep-with-next
   \                     ?_36:
   \   00000000   0x55 0x70          DC8 "Upgrade end response"
   \              0x67 0x72    
   \              0x61 0x64    
   \              0x65 0x20    
   \              0x65 0x6E    
   \              0x64 0x20    
   \              0x72 0x65    
   \              0x73 0x70    
   \              0x6F 0x6E    
   \              0x73 0x65    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_51:
   \   00000000   0x53 0x74          DC8 "Starting download, Version 0x%4X"
   \              0x61 0x72    
   \              0x74 0x69    
   \              0x6E 0x67    
   \              0x20 0x64    
   \              0x6F 0x77    
   \              0x6E 0x6C    
   \              0x6F 0x61    
   \              0x64 0x2C    
   \              0x20 0x56    
   \              0x65 0x72    
   \              0x73 0x69    
   \              0x6F 0x6E    
   \              0x20 0x30    
   \              0x78 0x25    
   \              0x34 0x58    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_52:
   \   00000000   0x45 0x72          DC8 "Error: Failed to erase old temp data."
   \              0x72 0x6F    
   \              0x72 0x3A    
   \              0x20 0x46    
   \              0x61 0x69    
   \              0x6C 0x65    
   \              0x64 0x20    
   \              0x74 0x6F    
   \              0x20 0x65    
   \              0x72 0x61    
   \              0x73 0x65    
   \              0x20 0x6F    
   \              0x6C 0x64    
   \              0x20 0x74    
   \              0x65 0x6D    
   \              0x70 0x20    
   \              0x64 0x61    
   \              0x74 0x61    
   \              0x2E 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_58:
   \   00000000   0x53 0x65          DC8 "Sending Upgrade End request."
   \              0x6E 0x64    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x55 0x70    
   \              0x67 0x72    
   \              0x61 0x64    
   \              0x65 0x20    
   \              0x45 0x6E    
   \              0x64 0x20    
   \              0x72 0x65    
   \              0x71 0x75    
   \              0x65 0x73    
   \              0x74 0x2E    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_59:
   \   00000000   0x25 0x70          DC8 "%p: invalid cmdId 0x%x"
   \              0x3A 0x20    
   \              0x69 0x6E    
   \              0x76 0x61    
   \              0x6C 0x69    
   \              0x64 0x20    
   \              0x63 0x6D    
   \              0x64 0x49    
   \              0x64 0x20    
   \              0x30 0x78    
   \              0x25 0x78    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_60:
   \   00000000   0x45 0x72          DC8 45H, 72H, 72H, 6FH, 72H, 3AH, 20H, 20H
   \              0x72 0x6F    
   \              0x72 0x3A    
   \              0x20 0x20    
   \   00000008   0x46 0x61          DC8 46H, 61H, 69H, 6CH, 65H, 64H, 20H, 74H
   \              0x69 0x6C    
   \              0x65 0x64    
   \              0x20 0x74    
   \   00000010   0x6F 0x20          DC8 6FH, 20H, 73H, 65H, 6EH, 64H, 20H, 4FH
   \              0x73 0x65    
   \              0x6E 0x64    
   \              0x20 0x4F    
   \   00000018   0x54 0x41          DC8 54H, 41H, 20H, 63H, 6FH, 6DH, 6DH, 61H
   \              0x20 0x63    
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \   00000020   0x6E 0x64          DC8 6EH, 64H, 20H, 30H, 78H, 25H, 58H, 2CH
   \              0x20 0x30    
   \              0x78 0x25    
   \              0x58 0x2C    
   \   00000028   0x20 0x73          DC8 20H, 73H, 74H, 61H, 74H, 75H, 73H, 3AH
   \              0x74 0x61    
   \              0x74 0x75    
   \              0x73 0x3A    
   \   00000030   0x20 0x30          DC8 20H, 30H, 78H, 25H, 58H, 0
   \              0x78 0x25    
   \              0x58 0x00    
   \   00000036   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_61:
   \   00000000   0x53 0x65          DC8 "Server unknown, falling back to discovery."
   \              0x72 0x76    
   \              0x65 0x72    
   \              0x20 0x75    
   \              0x6E 0x6B    
   \              0x6E 0x6F    
   \              0x77 0x6E    
   \              0x2C 0x20    
   \              0x66 0x61    
   \              0x6C 0x6C    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x62 0x61    
   \              0x63 0x6B    
   \              0x20 0x74    
   \              0x6F 0x20    
   \              0x64 0x69    
   \              0x73 0x63    
   \              0x6F 0x76    
   \              0x65 0x72    
   \              0x79 0x2E    
   \              0x00         
   \   0000002B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_62:
   \   00000000   0x4D 0x61          DC8 4DH, 61H, 78H, 69H, 6DH, 75H, 6DH, 20H
   \              0x78 0x69    
   \              0x6D 0x75    
   \              0x6D 0x20    
   \   00000008   0x71 0x75          DC8 71H, 75H, 65H, 72H, 79H, 20H, 65H, 72H
   \              0x65 0x72    
   \              0x79 0x20    
   \              0x65 0x72    
   \   00000010   0x72 0x6F          DC8 72H, 6FH, 72H, 73H, 20H, 68H, 69H, 74H
   \              0x72 0x73    
   \              0x20 0x68    
   \              0x69 0x74    
   \   00000018   0x20 0x28          DC8 20H, 28H, 25H, 64H, 29H, 2CH, 20H, 73H
   \              0x25 0x64    
   \              0x29 0x2C    
   \              0x20 0x73    
   \   00000020   0x74 0x61          DC8 74H, 61H, 72H, 74H, 69H, 6EH, 67H, 20H
   \              0x72 0x74    
   \              0x69 0x6E    
   \              0x67 0x20    
   \   00000028   0x73 0x65          DC8 73H, 65H, 61H, 72H, 63H, 68H, 20H, 66H
   \              0x61 0x72    
   \              0x63 0x68    
   \              0x20 0x66    
   \   00000030   0x6F 0x72          DC8 6FH, 72H, 20H, 6EH, 65H, 77H, 20H, 4FH
   \              0x20 0x6E    
   \              0x65 0x77    
   \              0x20 0x4F    
   \   00000038   0x54 0x41          DC8 54H, 41H, 20H, 73H, 65H, 72H, 76H, 65H
   \              0x20 0x73    
   \              0x65 0x72    
   \              0x76 0x65    
   \   00000040   0x72 0x2E          DC8 72H, 2EH, 0AH, 0
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_63:
   \   00000000   0x4D 0x61          DC8 4DH, 61H, 78H, 69H, 6DH, 75H, 6DH, 20H
   \              0x78 0x69    
   \              0x6D 0x75    
   \              0x6D 0x20    
   \   00000008   0x6E 0x75          DC8 6EH, 75H, 6DH, 62H, 65H, 72H, 20H, 6FH
   \              0x6D 0x62    
   \              0x65 0x72    
   \              0x20 0x6F    
   \   00000010   0x66 0x20          DC8 66H, 20H, 64H, 6FH, 77H, 6EH, 6CH, 6FH
   \              0x64 0x6F    
   \              0x77 0x6E    
   \              0x6C 0x6F    
   \   00000018   0x61 0x64          DC8 61H, 64H, 20H, 65H, 72H, 72H, 6FH, 72H
   \              0x20 0x65    
   \              0x72 0x72    
   \              0x6F 0x72    
   \   00000020   0x73 0x20          DC8 73H, 20H, 72H, 65H, 61H, 63H, 68H, 20H
   \              0x72 0x65    
   \              0x61 0x63    
   \              0x68 0x20    
   \   00000028   0x28 0x25          DC8 28H, 25H, 64H, 29H, 2CH, 20H, 61H, 62H
   \              0x64 0x29    
   \              0x2C 0x20    
   \              0x61 0x62    
   \   00000030   0x6F 0x72          DC8 6FH, 72H, 74H, 69H, 6EH, 67H, 2EH, 0
   \              0x74 0x69    
   \              0x6E 0x67    
   \              0x2E 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_64:
   \   00000000   0x43 0x6C          DC8 "Client verification failed."
   \              0x69 0x65    
   \              0x6E 0x74    
   \              0x20 0x76    
   \              0x65 0x72    
   \              0x69 0x66    
   \              0x69 0x63    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x66 0x61    
   \              0x69 0x6C    
   \              0x65 0x64    
   \              0x2E 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_7:
   \   00000000   0x56 0x65          DC8 "Verifying Image"
   \              0x72 0x69    
   \              0x66 0x79    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x49 0x6D    
   \              0x61 0x67    
   \              0x65 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_8:
   \   00000000   0x57 0x61          DC8 "Waiting for Upgrade message"
   \              0x69 0x74    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x66 0x6F    
   \              0x72 0x20    
   \              0x55 0x70    
   \              0x67 0x72    
   \              0x61 0x64    
   \              0x65 0x20    
   \              0x6D 0x65    
   \              0x73 0x73    
   \              0x61 0x67    
   \              0x65 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_9:
   \   00000000   0x43 0x6F          DC8 "Countdown to Upgrade"
   \              0x75 0x6E    
   \              0x74 0x64    
   \              0x6F 0x77    
   \              0x6E 0x20    
   \              0x74 0x6F    
   \              0x20 0x55    
   \              0x70 0x67    
   \              0x72 0x61    
   \              0x64 0x65    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_65:
   \   00000000   0x63 0x75          DC8 "custom Verify 0 (%x)\015\012"
   \              0x73 0x74    
   \              0x6F 0x6D    
   \              0x20 0x56    
   \              0x65 0x72    
   \              0x69 0x66    
   \              0x79 0x20    
   \              0x30 0x20    
   \              0x28 0x25    
   \              0x78 0x29    
   \              0x0D 0x0A    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_66:
   \   00000000   0x63 0x75          DC8 "custom Verify 1 (%x)\015\012"
   \              0x73 0x74    
   \              0x6F 0x6D    
   \              0x20 0x56    
   \              0x65 0x72    
   \              0x69 0x66    
   \              0x79 0x20    
   \              0x31 0x20    
   \              0x28 0x25    
   \              0x78 0x29    
   \              0x0D 0x0A    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_67:
   \   00000000   0x63 0x75          DC8 "custom Verify 2\015\012"
   \              0x73 0x74    
   \              0x6F 0x6D    
   \              0x20 0x56    
   \              0x65 0x72    
   \              0x69 0x66    
   \              0x79 0x20    
   \              0x32 0x0D    
   \              0x0A 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_68:
   \   00000000   0x63 0x75          DC8 "custom Verify 3\015\012"
   \              0x73 0x74    
   \              0x6F 0x6D    
   \              0x20 0x56    
   \              0x65 0x72    
   \              0x69 0x66    
   \              0x79 0x20    
   \              0x33 0x0D    
   \              0x0A 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_69:
   \   00000000   0x63 0x75          DC8 "custom Verify 4\015\012"
   \              0x73 0x74    
   \              0x6F 0x6D    
   \              0x20 0x56    
   \              0x65 0x72    
   \              0x69 0x66    
   \              0x79 0x20    
   \              0x34 0x0D    
   \              0x0A 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_70:
   \   00000000   0x63 0x75          DC8 "custom Verify 5\015\012"
   \              0x73 0x74    
   \              0x6F 0x6D    
   \              0x20 0x56    
   \              0x65 0x72    
   \              0x69 0x66    
   \              0x79 0x20    
   \              0x35 0x0D    
   \              0x0A 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_71:
   \   00000000   0x63 0x75          DC8 "custom Verify 6\015\012"
   \              0x73 0x74    
   \              0x6F 0x6D    
   \              0x20 0x56    
   \              0x65 0x72    
   \              0x69 0x66    
   \              0x79 0x20    
   \              0x36 0x0D    
   \              0x0A 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_72:
   \   00000000   0x4E 0x6F          DC8 4EH, 6FH, 20H, 73H, 69H, 67H, 6EH, 61H
   \              0x20 0x73    
   \              0x69 0x67    
   \              0x6E 0x61    
   \   00000008   0x74 0x75          DC8 74H, 75H, 72H, 65H, 20H, 76H, 65H, 72H
   \              0x72 0x65    
   \              0x20 0x76    
   \              0x65 0x72    
   \   00000010   0x69 0x66          DC8 69H, 66H, 69H, 63H, 61H, 74H, 69H, 6FH
   \              0x69 0x63    
   \              0x61 0x74    
   \              0x69 0x6F    
   \   00000018   0x6E 0x20          DC8 6EH, 20H, 73H, 75H, 70H, 70H, 6FH, 72H
   \              0x73 0x75    
   \              0x70 0x70    
   \              0x6F 0x72    
   \   00000020   0x74 0x2C          DC8 74H, 2CH, 20H, 61H, 73H, 73H, 75H, 6DH
   \              0x20 0x61    
   \              0x73 0x73    
   \              0x75 0x6D    
   \   00000028   0x69 0x6E          DC8 69H, 6EH, 67H, 20H, 69H, 6DH, 61H, 67H
   \              0x67 0x20    
   \              0x69 0x6D    
   \              0x61 0x67    
   \   00000030   0x65 0x20          DC8 65H, 20H, 69H, 73H, 20H, 6FH, 6BH, 61H
   \              0x69 0x73    
   \              0x20 0x6F    
   \              0x6B 0x61    
   \   00000038   0x79 0x2E          DC8 79H, 2EH, 0
   \              0x00         
   \   0000003B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_73:
   \   00000000   0x63 0x75          DC8 "custom Verify 7\015\012"
   \              0x73 0x74    
   \              0x6F 0x6D    
   \              0x20 0x56    
   \              0x65 0x72    
   \              0x69 0x66    
   \              0x79 0x20    
   \              0x37 0x0D    
   \              0x0A 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_74:
   \   00000000   0x25 0x70          DC8 "%p verification %p: 0x%X"
   \              0x20 0x76    
   \              0x65 0x72    
   \              0x69 0x66    
   \              0x69 0x63    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x25 0x70    
   \              0x3A 0x20    
   \              0x30 0x78    
   \              0x25 0x58    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_75:
   \   00000000   0x53 0x69          DC8 "Signature"
   \              0x67 0x6E    
   \              0x61 0x74    
   \              0x75 0x72    
   \              0x65 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_76:
   \   00000000   0x43 0x75          DC8 "Custom"
   \              0x73 0x74    
   \              0x6F 0x6D    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_77:
   \   00000000   0x70 0x61          DC8 "passed"
   \              0x73 0x73    
   \              0x65 0x64    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_78:
   \   00000000   0x46 0x41          DC8 "FAILED"
   \              0x49 0x4C    
   \              0x45 0x44    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_79:
   \   00000000   0x63 0x75          DC8 "custom Verify 8\015\012"
   \              0x73 0x74    
   \              0x6F 0x6D    
   \              0x20 0x56    
   \              0x65 0x72    
   \              0x69 0x66    
   \              0x79 0x20    
   \              0x38 0x0D    
   \              0x0A 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_80:
   \   00000000   0x63 0x75          DC8 "custom Verify 9\015\012"
   \              0x73 0x74    
   \              0x6F 0x6D    
   \              0x20 0x56    
   \              0x65 0x72    
   \              0x69 0x66    
   \              0x79 0x20    
   \              0x39 0x0D    
   \              0x0A 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_81:
   \   00000000   0x4D 0x61          DC8 4DH, 61H, 78H, 69H, 6DH, 75H, 6DH, 20H
   \              0x78 0x69    
   \              0x6D 0x75    
   \              0x6D 0x20    
   \   00000008   0x75 0x70          DC8 75H, 70H, 67H, 72H, 61H, 64H, 65H, 20H
   \              0x67 0x72    
   \              0x61 0x64    
   \              0x65 0x20    
   \   00000010   0x72 0x65          DC8 72H, 65H, 71H, 75H, 65H, 73H, 74H, 73H
   \              0x71 0x75    
   \              0x65 0x73    
   \              0x74 0x73    
   \   00000018   0x20 0x6D          DC8 20H, 6DH, 61H, 64H, 65H, 20H, 28H, 25H
   \              0x61 0x64    
   \              0x65 0x20    
   \              0x28 0x25    
   \   00000020   0x64 0x29          DC8 64H, 29H, 20H, 77H, 69H, 74H, 68H, 6FH
   \              0x20 0x77    
   \              0x69 0x74    
   \              0x68 0x6F    
   \   00000028   0x75 0x74          DC8 75H, 74H, 20H, 72H, 65H, 73H, 70H, 6FH
   \              0x20 0x72    
   \              0x65 0x73    
   \              0x70 0x6F    
   \   00000030   0x6E 0x73          DC8 6EH, 73H, 65H, 20H, 66H, 72H, 6FH, 6DH
   \              0x65 0x20    
   \              0x66 0x72    
   \              0x6F 0x6D    
   \   00000038   0x20 0x73          DC8 20H, 73H, 65H, 72H, 76H, 65H, 72H, 2EH
   \              0x65 0x72    
   \              0x76 0x65    
   \              0x72 0x2E    
   \   00000040   0x00               DC8 0
   \   00000041   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_82:
   \   00000000   0x55 0x70          DC8 "Upgrading anyway"
   \              0x67 0x72    
   \              0x61 0x64    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x61 0x6E    
   \              0x79 0x77    
   \              0x61 0x79    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_83:
   \   00000000   0x55 0x70          DC8 "Updating Min Block Request Period to %d seconds"
   \              0x64 0x61    
   \              0x74 0x69    
   \              0x6E 0x67    
   \              0x20 0x4D    
   \              0x69 0x6E    
   \              0x20 0x42    
   \              0x6C 0x6F    
   \              0x63 0x6B    
   \              0x20 0x52    
   \              0x65 0x71    
   \              0x75 0x65    
   \              0x73 0x74    
   \              0x20 0x50    
   \              0x65 0x72    
   \              0x69 0x6F    
   \              0x64 0x20    
   \              0x74 0x6F    
   \              0x20 0x25    
   \              0x64 0x20    
   \              0x73 0x65    
   \              0x63 0x6F    
   \              0x6E 0x64    
   \              0x73 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_84:
   \   00000000   0x44 0x6F          DC8 "Download delay by server %d ms"
   \              0x77 0x6E    
   \              0x6C 0x6F    
   \              0x61 0x64    
   \              0x20 0x64    
   \              0x65 0x6C    
   \              0x61 0x79    
   \              0x20 0x62    
   \              0x79 0x20    
   \              0x73 0x65    
   \              0x72 0x76    
   \              0x65 0x72    
   \              0x20 0x25    
   \              0x64 0x20    
   \              0x6D 0x73    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_85:
   \   00000000   0x44 0x6F          DC8 "Download aborted by server."
   \              0x77 0x6E    
   \              0x6C 0x6F    
   \              0x61 0x64    
   \              0x20 0x61    
   \              0x62 0x6F    
   \              0x72 0x74    
   \              0x65 0x64    
   \              0x20 0x62    
   \              0x79 0x20    
   \              0x73 0x65    
   \              0x72 0x76    
   \              0x65 0x72    
   \              0x2E 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_86:
   \   00000000   0x53 0x65          DC8 53H, 65H, 72H, 76H, 65H, 72H, 20H, 64H
   \              0x72 0x76    
   \              0x65 0x72    
   \              0x20 0x64    
   \   00000008   0x6F 0x65          DC8 6FH, 65H, 73H, 6EH, 27H, 74H, 20H, 73H
   \              0x73 0x6E    
   \              0x27 0x74    
   \              0x20 0x73    
   \   00000010   0x75 0x70          DC8 75H, 70H, 70H, 6FH, 72H, 74H, 20H, 70H
   \              0x70 0x6F    
   \              0x72 0x74    
   \              0x20 0x70    
   \   00000018   0x61 0x67          DC8 61H, 67H, 65H, 20H, 72H, 65H, 71H, 75H
   \              0x65 0x20    
   \              0x72 0x65    
   \              0x71 0x75    
   \   00000020   0x65 0x73          DC8 65H, 73H, 74H, 2CH, 20H, 6FH, 6EH, 6CH
   \              0x74 0x2C    
   \              0x20 0x6F    
   \              0x6E 0x6C    
   \   00000028   0x79 0x20          DC8 79H, 20H, 75H, 73H, 69H, 6EH, 67H, 20H
   \              0x75 0x73    
   \              0x69 0x6E    
   \              0x67 0x20    
   \   00000030   0x62 0x6C          DC8 62H, 6CH, 6FH, 63H, 6BH, 20H, 72H, 65H
   \              0x6F 0x63    
   \              0x6B 0x20    
   \              0x72 0x65    
   \   00000038   0x71 0x75          DC8 71H, 75H, 65H, 73H, 74H, 2EH, 0
   \              0x65 0x73    
   \              0x74 0x2E    
   \              0x00         
   \   0000003F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_87:
   \   00000000   0x53 0x65          DC8 "Server returned 'unsupported cluster command'."
   \              0x72 0x76    
   \              0x65 0x72    
   \              0x20 0x72    
   \              0x65 0x74    
   \              0x75 0x72    
   \              0x6E 0x65    
   \              0x64 0x20    
   \              0x27 0x75    
   \              0x6E 0x73    
   \              0x75 0x70    
   \              0x70 0x6F    
   \              0x72 0x74    
   \              0x65 0x64    
   \              0x20 0x63    
   \              0x6C 0x75    
   \              0x73 0x74    
   \              0x65 0x72    
   \              0x20 0x63    
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \              0x6E 0x64    
   \              0x27 0x2E    
   \              0x00         
   \   0000002F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_88:
   \   00000000   0x55 0x6E          DC8 "Unknown %p status code 0x%X"
   \              0x6B 0x6E    
   \              0x6F 0x77    
   \              0x6E 0x20    
   \              0x25 0x70    
   \              0x20 0x73    
   \              0x74 0x61    
   \              0x74 0x75    
   \              0x73 0x20    
   \              0x63 0x6F    
   \              0x64 0x65    
   \              0x20 0x30    
   \              0x78 0x25    
   \              0x58 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_89:
   \   00000000   0x25 0x70          DC8 25H, 70H, 20H, 68H, 61H, 73H, 20H, 64H
   \              0x20 0x68    
   \              0x61 0x73    
   \              0x20 0x64    
   \   00000008   0x61 0x74          DC8 61H, 74H, 61H, 20H, 73H, 69H, 7AH, 65H
   \              0x61 0x20    
   \              0x73 0x69    
   \              0x7A 0x65    
   \   00000010   0x20 0x28          DC8 20H, 28H, 25H, 64H, 29H, 20H, 73H, 6DH
   \              0x25 0x64    
   \              0x29 0x20    
   \              0x73 0x6D    
   \   00000018   0x61 0x6C          DC8 61H, 6CH, 6CH, 65H, 72H, 20H, 74H, 68H
   \              0x6C 0x65    
   \              0x72 0x20    
   \              0x74 0x68    
   \   00000020   0x61 0x6E          DC8 61H, 6EH, 20H, 61H, 63H, 74H, 75H, 61H
   \              0x20 0x61    
   \              0x63 0x74    
   \              0x75 0x61    
   \   00000028   0x6C 0x20          DC8 6CH, 20H, 70H, 61H, 63H, 6BH, 65H, 74H
   \              0x70 0x61    
   \              0x63 0x6B    
   \              0x65 0x74    
   \   00000030   0x20 0x73          DC8 20H, 73H, 69H, 7AH, 65H, 20H, 28H, 25H
   \              0x69 0x7A    
   \              0x65 0x20    
   \              0x28 0x25    
   \   00000038   0x64 0x29          DC8 64H, 29H, 2EH, 0
   \              0x2E 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_90:
   \   00000000   0x25 0x70          DC8 25H, 70H, 20H, 65H, 72H, 72H, 6FH, 72H
   \              0x20 0x65    
   \              0x72 0x72    
   \              0x6F 0x72    
   \   00000008   0x3A 0x20          DC8 3AH, 20H, 45H, 78H, 70H, 65H, 63H, 74H
   \              0x45 0x78    
   \              0x70 0x65    
   \              0x63 0x74    
   \   00000010   0x65 0x64          DC8 65H, 64H, 20H, 6FH, 66H, 66H, 73H, 65H
   \              0x20 0x6F    
   \              0x66 0x66    
   \              0x73 0x65    
   \   00000018   0x74 0x20          DC8 74H, 20H, 30H, 78H, 25H, 34H, 58H, 2CH
   \              0x30 0x78    
   \              0x25 0x34    
   \              0x58 0x2C    
   \   00000020   0x20 0x62          DC8 20H, 62H, 75H, 74H, 20H, 67H, 6FH, 74H
   \              0x75 0x74    
   \              0x20 0x67    
   \              0x6F 0x74    
   \   00000028   0x20 0x30          DC8 20H, 30H, 78H, 25H, 34H, 58H, 2EH, 20H
   \              0x78 0x25    
   \              0x34 0x58    
   \              0x2E 0x20    
   \   00000030   0x20 0x49          DC8 20H, 49H, 67H, 6EH, 6FH, 72H, 69H, 6EH
   \              0x67 0x6E    
   \              0x6F 0x72    
   \              0x69 0x6E    
   \   00000038   0x67 0x00          DC8 67H, 0
   \   0000003A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_91:
   \   00000000   0x25 0x70          DC8 25H, 70H, 20H, 69H, 6EH, 66H, 6FH, 20H
   \              0x20 0x69    
   \              0x6E 0x66    
   \              0x6F 0x20    
   \   00000008   0x64 0x69          DC8 64H, 69H, 64H, 20H, 6EH, 6FH, 74H, 20H
   \              0x64 0x20    
   \              0x6E 0x6F    
   \              0x74 0x20    
   \   00000010   0x6D 0x61          DC8 6DH, 61H, 74H, 63H, 68H, 20H, 6DH, 79H
   \              0x74 0x63    
   \              0x68 0x20    
   \              0x6D 0x79    
   \   00000018   0x20 0x65          DC8 20H, 65H, 78H, 70H, 65H, 63H, 74H, 65H
   \              0x78 0x70    
   \              0x65 0x63    
   \              0x74 0x65    
   \   00000020   0x64 0x20          DC8 64H, 20H, 69H, 6EH, 66H, 6FH, 2EH, 20H
   \              0x69 0x6E    
   \              0x66 0x6F    
   \              0x2E 0x20    
   \   00000028   0x20 0x44          DC8 20H, 44H, 72H, 6FH, 70H, 70H, 69H, 6EH
   \              0x72 0x6F    
   \              0x70 0x70    
   \              0x69 0x6E    
   \   00000030   0x67 0x2E          DC8 67H, 2EH, 0
   \              0x00         
   \   00000033   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_92:
   \   00000000   0x46 0x61          DC8 "Failed to write to storage device!"
   \              0x69 0x6C    
   \              0x65 0x64    
   \              0x20 0x74    
   \              0x6F 0x20    
   \              0x77 0x72    
   \              0x69 0x74    
   \              0x65 0x20    
   \              0x74 0x6F    
   \              0x20 0x73    
   \              0x74 0x6F    
   \              0x72 0x61    
   \              0x67 0x65    
   \              0x20 0x64    
   \              0x65 0x76    
   \              0x69 0x63    
   \              0x65 0x21    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_93:
   \   00000000   0x44 0x6F          DC8 "Download"
   \              0x77 0x6E    
   \              0x6C 0x6F    
   \              0x61 0x64    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_94:
   \   00000000   0x53 0x65          DC8 "Server aborted upgrade, status: 0x%X"
   \              0x72 0x76    
   \              0x65 0x72    
   \              0x20 0x61    
   \              0x62 0x6F    
   \              0x72 0x74    
   \              0x65 0x64    
   \              0x20 0x75    
   \              0x70 0x67    
   \              0x72 0x61    
   \              0x64 0x65    
   \              0x2C 0x20    
   \              0x73 0x74    
   \              0x61 0x74    
   \              0x75 0x73    
   \              0x3A 0x20    
   \              0x30 0x78    
   \              0x25 0x58    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_95:
   \   00000000   0x45 0x72          DC8 "Error: %p had invalid %p: "
   \              0x72 0x6F    
   \              0x72 0x3A    
   \              0x20 0x25    
   \              0x70 0x20    
   \              0x68 0x61    
   \              0x64 0x20    
   \              0x69 0x6E    
   \              0x76 0x61    
   \              0x6C 0x69    
   \              0x64 0x20    
   \              0x25 0x70    
   \              0x3A 0x20    
   \              0x00         
   \   0000001B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_96:
   \   00000000   0x6D 0x61          DC8 "manufacturer ID"
   \              0x6E 0x75    
   \              0x66 0x61    
   \              0x63 0x74    
   \              0x75 0x72    
   \              0x65 0x72    
   \              0x20 0x49    
   \              0x44 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_97:
   \   00000000   0x30 0x78          DC8 "0x%2X"
   \              0x25 0x32    
   \              0x58 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_98:
   \   00000000   0x69 0x6D          DC8 "image type ID"
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x74 0x79    
   \              0x70 0x65    
   \              0x20 0x49    
   \              0x44 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_99:
   \   00000000   0x66 0x69          DC8 "file version"
   \              0x6C 0x65    
   \              0x20 0x76    
   \              0x65 0x72    
   \              0x73 0x69    
   \              0x6F 0x6E    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_100:
   \   00000000   0x30 0x78          DC8 "0x%4X"
   \              0x25 0x34    
   \              0x58 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_101:
   \   00000000   0x41 0x64          DC8 "Adding %d ms. delay for immediate upgrade."
   \              0x64 0x69    
   \              0x6E 0x67    
   \              0x20 0x25    
   \              0x64 0x20    
   \              0x6D 0x73    
   \              0x2E 0x20    
   \              0x64 0x65    
   \              0x6C 0x61    
   \              0x79 0x20    
   \              0x66 0x6F    
   \              0x72 0x20    
   \              0x69 0x6D    
   \              0x6D 0x65    
   \              0x64 0x69    
   \              0x61 0x74    
   \              0x65 0x20    
   \              0x75 0x70    
   \              0x67 0x72    
   \              0x61 0x64    
   \              0x65 0x2E    
   \              0x00         
   \   0000002B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_102:
   \   00000000   0x43 0x6F          DC8 "Countdown to upgrade: %d ms"
   \              0x75 0x6E    
   \              0x74 0x64    
   \              0x6F 0x77    
   \              0x6E 0x20    
   \              0x74 0x6F    
   \              0x20 0x75    
   \              0x70 0x67    
   \              0x72 0x61    
   \              0x64 0x65    
   \              0x3A 0x20    
   \              0x25 0x64    
   \              0x20 0x6D    
   \              0x73 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_103:
   \   00000000   0x25 0x70          DC8 25H, 70H, 3AH, 20H, 69H, 6EH, 76H, 61H
   \              0x3A 0x20    
   \              0x69 0x6E    
   \              0x76 0x61    
   \   00000008   0x6C 0x69          DC8 6CH, 69H, 64H, 20H, 6FH, 66H, 66H, 73H
   \              0x64 0x20    
   \              0x6F 0x66    
   \              0x66 0x73    
   \   00000010   0x65 0x74          DC8 65H, 74H, 20H, 63H, 75H, 72H, 72H, 65H
   \              0x20 0x63    
   \              0x75 0x72    
   \              0x72 0x65    
   \   00000018   0x6E 0x74          DC8 6EH, 74H, 54H, 69H, 6DH, 65H, 28H, 30H
   \              0x54 0x69    
   \              0x6D 0x65    
   \              0x28 0x30    
   \   00000020   0x78 0x25          DC8 78H, 25H, 34H, 58H, 29H, 20H, 3EH, 20H
   \              0x34 0x58    
   \              0x29 0x20    
   \              0x3E 0x20    
   \   00000028   0x75 0x70          DC8 75H, 70H, 67H, 72H, 61H, 64H, 65H, 54H
   \              0x67 0x72    
   \              0x61 0x64    
   \              0x65 0x54    
   \   00000030   0x69 0x6D          DC8 69H, 6DH, 65H, 28H, 30H, 78H, 25H, 34H
   \              0x65 0x28    
   \              0x30 0x78    
   \              0x25 0x34    
   \   00000038   0x58 0x29          DC8 58H, 29H, 0
   \              0x00         
   \   0000003B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_104:
   \   00000000   0x4F 0x54          DC8 "OTA Cluster: wait for %d s"
   \              0x41 0x20    
   \              0x43 0x6C    
   \              0x75 0x73    
   \              0x74 0x65    
   \              0x72 0x3A    
   \              0x20 0x77    
   \              0x61 0x69    
   \              0x74 0x20    
   \              0x66 0x6F    
   \              0x72 0x20    
   \              0x25 0x64    
   \              0x20 0x73    
   \              0x00         
   \   0000001B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_105:
   \   00000000   0x52 0x58          DC8 "RXed timeOut 0x%4X s, MAX timeOut 0x%4X s"
   \              0x65 0x64    
   \              0x20 0x74    
   \              0x69 0x6D    
   \              0x65 0x4F    
   \              0x75 0x74    
   \              0x20 0x30    
   \              0x78 0x25    
   \              0x34 0x58    
   \              0x20 0x73    
   \              0x2C 0x20    
   \              0x4D 0x41    
   \              0x58 0x20    
   \              0x74 0x69    
   \              0x6D 0x65    
   \              0x4F 0x75    
   \              0x74 0x20    
   \              0x30 0x78    
   \              0x25 0x34    
   \              0x58 0x20    
   \              0x73 0x00    
   \   0000002A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_106:
   \   00000000   0x41 0x70          DC8 "Applying upgrade"
   \              0x70 0x6C    
   \              0x79 0x69    
   \              0x6E 0x67    
   \              0x20 0x75    
   \              0x70 0x67    
   \              0x72 0x61    
   \              0x64 0x65    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_107:
   \   00000000   0x49 0x6D          DC8 49H, 6DH, 61H, 67H, 65H, 20H, 62H, 6CH
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x62 0x6C    
   \   00000008   0x6F 0x63          DC8 6FH, 63H, 6BH, 20H, 72H, 65H, 71H, 75H
   \              0x6B 0x20    
   \              0x72 0x65    
   \              0x71 0x75    
   \   00000010   0x65 0x73          DC8 65H, 73H, 74H, 20H, 74H, 65H, 73H, 74H
   \              0x74 0x20    
   \              0x74 0x65    
   \              0x73 0x74    
   \   00000018   0x20 0x6F          DC8 20H, 6FH, 6EH, 6CH, 79H, 20H, 77H, 6FH
   \              0x6E 0x6C    
   \              0x79 0x20    
   \              0x77 0x6F    
   \   00000020   0x72 0x6B          DC8 72H, 6BH, 73H, 20H, 77H, 68H, 65H, 6EH
   \              0x73 0x20    
   \              0x77 0x68    
   \              0x65 0x6E    
   \   00000028   0x20 0x73          DC8 20H, 73H, 74H, 61H, 74H, 65H, 20H, 69H
   \              0x74 0x61    
   \              0x74 0x65    
   \              0x20 0x69    
   \   00000030   0x73 0x20          DC8 73H, 20H, 42H, 4FH, 4FH, 54H, 4CH, 4FH
   \              0x42 0x4F    
   \              0x4F 0x54    
   \              0x4C 0x4F    
   \   00000038   0x41 0x44          DC8 41H, 44H, 5FH, 53H, 54H, 41H, 54H, 45H
   \              0x5F 0x53    
   \              0x54 0x41    
   \              0x54 0x45    
   \   00000040   0x5F 0x4E          DC8 5FH, 4EH, 4FH, 4EH, 45H, 0
   \              0x4F 0x4E    
   \              0x45 0x00    
   \   00000046   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_15:
   \   00000000   0x79 0x65          DC8 "yes"
   \              0x73 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_16:
   \   00000000   0x6E 0x6F          DC8 "no"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_37:
   \   00000000   0x25 0x70          DC8 "%p: failed parsing OTA cmd 0x%x"
   \              0x3A 0x20    
   \              0x66 0x61    
   \              0x69 0x6C    
   \              0x65 0x64    
   \              0x20 0x70    
   \              0x61 0x72    
   \              0x73 0x69    
   \              0x6E 0x67    
   \              0x20 0x4F    
   \              0x54 0x41    
   \              0x20 0x63    
   \              0x6D 0x64    
   \              0x20 0x30    
   \              0x78 0x25    
   \              0x78 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_39:
   \   00000000   0x4F 0x54          DC8 4FH, 54H, 41H, 20H, 44H, 65H, 66H, 61H
   \              0x41 0x20    
   \              0x44 0x65    
   \              0x66 0x61    
   \   00000008   0x75 0x6C          DC8 75H, 6CH, 74H, 20H, 72H, 65H, 73H, 70H
   \              0x74 0x20    
   \              0x72 0x65    
   \              0x73 0x70    
   \   00000010   0x6F 0x6E          DC8 6FH, 6EH, 73H, 65H, 20H, 74H, 6FH, 20H
   \              0x73 0x65    
   \              0x20 0x74    
   \              0x6F 0x20    
   \   00000018   0x63 0x6F          DC8 63H, 6FH, 6DH, 6DH, 61H, 6EH, 64H, 20H
   \              0x6D 0x6D    
   \              0x61 0x6E    
   \              0x64 0x20    
   \   00000020   0x49 0x44          DC8 49H, 44H, 20H, 30H, 78H, 25H, 58H, 2CH
   \              0x20 0x30    
   \              0x78 0x25    
   \              0x58 0x2C    
   \   00000028   0x20 0x73          DC8 20H, 73H, 74H, 61H, 74H, 75H, 73H, 20H
   \              0x74 0x61    
   \              0x74 0x75    
   \              0x73 0x20    
   \   00000030   0x30 0x78          DC8 30H, 78H, 25H, 58H, 0
   \              0x25 0x58    
   \              0x00         
   \   00000035   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_40:
   \   00000000   0x25 0x70          DC8 "%p unicast, querying"
   \              0x20 0x75    
   \              0x6E 0x69    
   \              0x63 0x61    
   \              0x73 0x74    
   \              0x2C 0x20    
   \              0x71 0x75    
   \              0x65 0x72    
   \              0x79 0x69    
   \              0x6E 0x67    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_41:
   \   00000000   0x49 0x6D          DC8 "Image notify command"
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x6E 0x6F    
   \              0x74 0x69    
   \              0x66 0x79    
   \              0x20 0x63    
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \              0x6E 0x64    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_42:
   \   00000000   0x25 0x70          DC8 "%p %p payload type 0x%X"
   \              0x20 0x25    
   \              0x70 0x20    
   \              0x70 0x61    
   \              0x79 0x6C    
   \              0x6F 0x61    
   \              0x64 0x20    
   \              0x74 0x79    
   \              0x70 0x65    
   \              0x20 0x30    
   \              0x78 0x25    
   \              0x58 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_43:
   \   00000000   0x49 0x6E          DC8 "Invalid"
   \              0x76 0x61    
   \              0x6C 0x69    
   \              0x64 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_44:
   \   00000000   0x25 0x70          DC8 "%p %p: out of range jitter %d"
   \              0x20 0x25    
   \              0x70 0x3A    
   \              0x20 0x6F    
   \              0x75 0x74    
   \              0x20 0x6F    
   \              0x66 0x20    
   \              0x72 0x61    
   \              0x6E 0x67    
   \              0x65 0x20    
   \              0x6A 0x69    
   \              0x74 0x74    
   \              0x65 0x72    
   \              0x20 0x25    
   \              0x64 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_45:
   \   00000000   0x25 0x70          DC8 25H, 70H, 20H, 25H, 70H, 3AH, 20H, 70H
   \              0x20 0x25    
   \              0x70 0x3A    
   \              0x20 0x70    
   \   00000008   0x61 0x79          DC8 61H, 79H, 6CH, 6FH, 61H, 64H, 20H, 6CH
   \              0x6C 0x6F    
   \              0x61 0x64    
   \              0x20 0x6C    
   \   00000010   0x65 0x6E          DC8 65H, 6EH, 67H, 74H, 68H, 20H, 64H, 6FH
   \              0x67 0x74    
   \              0x68 0x20    
   \              0x64 0x6F    
   \   00000018   0x65 0x73          DC8 65H, 73H, 6EH, 27H, 74H, 20H, 6DH, 61H
   \              0x6E 0x27    
   \              0x74 0x20    
   \              0x6D 0x61    
   \   00000020   0x74 0x63          DC8 74H, 63H, 68H, 20H, 74H, 79H, 70H, 65H
   \              0x68 0x20    
   \              0x74 0x79    
   \              0x70 0x65    
   \   00000028   0x20 0x30          DC8 20H, 30H, 78H, 25H, 58H, 20H, 28H, 25H
   \              0x78 0x25    
   \              0x58 0x20    
   \              0x28 0x25    
   \   00000030   0x64 0x20          DC8 64H, 20H, 3CH, 20H, 25H, 64H, 29H, 0
   \              0x3C 0x20    
   \              0x25 0x64    
   \              0x29 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_46:
   \   00000000   0x25 0x70          DC8 "%p %p due to non-matching manufacturer ID"
   \              0x20 0x25    
   \              0x70 0x20    
   \              0x64 0x75    
   \              0x65 0x20    
   \              0x74 0x6F    
   \              0x20 0x6E    
   \              0x6F 0x6E    
   \              0x2D 0x6D    
   \              0x61 0x74    
   \              0x63 0x68    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x6D 0x61    
   \              0x6E 0x75    
   \              0x66 0x61    
   \              0x63 0x74    
   \              0x75 0x72    
   \              0x65 0x72    
   \              0x20 0x49    
   \              0x44 0x00    
   \   0000002A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_48:
   \   00000000   0x25 0x70          DC8 "%p %p due to non-matching image type ID"
   \              0x20 0x25    
   \              0x70 0x20    
   \              0x64 0x75    
   \              0x65 0x20    
   \              0x74 0x6F    
   \              0x20 0x6E    
   \              0x6F 0x6E    
   \              0x2D 0x6D    
   \              0x61 0x74    
   \              0x63 0x68    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x69 0x6D    
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x74 0x79    
   \              0x70 0x65    
   \              0x20 0x49    
   \              0x44 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_49:
   \   00000000   0x25 0x70          DC8 "%p %p due to matching firmware version"
   \              0x20 0x25    
   \              0x70 0x20    
   \              0x64 0x75    
   \              0x65 0x20    
   \              0x74 0x6F    
   \              0x20 0x6D    
   \              0x61 0x74    
   \              0x63 0x68    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x66 0x69    
   \              0x72 0x6D    
   \              0x77 0x61    
   \              0x72 0x65    
   \              0x20 0x76    
   \              0x65 0x72    
   \              0x73 0x69    
   \              0x6F 0x6E    
   \              0x00         
   \   00000027   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_50:
   \   00000000   0x25 0x70          DC8 "%p %p, Rx'd Jitter (0x%x), Picked Jitter (0x%x)"
   \              0x20 0x25    
   \              0x70 0x2C    
   \              0x20 0x52    
   \              0x78 0x27    
   \              0x64 0x20    
   \              0x4A 0x69    
   \              0x74 0x74    
   \              0x65 0x72    
   \              0x20 0x28    
   \              0x30 0x78    
   \              0x25 0x78    
   \              0x29 0x2C    
   \              0x20 0x50    
   \              0x69 0x63    
   \              0x6B 0x65    
   \              0x64 0x20    
   \              0x4A 0x69    
   \              0x74 0x74    
   \              0x65 0x72    
   \              0x20 0x28    
   \              0x30 0x78    
   \              0x25 0x78    
   \              0x29 0x00    

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   askServerToRunUpgrade
         8   -> emberAfPrintln
         8   -> recordUpgradeStatus
         0   -> runUpgrade
      16   calculateTimer
        16   -> emberAfPrintln
      24   commandParse
        24   -> emberAfPrint
        24   -> emberAfPrintln
      24   continueImageDownload
        24   -> downloadAndVerifyFinish
        24   -> emAfGetCurrentPageRequestStatus
        24   -> emAfInitPageRequestClient
        24   -> emAfNextMissedBlockRequestOffset
        24   -> emberAfPrintln
        24   -> getCurrentOffset
        24   -> recordUpgradeStatus
        24   -> sendMessage
        24   -> setTimer
        24   -> updateCurrentOffset
      40   continueImageVerification
        40   -> downloadAndVerifyFinish
        40   -> emAfOtaImageSignatureVerify
        40   -> emberAfOtaClientCustomVerifyCallback
        40   -> emberAfOtaStorageCheckTempDataCallback
        40   -> emberAfPrint
        40   -> emberAfPrintln
        40   -> recordUpgradeStatus
        40   -> setTimer
      32   determineNextState
        32   -> continueImageDownload
        32   -> continueImageVerification
        32   -> downloadAndVerifyFinish
        32   -> emAfPrintPercentageSetStartAndEnd
        32   -> emberAfOtaClientVersionInfoCallback
        32   -> emberAfOtaStorageCheckTempDataCallback
        32   -> emberAfOtaStorageClearTempDataCallback
        32   -> emberAfOtaStorageDriverPrepareToResumeDownloadCallback
        32   -> emberAfPrintln
        32   -> queryNextImage
        32   -> recordUpgradeStatus
        32   -> updateCurrentOffset
        32   -> updateDownloadFileVersion
      16   downloadAndVerifyFinish
        16   -> askServerToRunUpgrade
        16   -> emberAfOtaClientDownloadCompleteCallback
        16   -> emberAfPrintln
        16   -> queryNextImage
        16   -> sendMessage
       8   emAfOtaClientPrintState
         8   -> emAfCalculatePercentage
         0   -> emberAfPrintln
         8   -> emberAfPrintln
         8   -> getCurrentOffset
      16   emAfOtaClientServiceDiscoveryCallback
        16   -> emberAfFindIeeeAddress
        16   -> emberAfPrintln
        16   -> emberLookupEui64ByNodeId
        16   -> euiLookupErrorOccurred
        16   -> halCommonMemCopy
        16   -> recordServerEuiAndGoToNextState
        16   -> recordUpgradeStatus
        16   -> restartServerDiscoveryAfterDelay
       8   emAfOtaClientStop
         8   -> downloadAndVerifyFinish
         0   -> emberAfDeactivateClientTick
         8   -> recordUpgradeStatus
       0   emAfOtaVerifyStoredDataFinish
         0   -> continueImageVerification
       8   emAfSendImageBlockRequestTest
         0   -> sendMessage
         8   -> updateCurrentOffset
       0   emAfSetPageRequest
       0   emAfUsingPageRequest
       8   emberAfOtaBootloadClusterClientDefaultResponseCallback
         8   -> emberAfPrintln
      32   emberAfOtaBootloadClusterClientInitCallback
        32   -> emAfOtaClientStop
        32   -> emberAfEndpointEnableDisable
        32   -> emberAfOtaClientVersionInfoCallback
        32   -> emberAfOtaStorageInitCallback
        32   -> emberAfPrintln
        32   -> isEepromAvailable
       0   emberAfOtaBootloadClusterClientTickCallback
         0   -> otaClientTick
      16   emberAfOtaClientIncomingMessageRawCallback
        16   -> commandParse
        16   -> emberAfPrintln
        16   -> emberAfSendDefaultResponse
       8   emberAfOtaClientStartCallback
         8   -> isEepromAvailable
         8   -> startServerDiscovery
       8   emberAfPluginAuroraOtaClientStackStatusCallback
         8   -> emberAfPrintln
         8   -> halCommonGetRandom
         8   -> isEepromAvailable
         8   -> recordUpgradeStatus
       0   emberAfPluginOtaStorageSimpleEepromEraseCompleteCallback
         0   -> downloadAndVerifyFinish
         0   -> otaClientTick
       0   euiLookupErrorOccurred
         0   -> restartServerDiscoveryAfterDelay
      24   getCurrentOffset
        24   -> emberAfReadAttribute
      64   imageBlockResponseParse
        64   -> calculateTimer
        64   -> continueImageDownload
        64   -> continueImageVerification
        64   -> downloadAndVerifyFinish
        64   -> emAfAbortPageRequest
        64   -> emAfGetCurrentPageRequestStatus
        64   -> emAfGetFinishedPageRequestOffset
        64   -> emAfGetPageRequestMissedPacketDelayMs
        64   -> emAfHandlingPageRequestClient
        64   -> emAfNoteReceivedBlockForPageRequestClient
        64   -> emAfOtaParseImageIdFromMessage
        64   -> emAfPrintPercentageUpdate
        64   -> emberAfGetInt16u
        64   -> emberAfGetInt32u
        64   -> emberAfOtaStorageFinishDownloadCallback
        64   -> emberAfOtaStorageWriteTempDataCallback
        64   -> emberAfPrintln
        64   -> getCurrentOffset
        64   -> halCommonMemCompare
        64   -> setTimer
        64   -> updateCurrentOffset
      64   imageNotifyParse
        64   -> emberAfGetInt16u
        64   -> emberAfGetInt32u
        64   -> emberAfOtaClientVersionInfoCallback
        64   -> emberAfPrintln
        64   -> halCommonGetRandom
        64   -> queryNextImage
      16   otaClientTick
        16   -> emAfPageRequestTimerExpired
        16   -> emberAfPrintln
       8   putImageInfoInMessage
         8   -> emberAfPutInt16uInResp
         0   -> emberAfPutInt32uInResp
      16   queryNextImage
        16   -> emberAfOtaClientVersionInfoCallback
        16   -> emberAfPrintln
        16   -> recordUpgradeStatus
         0   -> setTimer
      72   queryNextImageResponseParse
        72   -> __aeabi_memcpy4
        72   -> continueImageDownload
        72   -> downloadAndVerifyFinish
        72   -> emAfOtaParseImageIdFromMessage
        72   -> emAfPrintPercentageSetStartAndEnd
        72   -> emberAfDeactivateClientTick
        72   -> emberAfGetInt32u
        72   -> emberAfIsOtaImageIdValid
        72   -> emberAfOtaStorageClearTempDataCallback
        72   -> emberAfOtaStorageDeleteImageCallback
        72   -> emberAfOtaStorageDriverMaxDownloadSizeCallback
        72   -> emberAfOtaStorageSearchCallback
        72   -> emberAfPrintln
        72   -> queryNextImage
        72   -> recordUpgradeStatus
        72   -> updateCurrentOffset
        72   -> updateDownloadFileVersion
      16   recordServerEuiAndGoToNextState
         0   -> determineNextState
        16   -> emberAfPrintln
        16   -> emberAfWriteAttribute
      24   recordUpgradeStatus
        24   -> emberAfPrintln
        24   -> emberAfWriteAttribute
       8   restartServerDiscoveryAfterDelay
         0   -> recordUpgradeStatus
         8   -> setTimer
       8   runUpgrade
         8   -> emberAfOtaClientBootloadCallback
         8   -> emberAfPrintln
         0   -> queryNextImage
      40   sendMessage
        40   -> emberAfGetEui64
        40   -> emberAfIndexFromEndpoint
        40   -> emberAfNextSequence
        40   -> emberAfPrintln
        40   -> emberAfPutBlockInResp
        40   -> emberAfPutInt16uInResp
        40   -> emberAfPutInt32uInResp
        40   -> emberAfPutInt8uInResp
        40   -> emberAfSendCommandUnicast
        40   -> getCurrentOffset
        40   -> putImageInfoInMessage
        40   -> setTimer
      24   setTimer
        24   -> emAfGetCurrentPageRequestStatus
        24   -> emberAfScheduleClientTickExtended
      16   startServerDiscovery
        16   -> emberAfFindDevicesByProfileAndCluster
        16   -> emberAfIndexFromEndpoint
        16   -> emberAfPrintln
        16   -> recordUpgradeStatus
         0   -> setTimer
      16   updateCurrentOffset
        16   -> emberAfWriteAttribute
       0   updateDownloadFileVersion
      40   upgradeEndResponseParse
        40   -> calculateTimer
        40   -> downloadAndVerifyFinish
        40   -> emAfOtaParseImageIdFromMessage
        40   -> emberAfGetInt32u
        40   -> emberAfPrint
        40   -> emberAfPrintln
        40   -> recordUpgradeStatus
        40   -> setTimer


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable128
       4  ??DataTable128_1
       4  ??DataTable135
       4  ??DataTable139
       4  ??DataTable139_1
       4  ??DataTable141
       4  ??DataTable141_1
       4  ??DataTable145
       4  ??DataTable148
       4  ??DataTable148_1
       4  ??DataTable148_10
       4  ??DataTable148_11
       4  ??DataTable148_12
       4  ??DataTable148_13
       4  ??DataTable148_14
       4  ??DataTable148_15
       4  ??DataTable148_16
       4  ??DataTable148_17
       4  ??DataTable148_18
       4  ??DataTable148_19
       4  ??DataTable148_2
       4  ??DataTable148_20
       4  ??DataTable148_21
       4  ??DataTable148_3
       4  ??DataTable148_4
       4  ??DataTable148_5
       4  ??DataTable148_6
       4  ??DataTable148_7
       4  ??DataTable148_8
       4  ??DataTable148_9
       6  ?Subroutine0
       6  ?Subroutine1
       8  ?Subroutine2
       6  ?Subroutine3
       6  ?Subroutine4
       4  ?Subroutine5
       8  ?Subroutine6
      12  ?Subroutine7
       8  ?_0
      28  ?_1
      24  ?_10
       8  ?_100
      44  ?_101
      28  ?_102
      60  ?_103
      28  ?_104
      44  ?_105
      20  ?_106
      72  ?_107
      48  ?_11
      32  ?_12
      16  ?_13
      28  ?_14
       4  ?_15
       4  ?_16
      28  ?_17
      40  ?_18
      52  ?_19
      24  ?_2
      28  ?_20
      40  ?_21
      60  ?_22
      56  ?_23
      84  ?_24
      60  ?_25
      28  ?_26
      20  ?_27
      24  ?_28
      48  ?_29
      20  ?_3
      68  ?_30
      32  ?_31
      16  ?_32
      28  ?_33
      28  ?_34
      24  ?_35
      24  ?_36
      32  ?_37
       8  ?_38
      56  ?_39
      16  ?_4
      24  ?_40
      24  ?_41
      24  ?_42
       8  ?_43
      32  ?_44
      56  ?_45
      44  ?_46
      12  ?_47
      40  ?_48
      40  ?_49
      20  ?_5
      48  ?_50
      36  ?_51
      40  ?_52
      48  ?_53
      24  ?_54
      44  ?_55
      32  ?_56
      56  ?_57
      32  ?_58
      24  ?_59
      20  ?_6
      56  ?_60
      44  ?_61
      68  ?_62
      56  ?_63
      28  ?_64
      24  ?_65
      24  ?_66
      20  ?_67
      20  ?_68
      20  ?_69
      16  ?_7
      20  ?_70
      20  ?_71
      60  ?_72
      20  ?_73
      28  ?_74
      12  ?_75
       8  ?_76
       8  ?_77
       8  ?_78
      20  ?_79
      28  ?_8
      20  ?_80
      68  ?_81
      20  ?_82
      48  ?_83
      32  ?_84
      28  ?_85
      64  ?_86
      48  ?_87
      28  ?_88
      60  ?_89
      24  ?_9
      60  ?_90
      52  ?_91
      36  ?_92
      12  ?_93
      40  ?_94
      28  ?_95
      16  ?_96
       8  ?_97
      16  ?_98
      16  ?_99
      62  askServerToRunUpgrade
      12  bootloadStateToExternalState
      74  calculateTimer
     258  commandParse
     106  continueImageDownload
     286  continueImageVerification
      80  currentBootloadState
          myEndpoint
          serverEndpoint
          errors
          waitingForResponse
          usePageRequest
          customVerifyStatus
          currentDownloadFile
          serverNodeId
          hardwareVersion
          minBlockRequestPeriod
          bootloadStateNames
          totalImageSize
          nextEventTimer
     198  determineNextState
      92  downloadAndVerifyFinish
      86  emAfOtaClientPrintState
     130  emAfOtaClientServiceDiscoveryCallback
      32  emAfOtaClientStop
       1  emAfOtaClientStopDownloadPercentage
      14  emAfOtaVerifyStoredDataFinish
      56  emAfSendImageBlockRequestTest
       6  emAfSetPageRequest
       6  emAfUsingPageRequest
      44  emberAfOtaBootloadClusterClientDefaultResponseCallback
      68  emberAfOtaBootloadClusterClientInitCallback
       2  emberAfOtaBootloadClusterClientTickCallback
      46  emberAfOtaClientIncomingMessageRawCallback
      30  emberAfOtaClientStartCallback
      56  emberAfPluginAuroraOtaClientStackStatusCallback
      26  emberAfPluginOtaStorageSimpleEepromEraseCompleteCallback
      10  euiLookupErrorOccurred
      44  getCurrentOffset
     514  imageBlockResponseParse
     256  imageNotifyParse
       4  imageNotifyPayloadLengths
     150  otaClientTick
      28  putImageInfoInMessage
     112  queryNextImage
     324  queryNextImageResponseParse
      40  recordServerEuiAndGoToNextState
      60  recordUpgradeStatus
      18  restartServerDiscoveryAfterDelay
      26  runUpgrade
     294  sendMessage
      80  setTimer
      84  startServerDiscovery
      32  updateCurrentOffset
       8  updateDownloadFileVersion
     270  upgradeEndResponseParse
       8  zclStatusFromResult

 
    81 bytes in section .data
   640 bytes in section .rodata
 7 088 bytes in section .text
 
 7 088 bytes of CODE  memory
   640 bytes of CONST memory
    81 bytes of DATA  memory

Errors: none
Warnings: 2
